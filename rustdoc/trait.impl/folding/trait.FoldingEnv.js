(function() {var implementors = {
"kimchi_optimism":[["impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, G: CommitmentCurve, Col, Selector: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; FoldingEnv&lt;&lt;G as AffineCurve&gt;::ScalarField, <a class=\"struct\" href=\"kimchi_optimism/folding/struct.FoldingInstance.html\" title=\"struct kimchi_optimism::folding::FoldingInstance\">FoldingInstance</a>&lt;N, G&gt;, <a class=\"struct\" href=\"kimchi_optimism/folding/struct.FoldingWitness.html\" title=\"struct kimchi_optimism::folding::FoldingWitness\">FoldingWitness</a>&lt;N, &lt;G as AffineCurve&gt;::ScalarField&gt;, Col, <a class=\"enum\" href=\"kimchi_optimism/folding/enum.Challenge.html\" title=\"enum kimchi_optimism::folding::Challenge\">Challenge</a>, Selector&gt; for <a class=\"struct\" href=\"kimchi_optimism/folding/struct.FoldingEnvironment.html\" title=\"struct kimchi_optimism::folding::FoldingEnvironment\">FoldingEnvironment</a>&lt;N, G&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"kimchi_optimism/folding/struct.FoldingWitness.html\" title=\"struct kimchi_optimism::folding::FoldingWitness\">FoldingWitness</a>&lt;N, G::ScalarField&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Col, Output = Evaluations&lt;G::ScalarField, Radix2EvaluationDomain&lt;G::ScalarField&gt;&gt;&gt;,\n    <a class=\"struct\" href=\"kimchi_optimism/folding/struct.FoldingWitness.html\" title=\"struct kimchi_optimism::folding::FoldingWitness\">FoldingWitness</a>&lt;N, G::ScalarField&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Selector, Output = Evaluations&lt;G::ScalarField, Radix2EvaluationDomain&lt;G::ScalarField&gt;&gt;&gt;,</div>"]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()