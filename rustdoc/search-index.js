var searchIndex = JSON.parse('{\
"export_test_vectors":{"doc":"","t":"AFANNNNEELLLLLLLLLLLLLLLLLLLLFLLLLLLLLDDLLLLLLLLLLLLLLFLLMLLMMFFLLMLLLLLLLL","n":["inner","main","vectors","B10","Hex","Kimchi","Legacy","Mode","ParamType","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from_str","from_str","init","init","into","into","main","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","TestVector","TestVectors","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","generate","init","init","input","into","into","name","output","poseidon","rand_fields","serialize","serialize","test_vectors","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"export_test_vectors"],[3,"export_test_vectors::inner"],[38,"export_test_vectors::vectors"],[75,"core::fmt"],[76,"core::fmt"],[77,"core::any"],[78,"mina_curves::pasta::fields::fp"],[79,"mina_poseidon::poseidon"],[80,"alloc::vec"],[81,"rand::rng"],[82,"serde::ser"]],"d":["","“Usage: cargo run –all-features –bin …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","creates a set of test vectors","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Computes the poseidon hash of several field elements. Uses …","generates a vector of <code>length</code> field elements","","","","","","","","","","",""],"i":[0,0,0,3,3,6,6,0,0,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,0,3,6,3,6,3,6,3,6,0,0,10,11,10,11,10,11,10,11,10,11,10,11,10,11,0,10,11,11,10,11,10,11,0,0,10,11,10,10,11,10,11,10,11,10,11],"f":[0,[[],1],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,1],[2,1],[[3,4],5],[[6,4],5],[-1,-1,[]],[-1,-1,[]],[7,[[8,[3]]]],[7,[[8,[6]]]],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,1],[2,1],[[10,4],5],[[11,4],5],[-1,-1,[]],[-1,-1,[]],[[3,6],10],[[],2],[[],2],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[13,[12]],[14,[12]]],12],[[-1,15],[[16,[12]]],17],[[10,-1],8,18],[[11,-1],8,18],0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[15,"tuple"],[15,"usize"],[4,"Mode",3],[3,"Formatter",75],[6,"Result",75],[4,"ParamType",3],[15,"str"],[4,"Result",76],[3,"TypeId",77],[3,"TestVectors",38],[3,"TestVector",38],[6,"Fp",78],[15,"slice"],[3,"ArithmeticSpongeParams",79],[15,"u8"],[3,"Vec",80],[8,"Rng",81],[8,"Serializer",82]]},\
"flamegraph":{"doc":"","t":"FF","n":["black_box","main"],"q":[[0,"flamegraph"]],"d":["function to avoid optimizations by the compiler taken from …",""],"i":[0,0],"f":[[-1,-1,[]],[[],1]],"c":[],"p":[[15,"tuple"]]},\
"groupmap":{"doc":"Follows approach of SvdW06 to construct a “near injection…","t":"DIKLLLLLLLLLFLLKLKLLLLLL","n":["BWParameters","GroupMap","batch_to_group_x","batch_to_group_x","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","from","get_y","init","into","setup","setup","to_group","to_group","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"groupmap"],[24,"alloc::vec"],[25,"ark_ec::models"],[26,"core::clone"],[27,"core::option"],[28,"core::result"],[29,"core::any"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","returns the y-coordinate if x is a valid point on the …","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,11,3,3,3,3,3,3,3,3,3,0,3,3,11,3,11,3,3,3,3,3,3],"f":[0,0,[[-1,[1,[-2]]],[[1,[[2,[-2]]]]],[],[]],[[[3,[-1]],1],[[1,[2]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[-1]]],[[3,[-1]]],[5,4]],[[-1,-2],6,[],[]],[7,-1,[]],[7,-1,[]],[7,6],[-1,-1,[]],[[],8],[[],7],[-1,-2,[],[]],[[],-1,[]],[[],[[3,[-1]]],4],[[-1,-2],[[6,[-2,-2]]],[],[]],[[[3,[-1]]],6,4],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Vec",24],[15,"array"],[3,"BWParameters",0],[8,"SWModelParameters",25],[8,"Clone",26],[15,"tuple"],[15,"usize"],[4,"Option",27],[4,"Result",28],[3,"TypeId",29],[8,"GroupMap",0]]},\
"internal_tracing":{"doc":"","t":"NNELLOOLLLLLFFLLL","n":["Microseconds","SystemTime","TimeInput","borrow","borrow_mut","checkpoint","decl_traces","from","from","from","into","micros","now_micros","time_to_micros","try_from","try_into","type_id"],"q":[[0,"internal_tracing"],[17,"std::time"],[18,"core::result"],[19,"core::any"]],"d":["","","","","","Noop. Internal tracing not enabled!","Noop. Internal tracing not enabled!","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[2,2,0,2,2,0,0,2,2,2,2,2,0,0,2,2,2],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-1,[]],[1,2],[3,2],[-1,-2,[],[]],[2,1],[[],1],[3,1],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]]],"c":[],"p":[[15,"u64"],[4,"TimeInput",0],[3,"SystemTime",17],[4,"Result",18],[3,"TypeId",19]]},\
"kimchi":{"doc":"Kimchi","t":"AOOAAAAOOOCAACCCAACAAAAACOOAADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLMLLLLLAAAAAAAAAAAAAASIDDEDSINNNKLLLLLLLLLLLLMKLLMKKLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMLLLLNENNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDNNDDENLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLMMLLLLLLMMMLMLLLLLMMMMLLLLLLMMMLLLLLLLLLLLLLMMLMLMMMMLLMLMMMMMMMLFLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMFMMDLLLLMMLLLLLLLLLMMMLLLLLMLDLLLLLMMMMLLLLLLLLLLLLLLNNNNNNNNNDNNDNNNQQIINNEDNNNNENNNGNNNDEENENNNNINNNNDNNNDNNNNNNNNNNNNEENNNNNNNDNNNNNNNNNNNNNNNNDNLLLMMLOOLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLMMLFLLMMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKMLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLKLKLLLLLFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFKLMLLLLLMLMLLLLLLLLMLLLLLLLFAMMMMLLLLLMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLMLLLLLLLLLLLLLLLFLMFFMLLMMMMMMIFKKKFKFKKKKKKKKKKCCCCCCCCNNNNDDEGNINNNENNNNNNENNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLMKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMLLMMMAAAAARDFLLLLFLLLLMLLLLMLLFLLLLFLFNDEDNNLLLLLLLLLLLMLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMMMMLMMMMLLMMLLLLLLLLLLLLLLLMMMNNDGGDNDDEDDENDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLMLMLLLLLMMLMLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLMDDDLLLLLLLLLLLLFMLLLLLLLLLLLMLLLLLLLLMMMLLLLLLLLMLLLLLLLLLLLLLLLLLEDRNRNLLLLLLLLFFMLLLLLLLLLLLLLLFLLMLLLLLLALLLLLLLLLLLLLARRFRFCDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMAAAAAAAAAAAAAAAAFFFDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLFLLLLLLDDMLLLLLLLLLLLLLLLLLFLLLLMLLLLLLLLAAADLLLLLLLLLLLLLLLLLNENLLLLFLLLLLFLLLLLLLLLLAAADLLLLFFFLLLLLLLLLLLLLRFFFFFFDLLLLLLLMMFFFLLLLLLLLLLMLLMMLLLLNRNRRRRDENNNLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLMMMMMFFRRRRRRAAADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFRDLLLLLFFLLLLFLLLLFLFRDRRRRLLLLLLLLLLLFLLFLLLLAAADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRFFFFFFFFFFFFFFFFFFNNDELLLLLLLLLLLLLLLLLLLFLLLLLLLFLLLLLLLLLRDDDDLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLAFFDDDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLFDLLLLLLFLLLLFLLLFFLLLLDMMMLLLLLLLLLLMLLMLLLLMMMMLMMRGRRIDLLLLMLLLLLLLLLLLLKLLLMLLLLLLKLLDDDDDDDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLOOLLLLLLLLISKKKKKNNNNENNNNNNNNNNNNNNNNNENNNENEENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLFFFDMLLMLLMLMLMLLMMMMLLLLMIKKKKKKRFDDDDDDMLLLLLLLLLLLLMLLLLLLLLLLLLMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMLLLLLLLMMMLLLLLLMMLLLLLLLLLLLLLMMMMMLLLLMLLMMMMMMMMMMMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMDLLLLMLLMLLLLLLLLMMLLLMLMALLLLLMLMLLLFFFAAADLLLLLLLLLLLLLLLLLLDMLLLLLLLMLLLLMLLLLLNENNNNNDDNQENNDDINMMMLLMMMMMMMMLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLMKLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDNNGFLLLLLLLLLMMLLLMFLDDLLLLLLLLMMLLLLLLLMLLMMMLLMMLLLMLLLLMMMMMMMMLMMMMMMMMMLLMMLMMLLLLLLLLLLLLMMM","n":["alphas","auto_clone","auto_clone_array","bench","circuits","curve","error","from_quarters","from_shifts","grid","groupmap","lagrange_basis_evaluations","linearization","mina_curves","mina_poseidon","o1_utils","oracles","plonk_sponge","poly_commitment","precomputed_srs","proof","prover","prover_index","snarky","turshi","variable_map","variables","verifier","verifier_index","Alphas","MustConsumeIterator","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","drop","fmt","fmt","fmt","from","from","get_alphas","get_exponents","init","init","instantiate","into","into","into_iter","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","next","register","serialize","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BenchmarkCtx","batch_verification","borrow","borrow_mut","create_proof","deref","deref_mut","drop","from","init","into","new","num_gates","srs_size","try_from","try_into","type_id","vzip","argument","berkeley_columns","constraints","domain_constant_evaluation","domains","expr","gate","lookup","macros","polynomial","polynomials","scalars","wires","witness","ARGUMENT_TYPE","Argument","ArgumentData","ArgumentEnv","ArgumentType","ArgumentWitness","CONSTRAINTS","DynArgument","Gate","Lookup","Permutation","argument_type","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","coeff","coeff_chunk","coeffs","combined_constraints","combined_constraints","constant","constants","constraint_checks","constraints","constraints","create","curr","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","endo_coefficient","eq","equivalent","fmt","from","from","from","from","get_hash","hash","index","init","init","init","init","into","into","into","into","mds","next","serialize","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","witness","witness","witness_curr","witness_curr_chunk","witness_next","witness_next_chunk","Coefficient","Column","Index","LookupAggreg","LookupKindIndex","LookupRuntimeSelector","LookupRuntimeTable","LookupSorted","LookupTable","Permutation","Witness","Z","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","deserialize","domain","drop","eq","equivalent","fmt","from","get_hash","hash","init","into","latex","partial_cmp","serialize","text","to_owned","try_from","try_into","type_id","vzip","Builder","ColumnEvaluations","ConstraintSystem","Custom","DisconnectedWires","EvaluatedColumnCoefficients","FeatureFlags","GateError","IncorrectPublic","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","coefficients","coefficients8","complete_add_selector4","create","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","disable_gates_checks","disable_gates_checks","domain","drop","drop","drop","drop","drop","drop","emul_selector8","endo","endomul_scalar_selector8","evaluate","feature_flags","fmt","fmt","fmt","fmt","fmt","foreign_field_add","foreign_field_add_selector8","foreign_field_mul","foreign_field_mul_selector8","from","from","from","from","from","from","gates","generic_selector","generic_selector4","init","init","init","init","init","init","into","into","into","into","into","into","lookup","lookup_constraint_system","lookup_features","max_poly_size","mul_selector8","perm_scalars","permutation_coefficients","permutation_coefficients8","poseidon_selector","poseidon_selector8","precomputations","prev_challenges","prev_challenges","public","public","range_check0","range_check0_selector8","range_check1","range_check1_selector8","rot","rot_selector8","runtime","selector_polynomial","serialize","serialize","serialize","serialize","set_precomputations","shared_precomputations","shift","sid","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","xor","xor_selector8","zk_rows","zk_rows_strict_lower_bound","err","row","DomainConstantEvaluations","borrow","borrow_mut","clone","clone_into","constant_1_d4","constant_1_d8","create","deref","deref_mut","deserialize","drop","fmt","from","init","into","permutation_vanishing_polynomial_l","permutation_vanishing_polynomial_m","poly_x_d1","serialize","to_owned","try_from","try_into","type_id","vanishes_on_zero_knowledge_and_previous_rows","vzip","EvaluationDomains","borrow","borrow_mut","clone","clone_into","create","d1","d2","d4","d8","deref","deref_mut","deserialize","drop","fmt","from","init","into","serialize","to_owned","try_from","try_into","type_id","vzip","Add","Add","Add","Alpha","Alpha","Beta","Beta","BinOp","BinOp","Cache","Cache","Cache","CacheId","Cell","Cell","Cell","Column","Column","ColumnEnvironment","ColumnEvaluations","Constant","Constant","ConstantExpr","Constants","D1","D2","D4","D8","Domain","Double","Double","Dup","E","EmptyStack","EndoCoefficient","EndoCoefficient","Environment","Expr","ExprError","FailedLinearization","FeatureFlag","ForeignFieldAdd","ForeignFieldMul","Gamma","Gamma","GenericColumn","IfFeature","IfFeature","JointCombiner","JointCombiner","Linearization","Literal","Literal","Load","LookupEnvironment","LookupPattern","LookupShouldNotBeUsed","LookupTables","LookupsPerRow","Mds","Mds","MissingEvaluation","MissingIndexEvaluation","MissingRuntime","Mul","Mul","Mul","Op2","PolishToken","Pow","Pow","Pow","Pow","RangeCheck0","RangeCheck1","Rot","RowOffset","RuntimeLookupTables","SkipIf","SkipIfNot","Square","Square","Store","Sub","Sub","Sub","TableWidth","UnnormalizedLagrangeBasis","UnnormalizedLagrangeBasis","UnnormalizedLagrangeBasis","VanishesOnZeroKnowledgeAndPreviousRows","VanishesOnZeroKnowledgeAndPreviousRows","VanishesOnZeroKnowledgeAndPreviousRows","Variable","Xor","add","add","add_assign","aggreg","alpha","apply_feature_flags","auto_clone","auto_clone_array","beta","beta","boolean","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","cache","cell","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","coeff","coeff","coefficient","col","combine_constraints","constant","constant","constant","constant_term","constants","constraints","crumb","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","domain","domain","double","double","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","endo_coefficient","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","evaluate","evaluate","evaluate","evaluate","evaluate_","evaluate_constants","evaluate_constants","evaluations","evaluations","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_u64","gamma","get_column","get_column","get_constants","get_constants","get_domain","get_domain","get_hash","get_hash","hash","hash","index","index","index_terms","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_one","is_one","is_zero","is_zero","joint_combiner","l0_1","l0_1","l0_1","l0_1","latex","latex_str","linearize","literal","literal","lookup","map","mds","mul","mul","mul","mul_assign","neg","neg","ocaml","ocaml_str","offset","one","one","partial_cmp","partial_cmp","pow","pow","pow","pows","prologue","row","runtime_selector","runtime_table","selectors","serialize","serialize","serialize","serialize","serialize","sorted","square","square","sub","sub","table","text","text_str","to_i64","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_polish","to_polynomial","to_polynomial","to_string","to_string","to_u64","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_pow","two_to_2limb","two_to_3limb","two_to_limb","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vanishes_on_zero_knowledge_and_previous_rows","vanishes_on_zero_knowledge_and_previous_rows","vanishes_on_zero_knowledge_and_previous_rows","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","witness","witness","witness","witness_curr","witness_next","z","zero","zero","zk_rows","zk_rows","col","row","col","row","ExprOps","boolean","boolean","cache","coeff","compact_limb","constant","crumb","crumb","double","literal","pow","square","two_pow","two_to_2limb","two_to_3limb","two_to_limb","witness","E","FeatureFlag","coeff","constant","index","witness","witness_curr","witness_next","CairoClaim","CairoFlags","CairoInstruction","CairoTransition","Circuit","CircuitGate","CircuitGateError","CircuitGateResult","CompleteAdd","Connect","Constraint","CopyConstraint","Curr","CurrOrNext","EndoMul","EndoMulScalar","Err","FailedToGetWitnessForRow","ForeignFieldAdd","ForeignFieldMul","GateType","Generic","InvalidConstraint","InvalidLookupConstraint","KeccakRound","KeccakSponge","Lookup","Next","Ok","Poseidon","RangeCheck0","RangeCheck1","Rot64","VarBaseMul","WireColumn","Xor16","Zero","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","coeffs","connect_64bit","connect_cell_pair","connect_ffadd_range_checks","create_cairo_claim","create_cairo_flags","create_cairo_gadget","create_cairo_instruction","create_cairo_transition","create_chain_ffadd","create_compact_multi_range_check","create_endomul","create_foreign_field_mul","create_generic","create_generic_gadget","create_multi_range_check","create_poseidon","create_poseidon_gadget","create_range_check","create_rot","create_rot64","create_single_ffadd","create_vbmul","create_xor_gadget","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","endomul","eq","eq","eq","equivalent","equivalent","equivalent","extend_and","extend_chain_ffadd","extend_compact_multi_range_check","extend_foreign_field_mul","extend_generic","extend_high_bounds","extend_keccak","extend_multi_range_check","extend_not_gadget_checked_length","extend_not_gadget_unchecked_length","extend_range_check","extend_rot","extend_single_ffadd","extend_xor_gadget","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_i64","from_u64","gates","generate_asm","get_hash","get_hash","hash","hash","init","init","init","init","init","into","into","into","into","into","lookup_kinds","new","new","partial_cmp","partial_cmp","ps","public_input_size","rc","serialize","serialize","serialize","serialize","shift","to_i64","to_owned","to_owned","to_owned","to_owned","to_string","to_u64","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","vbmul","verify","verify_cairo_gate","verify_complete_add","verify_endomul","verify_endomul_scalar","verify_generic","verify_poseidon","verify_vbmul","verify_witness","vzip","vzip","vzip","vzip","vzip","wires","write","zero","dst","src","typ","constraints","index","lookups","runtime_tables","tables","CONSTRAINTS","LookupConfiguration","aggregation","borrow","borrow_mut","clone","clone_into","constraints","deref","deref_mut","deserialize","drop","dummy_lookup","fmt","from","init","into","lookup_info","new","serialize","sorted","to_owned","try_from","try_into","type_id","verify","vzip","zk_patch","InconsistentTableLength","LookupConstraintSystem","LookupError","LookupSelectors","LookupTableTooLong","TableIDZeroMustHaveZeroEntry","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","configuration","create","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","ffmul","fmt","fmt","fmt","fmt","from","from","from","index","index_mut","init","init","init","into","into","into","lookup","lookup_selectors","lookup_table","lookup_table8","map","range_check","runtime_selector","runtime_table_offset","runtime_tables","serialize","serialize","table_ids","table_ids8","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","xor","length","maximum_allowed","Constant","ForeignFieldMul","JointLookup","JointLookupSpec","JointLookupValue","LocalPosition","Lookup","LookupFeatures","LookupInfo","LookupPattern","LookupPatternIter","LookupPatterns","LookupTableID","RangeCheck","SingleLookup","WitnessColumn","Xor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_row","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","column","create","create_from_gates","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_as","drop","drop","drop","drop","drop","drop","drop","drop","drop","entry","entry","entry","eq","eq","eq","equivalent","equivalent","equivalent","evaluate","evaluate","evaluate","evaluate","features","fmt","fmt","fmt","fmt","fmt","fmt","fmt","foreign_field_mul","from","from","from","from","from","from","from","from","from","from_gate","from_gates","from_gates","get_hash","hash","index","index_mut","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into_iter","into_iter","iter","joint_lookup_used","joint_lookups_used","len","lookup","lookups","max_joint_size","max_joint_size","max_lookups_per_row","max_per_row","next","next_back","nth","par_bridge","partial_cmp","patterns","range_check","reduce","row","selector_polynomials_and_tables","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize_as","size_hint","table","table_id","table_id","table_id","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uses_runtime_tables","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","xor","RuntimeTable","RuntimeTableCfg","RuntimeTableSpec","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","constraints","data","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","first_column","fmt","fmt","fmt","from","from","from","from","id","id","id","id","init","init","init","into","into","into","is_empty","len","len","serialize","serialize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","GateLookupTable","LookupTable","RANGE_CHECK_TABLE_ID","RangeCheck","XOR_TABLE_ID","Xor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","combine_table","combine_table_entry","data","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","equivalent","fmt","fmt","from","from","get_hash","get_table","has_zero_entry","hash","id","init","init","into","into","is_empty","len","range_check","serialize","table_size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","width","xor","RANGE_CHECK_UPPERBOUND","TABLE_SIZE","range_check_table","TABLE_SIZE","xor_table","COLUMNS","LookupEvals","LookupPolys","LookupShifts","WitnessEvals","WitnessOverDomains","WitnessShifts","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","d4","d8","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","h1","h1","h2","h2","init","init","init","init","init","init","into","into","into","into","into","into","l","l","lw","lw","next","next","this","this","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","w","z","and","complete_add","endomul_scalar","endosclmul","foreign_field_add","foreign_field_mul","generic","keccak","not","permutation","poseidon","range_check","rot","turshi","varbasemul","xor","create_and_witness","extend_and_witness","lookup_table","CompleteAdd","argument_type","borrow","borrow_mut","combined_constraints","constraint_checks","constraints","default","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","EndomulScalar","argument_type","borrow","borrow_mut","combined_constraints","constraint_checks","constraints","default","deref","deref_mut","drop","from","gen_witness","init","into","try_from","try_into","type_id","vzip","EndoMulResult","EndosclMul","acc","argument_type","borrow","borrow","borrow_mut","borrow_mut","combined_constraints","constraint_checks","constraints","default","deref","deref","deref_mut","deref_mut","drop","drop","from","from","gen_witness","init","init","into","into","n","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","circuitgates","gadget","witness","ForeignFieldAdd","argument_type","borrow","borrow_mut","combined_constraints","constraint_checks","constraints","default","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","Add","FFOps","Sub","borrow","borrow_mut","clone","clone_into","create_chain","deref","deref_mut","drop","eq","equivalent","extend_witness_bound_addition","fmt","from","init","into","sign","to_owned","try_from","try_into","type_id","vzip","circuitgates","gadget","witness","ForeignFieldMul","argument_type","borrow","borrow_mut","combined_constraints","compose_carry","compute_intermediate_products","compute_native_modulus_values","constraint_checks","constraints","default","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","GATE_COUNT","circuit_gate_constraint_count","circuit_gate_constraints","circuit_gate_selector_index","circuit_gates","combined_constraints","lookup_table","ExternalChecks","add_bound_check","add_compact_multi_range_check","add_high_bound_computation","add_limb_check","add_multi_range_check","borrow","borrow_mut","bounds","compact_multi_ranges","compute_bound","compute_high_bound","create","default","deref","deref_mut","drop","extend_witness_bound_addition","extend_witness_compact_multi_range_checks","extend_witness_high_bounds_computation","extend_witness_limb_checks","extend_witness_multi_range_checks","from","high_bounds","init","into","limb_ranges","multi_ranges","try_from","try_into","type_id","vzip","Add","CONSTRAINTS","Const","DOUBLE_GENERIC_COEFFS","DOUBLE_GENERIC_REGISTERS","GENERIC_COEFFS","GENERIC_REGISTERS","Generic","GenericGateSpec","Mul","Plus","Pub","argument_type","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","combined_constraints","constraint_checks","constraints","default","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","testing","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","left_coeff","mul_coeff","output_coeff","output_coeff","right_coeff","create_circuit","fill_in_witness","CAPACITY_IN_BYTES","DIM","KECCAK_COLS","QUARTERS","RATE_IN_BYTES","ROUNDS","circuitgates","gadget","witness","KeccakRound","KeccakSponge","argument_type","argument_type","borrow","borrow","borrow_mut","borrow_mut","combined_constraints","combined_constraints","constraint_checks","constraint_checks","constraints","constraints","default","default","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","extend_keccak_witness","extend_not_witness_checked_length","extend_not_witness_unchecked_length","CONSTRAINTS","Shifts","borrow","borrow_mut","deref","deref_mut","drop","eval_permutation_vanishing_polynomial","eval_vanishes_on_last_n_rows","from","init","into","new","permutation_vanishing_polynomial","shifts","try_from","try_into","type_id","vanishes_on_last_n_rows","vzip","zk_w","POS_ROWS_PER_HASH","Poseidon","ROUNDS_PER_HASH","ROUNDS_PER_ROW","SPONGE_WIDTH","STATE_ORDER","argument_type","borrow","borrow_mut","combined_constraints","constraint_checks","constraints","default","deref","deref_mut","drop","from","generate_witness","init","into","round_to_cols","try_from","try_into","type_id","vzip","circuitgates","gadget","witness","RangeCheck0","RangeCheck1","argument_type","argument_type","borrow","borrow","borrow_mut","borrow_mut","combined_constraints","combined_constraints","constraint_checks","constraint_checks","constraints","constraints","default","default","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","GATE_COUNT","circuit_gate_constraint_count","circuit_gate_constraints","circuit_gates","combined_constraints","lookup_table","create","create_multi","create_multi_compact","create_multi_compact_limbs","create_multi_limbs","extend","extend_multi","extend_multi_compact","extend_multi_compact_limbs","extend_multi_from_fe","extend_multi_limbs","extend_single","range_check_0_row","Left","Right","Rot64","RotMode","argument_type","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","combined_constraints","constraint_checks","constraints","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","equivalent","extend_rot","fmt","from","from","init","init","into","into","lookup_table","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CIRCUIT_GATE_COUNT","Claim","Flags","Instruction","Transition","argument_type","argument_type","argument_type","argument_type","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_gate_combined_constraints","combined_constraints","combined_constraints","combined_constraints","combined_constraints","constraint_checks","constraint_checks","constraint_checks","constraint_checks","constraints","constraints","constraints","constraints","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","from","from","from","from","init","init","init","init","into","into","into","into","testing","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","witness","ensure_cairo_gate","cairo_witness","Layout","VarbaseMul","VarbaseMulResult","acc","argument_type","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","combined_constraints","constraint_checks","constraints","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","init","init","init","into","into","into","n","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","witness","Xor16","argument_type","borrow","borrow_mut","combined_constraints","constraint_checks","constraints","create_xor_witness","default","deref","deref_mut","drop","extend_xor_witness","from","init","into","lookup_table","num_xors","try_from","try_into","type_id","vzip","RandomOracles","alpha","alpha_chal","beta","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","fmt","from","gamma","init","into","joint_combiner","to_owned","try_from","try_into","type_id","u","u_chal","v","v_chal","vzip","zeta","zeta_chal","COLUMNS","GateWires","PERMUTS","WIRES","Wirable","Wire","borrow","borrow_mut","clone","clone_into","col","default","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","for_row","from","init","into","new","new","new","read","row","serialize","to_owned","try_from","try_into","type_id","vzip","wire","wire","write","ConstantCell","CopyBitsCell","CopyCell","CopyShiftCell","IndexCell","VariableBitsCell","VariableCell","Variables","WitnessCell","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create","create","create","create","create","create","create","create","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","index","index_mut","init","init","init","init","init","init","init","init","init","init_cell","init_row","insert","into","into","into","into","into","into","into","into","length","length","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","value","value","value","value","value","variable_map","variables","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","KimchiCurve","NAME","endos","other_curve_endo","other_curve_prime_subgroup_generator","other_curve_sponge_params","sponge_params","ConstraintSystem","DifferentSRS","DomainConstructionFailed","DomainCreation","DomainCreationError","DomainSizeFailed","IncorrectCommitmentLength","IncorrectEvaluationsLength","IncorrectPrevChallengesLength","IncorrectPubicInputLength","IncorrectRuntimeProof","LookupCommitmentMissing","LookupEvalsMissing","MissingCommitment","MissingEvaluation","MissingPublicInputEvaluation","NoRoomForZkInWitness","NotZeroKnowledge","OpenProof","Permutation","ProofInconsistentLookup","Prover","ProverError","RuntimeTablesInconsistent","SRSHasBeenSet","SRSTooSmall","SetupError","ValueNotInTable","VerifierIndexError","VerifyError","WitnessCsInconsistent","WrongBlinders","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","LagrangeBasisEvaluations","borrow","borrow_mut","deref","deref_mut","drop","evaluate","evaluate_boolean","from","init","into","new","try_from","try_into","type_id","vzip","constraints_expr","expr_linearization","linearization_columns","OraclesResult","all_alphas","borrow","borrow_mut","combined_inner_product","deref","deref_mut","digest","drop","fq_sponge","from","ft_eval0","init","into","oracles","polys","powers_of_eval_points_for_chunks","public_evals","try_from","try_into","type_id","vzip","zeta1","FrSponge","absorb","absorb_evaluations","absorb_multiple","challenge","digest","new","SERIALIZED_SRS_SIZE","get_srs","LookupCommitments","PointEvaluations","ProofEvaluations","ProverCommitments","ProverProof","RecursionChallenge","aggreg","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chals","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coefficients","combine","comm","commitments","complete_add_selector","create","create_recursive","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","dummy_with_witness_evaluations","emul_selector","endomul_scalar_selector","evals","evals","evaluate","fmt","fmt","fmt","fmt","fmt","fmt","foreign_field_add_selector","foreign_field_mul_lookup_selector","foreign_field_mul_selector","from","from","from","from","from","from","ft_eval1","generic_selector","get_column","init","init","init","init","init","init","into","into","into","into","into","into","lookup","lookup_aggregation","lookup_gate_lookup_selector","lookup_sorted","lookup_table","map","map","map_ref","map_ref","mul_selector","new","oracles","poseidon_selector","prev_challenges","proof","public","range_check0_selector","range_check1_selector","range_check_lookup_selector","rot_selector","runtime","runtime_lookup_table","runtime_lookup_table_selector","s","serialize","serialize","serialize","serialize","serialize","serialize","sorted","t_comm","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","w","w_comm","xor_lookup_selector","xor_selector","z","z_comm","zeta","zeta_omega","ProverIndex","borrow","borrow_mut","clone","clone_into","column_evaluations","compute_verifier_index_digest","create","cs","deref","deref_mut","deserialize","drop","fmt","from","init","into","linearization","max_poly_size","perm_aggreg","perm_lnrz","perm_quot","powers_of_alpha","serialize","srs","testing","to_owned","try_from","try_into","type_id","verifier_index","verifier_index","verifier_index_digest","verifier_index_digest","verify","verify_generic","vzip","new_index_for_test","new_index_for_test_with_lookups","new_index_for_test_with_lookups_and_custom_srs","asm","constants","constraint_system","OrderedHashSet","borrow","borrow_mut","default","deref","deref_mut","drop","from","init","insert","into","is_empty","iter","len","pos","try_from","try_into","type_id","vzip","Constants","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","endo","from","init","into","new","poseidon","to_owned","try_from","try_into","type_id","vzip","Basic","BasicSnarkyConstraint","Boolean","EcAddComplete","EcEndoscalar","EcEndoscale","EcScale","EndoscaleRound","EndoscaleScalarRound","Equal","Field","KimchiConstraint","Poseidon","R1CS","ScaleRound","SnarkyConstraintSystem","SnarkyCvar","Square","a0","a8","accs","add_basic_snarky_constraint","add_constraint","b0","b1","b2","b3","b4","b8","base","bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonicalize","compute_witness","create","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","finalize","finalize_and_get_gates","from","from","from","from","from","from","get_auxiliary_input_size","get_primary_input_size","init","init","init","init","init","init","into","into","into","into","into","into","n0","n8","n_acc","n_next","n_prev","s1","s3","set_auxiliary_input_size","set_public_input_size","ss","to_constant_and_terms","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","x0","x1","x2","x3","x4","x5","x6","x7","xp","xr","xt","yp","yr","yt","c","inf","inf_z","l","m","n_acc","o","p1","p2","p3","r","same_x","slope","state","state","state","state","x21_inv","xs","ys","Context","Err","Ok","Result","batch_verify","borrow","borrow_mut","deref","deref_mut","drop","from","get_column","init","into","proof","public_input","try_from","try_into","type_id","verifier_index","verify","vzip","LookupVerifierIndex","VerifierIndex","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","coefficients_comm","complete_add_comm","deref","deref","deref_mut","deref_mut","deserialize","deserialize","digest","domain","drop","drop","emul_comm","endo","endomul_scalar_comm","fmt","fmt","foreign_field_add_comm","foreign_field_mul_comm","from","from","from_file","generic_comm","init","init","into","into","joint_lookup_used","linearization","lookup_index","lookup_info","lookup_selectors","lookup_table","max_poly_size","mul_comm","permutation_vanishing_polynomial_m","permutation_vanishing_polynomial_m","powers_of_alpha","prev_challenges","psm_comm","public","range_check0_comm","range_check1_comm","rot_comm","runtime_tables_selector","serialize","serialize","shift","sigma_comm","srs","srs","table_ids","to_file","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","w","w","xor_comm","zk_rows"],"q":[[0,"kimchi"],[29,"kimchi::alphas"],[85,"kimchi::bench"],[103,"kimchi::circuits"],[117,"kimchi::circuits::argument"],[210,"kimchi::circuits::berkeley_columns"],[249,"kimchi::circuits::constraints"],[406,"kimchi::circuits::constraints::GateError"],[408,"kimchi::circuits::domain_constant_evaluation"],[434,"kimchi::circuits::domains"],[458,"kimchi::circuits::expr"],[936,"kimchi::circuits::expr::ConstantExpr"],[938,"kimchi::circuits::expr::PolishToken"],[940,"kimchi::circuits::expr::constraints"],[958,"kimchi::circuits::expr::prologue"],[966,"kimchi::circuits::gate"],[1171,"kimchi::circuits::gate::CircuitGateError"],[1174,"kimchi::circuits::lookup"],[1179,"kimchi::circuits::lookup::constraints"],[1207,"kimchi::circuits::lookup::index"],[1283,"kimchi::circuits::lookup::index::LookupError"],[1285,"kimchi::circuits::lookup::lookups"],[1521,"kimchi::circuits::lookup::runtime_tables"],[1587,"kimchi::circuits::lookup::tables"],[1643,"kimchi::circuits::lookup::tables::range_check"],[1646,"kimchi::circuits::lookup::tables::xor"],[1648,"kimchi::circuits::polynomial"],[1761,"kimchi::circuits::polynomials"],[1777,"kimchi::circuits::polynomials::and"],[1780,"kimchi::circuits::polynomials::complete_add"],[1798,"kimchi::circuits::polynomials::endomul_scalar"],[1817,"kimchi::circuits::polynomials::endosclmul"],[1851,"kimchi::circuits::polynomials::foreign_field_add"],[1854,"kimchi::circuits::polynomials::foreign_field_add::circuitgates"],[1872,"kimchi::circuits::polynomials::foreign_field_add::witness"],[1896,"kimchi::circuits::polynomials::foreign_field_mul"],[1899,"kimchi::circuits::polynomials::foreign_field_mul::circuitgates"],[1920,"kimchi::circuits::polynomials::foreign_field_mul::gadget"],[1927,"kimchi::circuits::polynomials::foreign_field_mul::witness"],[1959,"kimchi::circuits::polynomials::generic"],[2004,"kimchi::circuits::polynomials::generic::GenericGateSpec"],[2009,"kimchi::circuits::polynomials::generic::testing"],[2011,"kimchi::circuits::polynomials::keccak"],[2020,"kimchi::circuits::polynomials::keccak::circuitgates"],[2056,"kimchi::circuits::polynomials::keccak::witness"],[2057,"kimchi::circuits::polynomials::not"],[2059,"kimchi::circuits::polynomials::permutation"],[2080,"kimchi::circuits::polynomials::poseidon"],[2105,"kimchi::circuits::polynomials::range_check"],[2108,"kimchi::circuits::polynomials::range_check::circuitgates"],[2144,"kimchi::circuits::polynomials::range_check::gadget"],[2150,"kimchi::circuits::polynomials::range_check::witness"],[2163,"kimchi::circuits::polynomials::rot"],[2204,"kimchi::circuits::polynomials::turshi"],[2276,"kimchi::circuits::polynomials::turshi::testing"],[2277,"kimchi::circuits::polynomials::turshi::witness"],[2278,"kimchi::circuits::polynomials::varbasemul"],[2325,"kimchi::circuits::polynomials::xor"],[2347,"kimchi::circuits::scalars"],[2376,"kimchi::circuits::wires"],[2413,"kimchi::circuits::witness"],[2544,"kimchi::curve"],[2551,"kimchi::error"],[2673,"kimchi::lagrange_basis_evaluations"],[2689,"kimchi::linearization"],[2692,"kimchi::oracles"],[2715,"kimchi::plonk_sponge"],[2722,"kimchi::precomputed_srs"],[2724,"kimchi::proof"],[2894,"kimchi::prover_index"],[2931,"kimchi::prover_index::testing"],[2934,"kimchi::snarky"],[2937,"kimchi::snarky::asm"],[2956,"kimchi::snarky::constants"],[2976,"kimchi::snarky::constraint_system"],[3111,"kimchi::snarky::constraint_system::KimchiConstraint"],[3131,"kimchi::verifier"],[3153,"kimchi::verifier_index"],[3230,"core::clone"],[3231,"core::default"],[3232,"core::result"],[3233,"serde::de"],[3234,"serde::de"],[3235,"core::fmt"],[3236,"core::fmt"],[3237,"core::iter::adapters::skip"],[3238,"core::iter::adapters::take"],[3239,"core::iter::adapters::cloned"],[3240,"ark_ff::fields"],[3241,"core::ops::range"],[3242,"core::option"],[3243,"serde::ser"],[3244,"serde::ser"],[3245,"core::any"],[3246,"mina_curves::pasta::curves::vesta"],[3247,"poly_commitment::evaluation_proof"],[3248,"mina_curves::pasta::fields::fp"],[3249,"alloc::vec"],[3250,"core::hash"],[3251,"core::marker"],[3252,"core::hash"],[3253,"ark_ff::fields"],[3254,"alloc::sync"],[3255,"ark_poly::domain::radix2"],[3256,"ark_poly::evaluations::univariate"],[3257,"ark_ff::fields"],[3258,"num_traits::identities"],[3259,"core::cmp"],[3260,"core::ops::function"],[3261,"core::cmp"],[3262,"poly_commitment"],[3263,"std::io::error"],[3264,"std::io"],[3265,"rand::rng"],[3266,"ark_serialize"],[3267,"ark_serialize"],[3268,"core::ops::arith"],[3269,"poly_commitment::commitment"],[3270,"poly_commitment::commitment"],[3271,"alloc::alloc"],[3272,"mina_poseidon::poseidon"],[3273,"o1_utils::foreign_field"],[3274,"alloc::boxed"],[3275,"turshi::runner"],[3276,"std::io"],[3277,"mina_poseidon::sponge"],[3278,"poly_commitment::srs"],[3279,"ark_ec"],[3280,"mina_poseidon"],[3281,"rand_core"],[3282,"rand_core"]],"d":["This module implements an abstraction to keep track of the …","Auto clone macro - Helps make constraints more readable by …","","","","This module contains a useful trait for recursion: …","This module implements the <code>ProverError</code> type.","","","","","","This module implements the linearization.","","","","This type and logic only exists for the OCaml side. As we …","","","To prover and verify proofs you need a Structured …","This module implements the data structures of a proof.","This module implements prover’s zk-proof primitive.","This module implements the prover index as <code>ProverIndex</code>.","","","Macro to simplify creation of layout map","Macro to simplify mapping of layout variable","This module implements zk-proof batch verifier …","This module implements the verifier index as <code>VerifierIndex</code>.","This type can be used to create a mapping between powers …","Wrapper around an iterator that warns you if not consumed …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","This function allows us to retrieve the powers of alpha, …","Returns a range of exponents, for a given ArgumentType, …","","","Instantiates the ranges with an actual field element <code>alpha</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Registers a new ArgumentType, associating it with a number …","","","","","","","","","","","","","","","","Produces a proof","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","This will create a context that allows for benchmarks of …","","","","","","","An argument is simply a number of constraints, which we …","","This module implements Plonk circuit constraint primitive.","This contains the DomainConstantEvaluations which is used …","","","This module implements Plonk constraint gate primitive.","This module implement the lookup argument. See …","","This module implements Plonk prover polynomials primitive.","","This module implements Plonk prover polynomial evaluations …","This module implements Plonk circuit gate wires primitive.","","The type of constraints that this will produce. This is …","The interface for a minimal argument implementation.","Argument environment data for constraints of field elements","The argument environment is used to specify how the …","A constraint type represents a polynomial that will be …","Witness data for a argument","The number of constraints created by the argument.","","Gates in the PLONK constraint system. As gates are …","The lookup argument","The permutation argument","","","","","","","","","","","","Coefficient value at index idx","Chunk of consecutive coefficients in an interval [from, to)","Gate coefficients","","Returns constraints safely combined via the passed …","Constant value (see ConstantExpr for supported constants)","Constants","Constraints for this argument","","Returns the set of constraints required to prove this …","Initialize the environment for creating constraints of …","Witness for current row","Initialize the environment for creating Expr constraints …","","","","","","","","","","","","","","Helper to access endomorphism coefficient constant","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Helper to access maximum distance separable matrix …","Witness for next row","","","","","","","","","","","","","","","","","","","Witness cell (row, col)","Witness rows","Witness cell on current row","Witness cells in current row in an interval [from, to)","Witness cell on next row","Witness cells in next row in an interval [from, to)","","A type representing one of the polynomials involved in the …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","The polynomials representing columns, in evaluation form. …","","A specific gate did not verify correctly","Some connected wires have different values","The polynomials representing evaluated columns, in …","Flags for optional features in the constraint system","Represents an error found when verifying a witness with a …","A public gate was incorrectly connected","","","","","","","","","","","","","Build the ConstraintSystem from a Builder.","","","","","","","","","gate coefficients","coefficients over domain d8","EC point addition selector over domain d4","Initializes the <code>ConstraintSystem&lt;F&gt;</code> on input <code>gates</code> and …","","","","","","","","","","","","","","","","","Disable gates checks (for testing; only enables with …","Disable gates checks (for testing; only enables with …","evaluation domains","","","","","","","endoscalar multiplication selector over domain d8","coefficient for the group endomorphism","EC point addition selector over domain d8","evaluate witness polynomials over domains","flags for optional features","","","","","","Foreign field addition gate","Foreign field addition gate selector over domain d8","Foreign field multiplication gate","Foreign field multiplication gate selector over domain d8","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","circuit gates","generic gate selector","generic selector over domain d4","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set up the lookup tables. If not invoked, it is <code>vec![]</code> by …","lookup constraint system","Lookup features","","scalar multiplication selector over domain d8","","permutation coefficients","permutation coefficients over domain d8","poseidon gate selector","poseidon selector over domain d8","","Set up the number of previous challenges, used for …","number of previous evaluation challenges, for recursive …","Set up the number of public inputs. If not invoked, it …","number of public inputs","RangeCheck0 gate","RangeCheck0 gate selector over domain d8","RangeCheck1 gate","RangeCheck1 gate selector over domain d8","ROT gate","Rot gate selector over domain d8","Set up the runtime tables. If not invoked, it is <code>None</code> by …","Create selector polynomial for a circuit gate","","","","","","Set up the shared precomputations. If not invoked, it is …","wire coordinate shifts","SID polynomial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","XOR gate","Xor gate selector over domain d8","","","","","pre-computed polynomials that depend only on the chosen …","","","","","0-th Lagrange evaluated over domain.d4","0-th Lagrange evaluated over domain.d8","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","zero-knowledge polynomial over domain.d8","","1-st Lagrange evaluated over domain.d8","","","","","","the polynomial that vanishes on the zero-knowledge rows …","","","","","","","Creates 4 evaluation domains <code>d1</code> (of size <code>n</code>), <code>d2</code> (of size <code>2n</code>…","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","A cache","","","A key for a cached value","","","","","","","","","","An arithmetic expression over","The collection of constants required to evaluate an <code>Expr</code>.","","","","","","","","","An alias for the intended usage of the expression type in …","","","","The collection of polynomials (all in evaluation form) and …","An multi-variate polynomial over the base ring <code>C</code> with …","","","The feature flags that can be used to enable or disable …","","","","","","If the feature flag is enabled, return the first …","If the feature flag is enabled, return the first …","","","A “linearization”, which is linear combination with <code>E</code> …","","","","The polynomials specific to the lookup argument.","","","","Enabled if the number of lookups per row is at least the …","","","","","","","","","A binary operation","For efficiency of evaluation, we compile expressions to …","","","","","","","","","","Skip the given number of tokens if the feature is enabled.","Skip the given number of tokens if the feature is disabled.","","","","","","","Enabled if the table width is at least the given number","UnnormalizedLagrangeBasis(i) is (x^n - 1) / (x - omega^i)","UnnormalizedLagrangeBasis(i) is (x^n - 1) / (x - omega^i)","","","","","A type representing a variable which can appear in a …","","","","","The lookup aggregation polynomials.","The challenge alpha from the PLONK IOP.","","Auto clone macro - Helps make constraints more readable by …","","The expression <code>beta</code>.","The challenge beta from the PLONK IOP.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convenience function for constructing cell variables.","","","","","","","","","","","","","","","","","","","","","","","","","The coefficient column polynomials","The column of this variable","Combines multiple constraints <code>[c0, ..., cn]</code> into a single …","Convenience function to create a constant as Expr.","","Convenience function for constructing constant expressions.","","Constant values required","A number of useful constraints","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The domains used in the PLONK argument.","","","","","","","","","","","","","","","","","","The endomorphism coefficient","","","","","","","","","","","","","","","","","Evaluate an expression as a field element against an …","Evaluate an expression into a field element.","Evaluate an RPN expression to a field element.","Evaluate an expression as a field element against the …","Evaluate the constant expressions in this expression down …","Evaluate the constants in a linearization with …","Compute the polynomial corresponding to this expression, …","Compute the polynomial corresponding to this expression, …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","The challenge gamma from the PLONK IOP.","","","","","","","","","","","Handy function to quickly create an expression for a gate.","The index selector polynomials.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","The challenge joint_combiner which is used to combine …","Computes <code>prod_{j != n} (1 - omega^j)</code> Assure we don’t …","","","The value <code>prod_{j != 1} (1 - omega^j)</code>, used for efficiently","","Converts the expression in LaTeX","There is an optimization in PLONK called “linearization…","Convenience function for constructing expressions from …","","Lookup specific polynomials","Apply a function to all the coefficients in the …","The MDS matrix","","","","","","","","Converts the expression in OCaml code","","","","","","Exponentiate a constant expression.","","Exponentiate an expression","Compute the powers of <code>x</code>, <code>x^0, ..., x^{n - 1}</code>","You can import this module like …","The row (Curr of Next) of this variable","The evaluations of the optional runtime selector …","The evaluations of the optional runtime table.","The lookup-type selector polynomials.","","","","","","The sorted lookup table polynomials.","","","","","The evaluations of the combined lookup table polynomial.","","Converts the expression to a text string","","","","","","","","","","","","Compile an expression to an RPN expression.","Given a linearization and an environment, compute the …","Given a linearization and an environment, compute the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluate the given constant expression to a field element.","","","The polynomial that vanishes on the zero-knowledge rows …","","","","","","","","","","","","","","","","Helper function to quickly create an expression for a …","","The witness column polynomials","Same as witness but for the current row.","Same as witness but for the next row.","The permutation aggregation polynomial.","","","The number of zero-knowledge rows","","","","","","This trait defines a common arithmetic operations interface","Creates a constraint to enforce that b is either 0 or 1.","Constrain to boolean","Cache item","Coefficient","lo + mi * 2^{LIMB_BITS}","Create a constant","Crumb constraint for 2-bit value x","Constrain to crumb (i.e. two bits)","Double the value","Create a literal","Raise the value to the given power","Compute the square of this value","2^pow","2^{2 * LIMB_BITS}","2^{3 * LIMB_BITS}","2^{LIMB_BITS}","","","","","","","","","","Cairo","","","","A circuit is specified as a public input size and a list …","A single gate in a circuit.","Gate error","Gate result","Complete EC addition in Affine form","Trait to connect a pair of cells in a circuit","Invalid constraint with number","Disconnected wires","","A row accessible from a given row, corresponds to the fact …","EC variable base scalar multiplication with group …","Gate for computing the scalar corresponding to an …","Contains the error value","Failed to get witness for row","","","The different types of gates the system supports. Note …","Generic arithmetic gate","Invalid constraint","Invalid lookup","","","","","Contains the success value","Poseidon permutation gate","Range check","","","EC variable base scalar multiplication","Invalid wire column","","Zero gate","","","","","","","","","","","","","","","","","","","","","public selector polynomials that can used as handy …","Connects a generic gate cell with zeros to a given row for …","Connect the pair of cells specified by the cell1 and cell2 …","Connects the wires of the range checks in a single foreign …","This function creates a <code>CairoClaim</code> gate","This function creates a <code>CairoFlags</code> gate","Gadget generator of the whole cairo circuits from an …","This function creates a <code>CairoInstruction</code> gate","This function creates a <code>CairoTransition</code> gate","Create foreign field addition gate chain without range …","Create range check gate for constraining compact limbs. …","","Create foreign field multiplication gate Inputs the …","This allows you to create two generic gates that will fit …","This allows you to create two generic gates by passing the …","Create range check gate for constraining three 88-bit …","","…","Create single range check gate Inputs the starting row …","Create one rotation Right now it only creates a Generic …","Creates a Rot64 gadget to rotate a word It will need:","Create a single foreign field addition gate. This is used …","","Creates a XOR gadget for <code>bits</code> length Includes:","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extends an AND gadget for <code>bytes</code> length. The full operation …","Extend a chain of foreign field addition gates. It already …","Create foreign field muti-range-check gadget by extending …","Create foreign field multiplication gate by extending the …","","","Extends a Keccak circuit to hash one message Note: …","Create foreign field muti-range-check gadget by extending …","Extends a NOT gadget for <code>bits</code> length using Xor gates. It …","Extends a bitwise negation gadget with <code>n</code> NOT components of …","Create foreign field range-check gate by extending the …","Extend one rotation Right now it only creates a Generic …","Extend a single foreign field addition gate followed by a …","Extends a XOR gadget for <code>bits</code> length to a circuit Includes:","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Which lookup-patterns should be applied on which rows.","","","","","","","round constant that are relevant for this specific gate","","","","","Compute the offset corresponding to the <code>CurrOrNext</code> value.","","","","","","","","","","","","","","","","","","type of the gate","","","","","","","This function verifies the consistency of the wire …","verifies that the Cairo gate constraints are solved by the …","Check the correctness of witness values for a complete-add …","Verify the <code>EndoMul</code> gate.","Verify the <code>EndoMulscalar</code> gate.","verifies that the generic gate constraints are solved by …","Checks if a witness verifies a poseidon gate","Verify the <code>GateType::VarBaseMul</code>(TODO)","Verify the witness against the constraints","","","","","","gate wiring (for each cell, what cell it is wired to)","","this function creates “empty” circuit gate","","","","","","","Runtime tables are tables (or arrays) that can be produced …","","Number of constraints produced by the argument.","Configuration for the lookup constraint. These values are …","Computes the aggregation polynomial for maximum n lookups …","","","","","Specifies the lookup constraints as expressions.","","","","","A placeholder value that is known to appear in the lookup …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Information about the specific lookups used","","","Computes the sorted lookup tables required by the lookup …","","","","","Checks that all the lookup constraints are satisfied.","","Pad with zeroes and then add 3 random elements in the last …","","","Represents an error found when computing the lookup …","Lookup selectors","","","","","","","","","","","","","","Configuration for the lookup constraint.","Create the <code>LookupConstraintSystem</code>.","","","","","","","","","","","","","Foreign field multiplication pattern lookup selector","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Lookup pattern lookup selector","Lookup selectors: For each kind of lookup-pattern, we have …","Lookup tables","","","Range check pattern lookup selector","An optional runtime table selector. It is 0 everywhere, …","The offset of the runtime table within the concatenated …","Optional runtime tables, listed as tuples <code>(length, id)</code>.","","","Table IDs for the lookup values. This may be <code>None</code> if all …","","","","","","","","","","","","","","","","","XOR pattern lookup selector","","","Look up the value from the given fixed table ID","","A spec for checking that the given vector belongs to a …","A spec for checking that the given vector belongs to a …","A concrete value or representation of a lookup.","A position in the circuit relative to a given row.","","","Describes the desired lookup configuration.","","An iterator over the variants of Self","Flags for each of the hard-coded lookup patterns.","The table ID associated with a particular lookup","","Look up a single value in a lookup table. The value may be …","Look up the value in the table with ID given by the value …","","","","","","","","","","","","","","","","","","","","For each row in the circuit, which lookup-constraints …","","","","","","","","","","","","","","","","","","","","","Create the default lookup configuration.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluate the combined value of a joint-lookup.","Evaluate the linear combination specifying the lookup …","Evaluate the combined value of a joint-lookup.","Evaluate the combined value of a joint-lookup, resolving …","The features enabled for this lookup configuration","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the lookup pattern used by a <code>GateType</code> on a given …","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Whether joint lookups are used","Check what kind of lookups, if any, are used by this …","","","Returns the layout of the lookups used by this pattern.","Returns the maximum number of values that are used in any …","The maximum joint size of any joint lookup in a constraint …","Returns the maximum number of lookups per row that are …","The maximum length of an element of <code>kinds</code>. This can be …","","","","","","A single lookup constraint is a vector of lookup …","","Reduce linear combinations in the lookup entries to a …","","Each entry in <code>kinds</code> has a corresponding selector …","","","","","","","","","","","Returns the lookup table used by the pattern, or <code>None</code> if …","The ID for the table associated with this lookup. Positive …","The ID for the table associated with this lookup. Positive …","The ID for the table associated with this lookup. Positive …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","True if runtime lookup tables are used.","Linear combination of local-positions","","","","","","","","","","","A runtime table. Runtime tables must match the …","Use this type at setup time, to list all the runtime …","The specification of a runtime table.","","","","","","","","","","","","","Returns the constraints related to the runtime tables.","A single column.","","","","","","","","","","","","The content of the first column of the runtime table.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the ID of the runtime table.","The table ID.","The table ID.","The table id.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the runtime table is empty.","Returns the length of the runtime table.","The number of entries contained in the runtime table.","","","","","","","","","","","","","","","","","","Enumerates the different ‘fixed’ lookup tables used by …","A table of values that can be used for a lookup, along …","The range check table ID.","","The table ID associated with the XOR lookup table.","","","","","","","","","","Same as <code>combine_table_entry</code>, but for an entire table. The …","Let’s say we want to do a lookup in a “vector-valued”…","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the lookup table associated to a <code>GateLookupTable</code>.","Return true if the table has an entry containing all zeros.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the lookup table is empty, <code>false</code> otherwise.","Returns the length of the table.","Range check table","","Returns the lookup table associated to a <code>GateLookupTable</code>.","","","","","","","","","","","Returns the number of columns, i.e. the width of the table.","","The range check will be performed on 12-bit values, i.e. …","","A single-column table containing the numbers from 0 to …","","Returns the XOR lookup table","","","","","Evaluations of the wires and permutation","","","","","","","","","","","","","","","","","","","","","","","","","","","evaluations over domain d4","evaluations over domain d8","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","lookup multiset","lookup multiset","lookup multiset","lookup multiset","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","aggregation","aggregation","lookup witness","lookup witness","next wire evaluations","next wire evaluations","this wire evaluations","this wire evaluations","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","wire evaluations","permutation evaluations","This module includes the AND gadget implementation and the …","This module implements a complete EC addition gate.","Implementation of the <code>EndomulScalar</code> gate for the endomul …","This module implements short Weierstrass curve …","Foreign Field Addition module","Foreign field multiplication module","This module implements the double generic gate.","Keccak hash module","This module includes the definition of the NOT gadget and …","This module implements permutation constraint polynomials.","This module implements the Poseidon constraint polynomials.","Range check gate module","","This implements the constraints of the Cairo gates","This module implements short Weierstrass curve variable …","This module includes the definition of the XOR gadget for …","Create a And for inputs as field elements starting at row 0","Extends an AND witness to the whole witness Input: first …","Get the AND lookup table","Implementation of the <code>CompleteAdd</code> gate It uses the …","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Generate the <code>witness</code>","","Calls <code>U::from(self)</code>.","","","","","The result of performing an endoscaling: the accumulated …","Implementation of the <code>EndosclMul</code> gate.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Generates the <code>witness_curr</code> values for a series of …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Foreign field addition gate.","This module obtains the gates of a foreign field addition …","This module computes the witness of a foreign field …","Implementation of the foreign field addition gate","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Addition","All foreign field operations allowed","Subtraction","","","","","Creates a FFAdd witness (including <code>ForeignFieldAdd</code> rows, …","","","","","","Create witness for bound computation addition gate","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the sign of the operation as a field element","","","","","","Foreign field multiplication","This module obtains the gates of a foreign field addition …","Foreign field multiplication witness computation","This gate operates on the Curr and Next rowsIt uses copy, …","","","","","Composes the 91-bit carry1 value from its parts","Compute non-zero intermediate products","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Number of gates in this gadget","Number of constraints for a given foreign field mul …","Get combined constraints for a given foreign field …","","Get vector of foreign field multiplication circuit gate …","Get the combined constraints for all foreign field …","Get the foreign field multiplication lookup table","Track external check witness data","Track a bound check","Track a compact-multi-range-check","Track a high bound computation","Track a limb-range-check","Track a multi-range-check","","","","","Perform integer bound addition for all limbs x’ = x + f…","Perform integer bound computation for high limb x’2 = x2 …","Create a foreign field multiplication witness Input: …","","","","","Extend the witness with external bound addition as foreign …","Extend the witness with external compact multi range_checks","Extend the witness with external high bounds additions as …","Extend the witness with external compact multi range_checks","Extend the witness with external multi range_checks","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","Add two values.","Number of constraints produced by the gate.","A constant, the constructor contains the constant itself","The double generic gate actually contains two generic …","Number of generic of registers by a double generic gate.","Number of coefficients used by a single generic gate Three …","Number of generic of registers by a single generic gate","Implementation of the <code>Generic</code> gate","The different type of computation that are possible with a …","Multiplication of two values","Sum a value to a constant","A public gate","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Optional coefficient that can be multiplied with the left …","Optional coefficient that can be multiplied with the …","Optional coefficient that can be multiplied with the …","Optional coefficient that can be multiplied with the …","Optional coefficient that can be multiplied with the right …","Create a generic circuit","Fill in a witness created via <code>create_circuit</code>","","","","","","","Keccak gadget","Keccak gadget","Keccak witness computation","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Creates a witness for the Keccak hash function Input:","Extend a NOT witness for less than 255 bits (native field) …","Extends negation witnesses from generic gate, assuming the …","Number of constraints produced by the argument.","Shifts represent the shifts required in the permutation …","","","","","","Evaluates the polynomial (x - w^{n - zk_rows}) * (x - w^{n …","Evaluates the polynomial (x - w^{n - i}) * (x - w^{n - i + …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Generates the shifts for a given domain","The polynomial (x - w^{n - zk_rows}) * (x - w^{n - zk_rows …","retrieve the shifts","","","","The polynomial (x - w^{n - i}) * (x - w^{n - i + 1}) * … …","","Returns the end of the circuit, which is used for …","Number of PLONK rows required to implement Poseidon","Implementation of the Poseidon gate Poseidon quotient poly …","Number of rounds","Number of rows","Width of the sponge","The order in a row in which we store states before and …","","","","","","","","","","","Returns the argument unchanged.","<code>generate_witness(row, params, witness_cols, input)</code> uses a …","","Calls <code>U::from(self)</code>.","Given a Poseidon round from 0 to 4 (inclusive), returns …","","","","","","Range check gate","Range check witness computation","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Number of constraints for a given range check circuit gate …","Get combined constraints for a given range check circuit …","Get vector of range check circuit gate types","Get the combined constraints for all range check circuit …","Get the range check lookup table","Create a single range check witness Input: 88-bit value v0","Create a multi range check witness from three 88-bit …","Create a multi range check witness from two limbs: v01 …","Create a multi range check witness from compact limbs","Create a multi range check witness from limbs","Extend an existing witness with a single range check …","Extend an existing witness with a multi-range-check gadget …","Extend and existing witness with a multi range check …","Extend an existing witness with a multi-range-check gadget …","Extend an existing witness with a multi-range-check gadget …","Extend an existing witness with a multi-range-check gadget …","Extend an existing witness with a single-range-check gate …","The row layout for <code>RangeCheck0</code>","","","","","","","","","","","","","","","","","","","","","","","","Extends the rot rows to the full witness Input","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the rot lookup table","","","","","","","","","","","","","","","","","","","","","","","","","","","Combines the constraints for the Cairo gates depending on …","","","","","Generates the constraints for the Cairo initial claim and …","Generates the constraints for the Cairo instruction …","Generates the constraints for the Cairo flags Accesses …","Generates the constraints for the Cairo transition …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","verifies that the Cairo gate constraints are solved by the …","Returns the witness of an execution of a Cairo program in …","","Implementation of the <code>VarbaseMul</code> gate","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Apply the <code>witness</code> value.","","","","","","","","Create a Xor for up to the native length starting at row 0 …","","","","","Extends the Xor rows to the full witness Panics if the …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Get the xor lookup table","Returns the number of XOR rows needed for inputs of usize …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Number of registers","<code>GateWires</code> document the wiring of a gate. More …","Number of registers that can be wired (participating in …","index of all registers","Since we don’t have a specific type for the wires of a …","Wire documents the other cell that is wired to this one. …","","","","","","","","","","","","","","Creates a new set of wires for a given row.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creates a new set of wires for a given row.","","Creates a new Wire.","","","","","","","","","Wire the cell at <code>col</code> to another cell (<code>to</code>).","","","Witness cell with constant value","Witness cell copied from bits of another witness cell","Witness cell copied from another witness cell","Witness cell copied from another cell and shifted","Witness cell assigned from an indexable variable See …","Witness cell assigned from bits of a variable See Variables…","Witness cell assigned from a variable See Variables for …","Layout variables mapping - these values are substituted …","Witness cell interface. By default, the witness cell is a …","","","","","","","","","","","","","","","","","Create witness cell with constant value","Create witness cell copied from bits [start, end) of the …","Create a witness cell copied from the witness cell at …","Create witness cell copied from the witness cell at …","Create witness cell assigned from a variable name a length","Create witness cell assigned from the bits [start, end) of …","Create witness cell assigned from a variable name","Create a layout variable map","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Initialize a witness based on layout and computed variables","","","","","","","","","Initialize a witness cell based on layout and computed …","Initialize a witness row based on layout and computed …","Insert a variable and corresponding value into the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Macro to simplify creation of layout map","Macro to simplify mapping of layout variable","","","","","","","","","Represents additional information that a curve needs in …","A human readable name.","Provides the coefficients for the curve endomorphism, …","Provides the coefficient for the curve endomorphism over …","Accessor for the other curve’s prime subgroup generator, …","Provides the sponge params to be used with the other curve.","Provides the sponge params to be used with this curve.","","","","","Errors that can arise when preparing the setup","","","","","","","","","","","","","","","","","","Errors that can arise when creating a proof","","","","Errors that can arise when preparing the setup","","Errors that can arise when creating a verifier index","Errors that can arise when verifying a proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The evaluations of all normalized lagrange basis …","","","","","","Given the evaluations form of a polynomial, directly …","Given the evaluations form of a polynomial, directly …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Get the expresion of constraints.","Linearize the <code>expr</code>.","Adds the polynomials that are evaluated as part of the …","The result of running the oracle protocol","the computed powers of alpha","","","Used by the OCaml side","","","the last evaluation of the Fq-Sponge in this protocol","","A sponge that acts on the base field of a curve","Returns the argument unchanged.","The evaluation f(zeta) - t(zeta) * Z_H(zeta)","","Calls <code>U::from(self)</code>.","the challenges produced in the protocol","recursion data","zeta^n and (zeta * omega)^n","public polynomial evaluations","","","","","pre-computed zeta^n","","Absorbs the field element into the sponge.","Absorbs the given evaluations into the sponge.","Absorbs a slice of field elements into the sponge.","Creates a <code>ScalarChallenge</code> by squeezing the sponge.","Consumes the sponge and returns the current digest, by …","Creates a new Fr-Sponge.","The size of the SRS that we serialize.","Obtains an SRS for a specific curve from disk. Panics if …","Commitments linked to the lookup feature","Evaluations of a polynomial at 2 points","Polynomial evaluations contained in a <code>ProverProof</code>.","All the commitments that the prover creates as part of the …","The proof that the prover creates from a ProverIndex and a …","A struct to store the challenges inside a <code>ProverProof</code>","Commitment to the lookup aggregation polynomial","","","","","","","","","","","","","Vector of scalar field elements","","","","","","","","","","","","","coefficient polynomials","","Polynomial commitment","All the polynomial commitments required in the proof","evaluation of the elliptic curve addition selector …","This function constructs prover’s zk-proof from the …","This function constructs prover’s recursive zk-proof …","","","","","","","","","","","","","","","","","","","","","","","","","","","evaluation of the endoscalar multiplication selector …","evaluation of the endoscalar multiplication scalar …","","Two evaluations over a number of committed polynomials","","","","","","","","evaluation of the ForeignFieldAdd selector polynomial","evaluation of the ForeignFieldMul range check pattern …","evaluation of the ForeignFieldMul selector polynomial","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Required evaluation for Maller’s optimization","evaluation of the generic selector polynomial","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Commitments related to the lookup argument","evaluation of lookup aggregation polynomial","evaluation of the Lookup range check pattern selector …","evaluation of lookup sorted polynomials","evaluation of lookup table polynomial","","","","","evaluation of the elliptic curve variable base scalar …","","This function runs the random oracle argument","evaluation of the poseidon selector polynomial","The challenges underlying the optional polynomials folded …","batched commitment opening proof","public input polynomials","evaluation of the RangeCheck0 selector polynomial","evaluation of the RangeCheck1 selector polynomial","evaluation of the RangeCheck range check pattern selector …","evaluation of the Rot selector polynomial","Optional commitment to concatenated runtime tables","evaluation of runtime lookup table polynomial","evaluation of the runtime lookup table selector polynomial","permutation polynomials (PERMUTS-1 evaluations because the …","","","","","","","Commitments to the sorted lookup table polynomial (may …","The commitment to the quotient polynomial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","witness polynomials","The commitments to the witness (execution trace)","evaluation of the Xor range check pattern selector …","evaluation of the Xor selector polynomial","permutation polynomial","The commitment to the permutation polynomial","Evaluation at the challenge point zeta.","Evaluation at <code>zeta . omega</code>, the product of the challenge …","The index used by the prover","","","","","","Retrieve or compute the digest for the corresponding …","this function compiles the index from constraints","constraints system polynomials","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","The symbolic linearization of our circuit, which can …","maximal size of polynomial section","permutation aggregation polynomial computation","permutation linearization poly contribution computation","permutation quotient poly contribution computation","The mapping between powers of alpha and constraints","","polynomial commitment keys","","","","","","Produces the <code>VerifierIndex</code> from the prover’s <code>ProverIndex</code>.","The verifier index corresponding to this prover index","Retrieve or compute the digest for the corresponding …","The verifier index digest corresponding to this prover …","This function verifies the consistency of the wire …","Function to verify the generic polynomials with a witness.","","","Create new index for lookups.","","An ASM-like language to print a human-friendly version of …","Constants used for poseidon.","","Very dumb way to write an ordered hash set.","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","A PLONK constraint (or gate) can be <code>Basic</code>, <code>Poseidon</code>, …","","","","The constraint system. ","","","","","","Applies the basic <code>SnarkyConstraint</code>. Simply, place the …","Applies the <code>KimchiConstraint(s)</code> to the <code>circuit</code>.","","","","","","","","","","","","","","","","","","","","","","Compute the witness, given the constraint system <code>sys</code> and a …","","","","","","","","","","","","","","","","","","","","Fill the <code>gate</code> values(input and output), and finalize the …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the number of auxiliary inputs. ","Returns the number of public inputs.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Non-public part of the witness. ","Sets the number of public-input. It should only be called …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains the error value","Contains the success value","The result of a proof verification.","This function verifies the batch of zk-proofs proofs: …","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","The proof to verify","The public input used in the creation of the proof","","","","The VerifierIndex associated to the proof","Verify a proof <code>ProverProof</code> using a <code>VerifierIndex</code> and a …","","","","","","","","","","","","coefficient commitment array","EC addition selector polynomial commitment","","","","","","","Compute the digest of the <code>VerifierIndex</code>, which can be used …","evaluation domain","","","endoscalar multiplication selector polynomial commitment","endoscalar coefficient","endoscalar multiplication scalar computation selector …","","","Foreign field addition gates polynomial commitments","Foreign field multiplication gates polynomial commitments","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes a <code>VerifierIndex</code> from a file, given a pointer …","coefficient commitment array","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Information about the specific lookups used","","","maximal size of polynomial section","EC variable base scalar multiplication selector polynomial …","Gets permutation_vanishing_polynomial_m from <code>VerifierIndex</code> …","zero-knowledge polynomial","The mapping between powers of alpha and constraints","number of previous evaluation challenges, for recursive …","poseidon constraint selector polynomial commitment","number of public inputs","RangeCheck0 polynomial commitments","RangeCheck1 polynomial commitments","Rot commitments","An optional selector polynomial for runtime tables","","","wire coordinate shifts","permutation commitment array","Gets srs from <code>VerifierIndex</code> lazily","polynomial commitment keys","Table IDs for the lookup values. This may be <code>None</code> if all …","Writes a <code>VerifierIndex</code> to a file, potentially appending it …","","","","","","","","","","","Gets w from <code>VerifierIndex</code> lazily","domain offset for zero-knowledge","Xor commitments","the number of randomized rows to achieve zero knowledge"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,1,9,1,1,1,1,9,1,9,1,1,9,9,1,1,9,1,9,1,1,1,9,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,1,1,1,1,9,1,9,1,9,1,9,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,0,0,0,0,0,211,0,15,15,15,212,35,91,40,15,35,91,40,15,15,15,35,35,91,212,211,35,91,211,212,211,35,40,35,35,91,40,15,35,91,40,15,15,35,91,40,15,35,15,15,15,35,91,40,15,15,15,40,35,91,40,15,35,91,40,15,35,40,15,15,35,91,40,15,35,91,40,15,35,91,40,15,35,91,40,15,35,91,35,35,35,35,49,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,0,64,64,0,0,0,64,52,57,58,59,53,64,52,57,58,59,53,64,52,57,58,59,53,57,58,59,53,58,59,59,53,52,57,58,59,53,64,52,57,58,59,53,64,57,58,59,53,52,53,53,52,57,58,59,53,64,59,53,59,53,53,57,58,59,53,64,57,59,57,59,52,57,58,59,53,64,53,58,59,52,57,58,59,53,64,52,57,58,59,53,64,52,53,57,52,59,53,58,59,58,59,53,52,53,52,53,57,59,57,59,57,59,52,0,57,58,59,53,53,52,53,53,57,58,59,53,52,57,58,59,53,64,52,57,58,59,53,64,52,57,58,59,53,64,52,57,58,59,53,64,57,59,53,0,213,213,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,39,85,88,39,88,39,88,38,77,0,38,77,0,38,77,88,95,94,0,0,38,77,0,0,51,51,51,51,0,38,77,88,0,92,39,88,0,0,0,92,0,86,86,39,88,0,38,77,39,88,0,39,88,88,0,86,92,86,86,39,88,92,92,92,39,85,88,0,0,38,39,77,88,86,86,86,0,86,88,88,38,77,88,39,85,88,86,38,77,88,38,77,88,0,86,39,77,77,214,41,77,0,0,77,41,77,41,214,97,92,83,39,84,37,85,86,87,77,88,51,89,41,214,97,92,83,39,84,37,85,86,87,77,88,51,89,37,77,77,83,39,84,85,86,87,77,88,51,89,83,39,84,85,86,87,77,88,51,89,83,84,0,77,97,83,77,0,77,77,89,97,0,77,37,89,41,214,97,92,83,39,84,37,85,86,87,77,88,51,89,41,214,97,92,83,39,84,37,85,86,87,77,88,51,89,83,86,87,88,89,93,97,77,77,41,214,97,92,83,39,84,37,85,86,87,77,88,51,89,41,83,39,84,85,86,87,77,88,51,83,84,85,86,87,88,94,77,77,88,77,77,89,77,77,92,92,83,39,84,85,86,87,77,77,88,51,89,41,214,97,92,83,39,39,84,37,85,86,87,77,77,77,88,51,89,51,51,41,95,97,95,97,95,97,83,84,83,84,0,97,89,41,214,97,92,83,39,84,37,85,86,87,77,88,51,89,41,214,97,92,83,39,84,37,85,86,87,77,88,51,89,39,77,39,77,41,0,95,97,97,83,77,77,77,77,97,89,41,39,77,77,77,39,77,83,77,87,39,77,83,84,39,77,77,0,0,83,214,214,214,83,86,87,88,89,214,77,77,39,77,214,83,77,51,83,39,84,85,86,87,77,88,51,89,77,89,89,92,77,51,41,214,97,92,83,39,84,37,85,86,87,77,88,51,89,41,214,97,92,83,39,84,37,85,86,87,77,88,51,89,77,77,77,77,41,214,97,92,83,39,84,37,85,86,87,77,88,51,89,39,95,97,97,41,214,97,92,83,39,84,37,85,86,87,77,88,51,89,0,77,97,0,0,97,39,77,41,87,215,215,216,216,0,0,36,36,36,0,36,0,36,36,36,36,36,36,36,36,36,36,0,0,0,0,0,0,0,0,71,71,71,71,0,0,0,0,71,0,101,101,48,0,71,71,112,101,71,71,0,71,101,101,71,71,71,48,112,71,71,71,71,71,101,71,71,48,71,101,60,107,48,71,101,60,107,48,71,101,60,48,71,101,60,48,71,60,217,217,217,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,71,60,48,71,101,60,107,48,71,101,60,107,48,71,60,48,71,101,60,107,60,48,71,101,48,71,101,60,60,60,60,60,60,60,60,60,60,60,60,60,60,48,71,101,101,60,48,71,101,60,107,107,71,71,107,107,48,71,48,71,48,71,101,60,107,48,71,101,60,107,71,60,107,48,71,60,107,60,48,71,60,107,48,71,48,71,101,60,101,71,48,71,101,60,107,48,71,101,60,107,60,48,71,101,60,107,60,60,60,60,60,60,60,60,60,60,48,71,101,60,107,60,60,60,218,218,218,0,0,0,0,0,0,0,0,118,118,118,118,0,118,118,118,118,118,118,118,118,118,118,118,118,0,118,118,118,118,0,118,0,123,0,0,0,123,123,121,123,121,122,123,121,122,121,122,121,122,122,122,121,123,121,122,123,121,122,121,122,123,121,122,121,123,123,121,122,123,121,122,121,121,123,121,122,123,121,122,121,122,122,122,121,121,122,122,122,121,122,122,122,121,122,123,123,121,122,123,121,122,123,121,122,123,121,122,121,219,219,129,108,0,0,0,0,108,0,0,0,0,0,0,108,0,129,108,125,126,115,127,128,129,130,108,131,125,126,115,127,128,129,130,108,131,115,125,126,115,127,128,129,130,108,131,125,126,115,127,128,129,130,108,131,108,127,115,115,125,126,125,126,115,127,128,129,130,108,131,125,126,115,127,128,129,130,108,131,125,126,115,127,128,129,130,108,132,125,126,115,127,128,129,130,108,131,124,132,130,125,126,108,125,126,108,132,128,130,130,115,125,126,115,127,129,130,108,125,125,126,115,127,128,129,130,108,131,108,125,126,108,108,125,125,125,126,115,127,128,129,130,108,131,125,126,115,127,128,129,130,108,131,125,131,108,126,125,131,125,108,108,115,108,115,131,131,131,131,108,126,125,130,127,115,125,126,115,127,128,129,130,108,132,131,108,124,132,130,125,126,115,127,128,129,130,108,131,125,126,115,127,128,129,130,108,131,125,126,115,127,128,129,130,108,131,125,126,115,127,128,129,130,108,131,126,128,125,126,115,127,128,129,130,108,131,125,0,0,0,137,70,138,137,70,138,137,70,138,137,70,138,0,138,137,70,138,137,70,138,137,70,137,70,138,70,137,70,138,137,137,70,138,70,137,70,138,137,70,138,137,70,138,70,70,137,137,70,137,70,138,137,70,138,137,70,138,137,70,138,137,70,138,0,0,0,136,0,136,136,65,136,65,136,65,136,65,0,0,65,136,65,136,65,136,136,65,136,136,136,65,136,65,136,0,65,136,65,136,65,136,65,65,65,0,136,136,136,65,136,65,136,65,136,65,136,65,65,0,0,0,0,0,0,0,0,0,0,0,0,0,143,144,63,145,146,147,143,144,63,145,146,147,143,144,63,145,146,147,143,144,63,145,146,147,63,63,143,144,63,145,146,147,143,144,63,145,146,147,143,144,63,145,146,147,143,144,63,145,146,147,145,147,145,147,143,144,63,145,146,147,143,144,63,145,146,147,145,147,145,147,144,146,144,146,143,144,63,145,146,147,143,144,63,145,146,147,143,144,63,145,146,147,143,144,63,145,146,147,143,144,63,145,146,147,143,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,0,150,150,150,150,150,150,150,150,150,150,150,0,150,150,150,150,150,150,0,0,152,151,152,151,152,151,151,151,151,151,152,151,152,151,152,151,152,151,0,152,151,152,151,152,152,151,152,151,152,151,152,151,0,0,0,0,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,103,0,103,103,103,103,103,0,103,103,103,103,103,0,103,103,103,103,103,103,103,103,103,103,0,0,0,0,154,154,154,154,0,0,0,154,154,154,154,154,154,154,154,154,154,154,154,154,0,0,0,0,0,0,0,0,155,155,155,155,155,155,155,155,155,0,0,0,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,105,0,105,0,0,0,0,0,0,105,105,105,156,156,105,156,105,105,105,156,156,156,156,156,105,156,105,156,105,156,105,156,105,156,105,0,105,156,105,156,105,156,105,156,105,220,221,220,221,220,0,0,0,0,0,0,0,0,0,0,0,0,0,157,158,157,158,157,158,157,158,157,158,157,158,157,158,157,158,157,158,157,158,157,158,157,158,157,158,157,158,157,158,157,158,157,158,0,0,0,0,0,159,159,159,159,159,0,0,159,159,159,159,0,159,159,159,159,0,159,0,0,0,0,0,0,0,160,160,160,160,160,160,160,160,160,160,160,0,160,160,0,160,160,160,160,0,0,0,0,0,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,106,0,0,168,106,168,106,168,106,106,168,168,168,168,106,168,106,168,106,168,106,106,0,106,106,168,106,168,106,168,0,106,106,168,106,168,106,168,106,168,0,0,0,0,0,222,223,224,225,222,223,224,225,222,223,224,225,0,222,223,224,225,222,223,224,225,222,223,224,225,222,223,224,225,222,223,224,225,222,223,224,225,222,223,224,225,222,223,224,225,222,223,224,225,0,222,223,224,225,222,223,224,225,222,223,224,225,222,223,224,225,0,0,0,0,0,0,171,170,226,171,170,226,171,170,170,170,170,170,226,171,170,226,171,170,226,171,170,226,171,170,226,171,170,226,171,170,171,226,171,170,226,171,170,226,171,170,226,171,170,0,0,172,172,172,172,172,172,0,172,172,172,172,0,172,172,172,0,0,172,172,172,172,0,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,0,0,0,0,0,0,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,227,102,174,174,174,174,174,174,174,174,174,227,102,174,0,0,0,0,0,0,0,0,0,176,177,178,179,180,181,182,183,176,177,178,179,180,181,182,183,176,177,178,179,180,181,182,183,176,177,178,179,180,181,182,183,176,177,178,179,180,181,182,183,176,177,178,179,180,181,182,183,176,177,178,179,180,181,182,183,183,183,0,176,177,178,179,180,181,182,183,0,0,183,176,177,178,179,180,181,182,183,180,166,176,177,178,179,180,181,182,183,176,177,178,179,180,181,182,183,176,177,178,179,180,181,182,183,166,176,177,178,179,180,181,182,0,0,176,177,178,179,180,181,182,183,0,110,110,110,110,110,110,54,184,76,54,0,76,184,184,184,184,184,184,184,184,184,184,116,116,184,116,184,116,0,116,185,184,0,116,0,0,116,116,116,184,76,54,185,116,184,76,54,185,116,184,76,54,185,116,184,76,54,185,116,184,76,54,185,116,184,76,54,185,116,184,76,54,185,116,116,184,184,76,76,54,54,185,185,116,184,76,54,185,116,184,76,54,185,116,184,76,54,185,116,184,76,54,185,116,184,76,54,185,116,184,76,54,185,116,184,76,54,185,116,184,76,54,185,116,184,76,54,185,0,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,0,0,0,0,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,0,228,228,228,228,228,228,0,0,0,0,0,0,0,0,190,66,67,190,192,31,193,66,67,190,192,31,193,193,66,67,190,192,31,193,66,67,190,192,31,193,67,67,193,31,67,31,31,66,66,67,190,192,31,193,66,67,190,192,31,193,66,67,190,192,31,193,66,67,190,192,31,193,67,67,67,193,31,67,66,67,190,192,31,193,67,67,67,66,67,190,192,31,193,31,67,67,66,67,190,192,31,193,66,67,190,192,31,193,192,67,67,67,67,66,67,66,67,67,193,31,67,31,31,67,67,67,67,67,190,67,67,67,66,67,190,192,31,193,190,192,66,67,190,192,31,193,66,67,190,192,31,193,66,67,190,192,31,193,66,67,190,192,31,193,66,67,190,192,31,193,67,192,67,67,67,192,66,66,0,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,0,109,109,109,109,109,109,109,109,109,109,109,0,0,0,0,0,0,0,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,0,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,207,0,205,207,207,207,207,0,0,205,206,0,207,205,0,0,0,205,229,229,230,204,204,229,231,231,231,231,229,230,230,230,231,229,205,207,204,230,231,229,205,207,204,0,204,204,230,231,229,205,207,204,230,231,229,205,207,204,230,231,229,205,207,204,204,204,230,231,229,205,207,204,204,204,230,231,229,205,207,204,230,231,229,205,207,204,229,229,231,230,230,231,231,204,204,230,206,230,231,229,205,207,204,230,231,229,205,207,204,230,231,229,205,207,204,230,231,229,205,207,204,229,229,229,229,229,229,229,229,231,231,231,231,231,231,232,233,233,232,232,234,232,233,233,233,232,233,233,235,236,234,237,233,234,234,0,196,196,0,0,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,0,208,0,0,209,194,209,194,209,194,209,194,194,194,209,194,209,194,209,194,194,194,209,194,194,194,194,209,194,194,194,209,194,194,194,209,194,209,194,209,194,194,209,209,209,194,194,194,194,194,194,194,194,194,194,194,209,209,194,194,194,194,194,209,194,209,194,209,194,209,194,209,194,209,194,194,194,194,194],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],2],[[-1,-2],3,[],[]],[[],[[1,[-1]]],4],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[1,[-2]]]]],7,8],[5,3],[[[9,[-1,-2]]],3,10,11],[5,3],[[[1,[-1]],12],13,[]],[[[1,[-1]],12],13,14],[[[9,[-1,-2]],12],13,[10,14],[11,14]],[-1,-1,[]],[-1,-1,[]],[[[1,[-1]],15,16],[[9,[[20,[[19,[[18,[[17,[-1]]]]]]]],-1]]],21],[[[1,[-1]],15,16],[[9,[[22,[16]],16]]],21],[[],5],[[],5],[[[1,[-1]],-1],3,21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[3,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[3,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[3,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[3,[-2,-3,-4]]],[],[],[],[]],[-1,[[3,[-2,-3]]],[],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,3,[]],[-1,[[3,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[3,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[3,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[3,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[[[9,[-1,-2]]],23,10,11],[[[1,[-1]],15,16],3,21],[[[1,[-1]],-2],6,24,25],[-1,-2,[],[]],[-1,26,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[28,[34,[[3,[[31,[29,[30,[29]]]],[33,[32]]]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[28,[[3,[[31,[29,[30,[29]]]],[33,[32]]]]]],[5,-1,[]],[5,-1,[]],[5,3],[-1,-1,[]],[[],5],[-1,-2,[],[]],[16,28],0,[28,5],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],3,[],[]],[[[35,[-1,-2]],5],-2,21,[[36,[-1]]]],[[[35,[-1,-2]],5,5],[[33,[-2]]],21,[[36,[-1]]]],0,[[-1,[1,[-2]],37],[[38,[-2]]],[],[]],[[[1,[-1]],37],[[38,[-1]]],[]],[[[35,[-1,-2]],[39,[-1]]],-2,21,[[36,[-1]]]],0,[[[35,[-1,-2]],37],[[33,[-2]]],[],[[36,[-1]]]],[[-1,37],[[33,[[38,[-2]]]]],[],[]],[37,[[33,[[38,[-1]]]]],[]],[[[40,[-1]],[33,[-1]],[41,[-1]]],[[35,[-1,-2]]],21,[[36,[-1]]]],0,[[],[[35,[-1,-2]]],[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[15]]],7],[5,3],[5,3],[5,3],[5,3],[[[35,[-1,-2]]],-2,21,[[36,[-1]]]],[[15,15],42],[[-1,-2],42,[],[]],[[15,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],43,[44,45],46],[[15,-1],3,47],[[[40,[-1]],[3,[48,5]]],-1,[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1,-2]],5,5],-2,21,[[36,[-1]]]],0,[[15,-1],6,25],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1,-2]],48,5],-2,21,[[36,[-1]]]],0,[[[35,[-1,-2]],5],-2,21,[[36,[-1]]]],[[[35,[-1,-2]],5,5],[[33,[-2]]],21,[[36,[-1]]]],[[[35,[-1,-2]],5],-2,21,[[36,[-1]]]],[[[35,[-1,-2]],5,5],[[33,[-2]]],21,[[36,[-1]]]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[49,49],[[-1,-2],3,[],[]],[[49,49],50],[5,-1,[]],[5,-1,[]],[-1,[[6,[49]]],7],[49,51],[5,3],[[49,49],42],[[-1,-2],42,[],[]],[[49,12],13],[-1,-1,[]],[[-1,-2],43,[44,45],46],[[49,-1],3,47],[[],5],[-1,-2,[],[]],[49,26],[[49,49],[[23,[50]]]],[[49,-1],6,25],[49,26],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[52,[-1]]],[[6,[[53,[-1]],54]]],[55,56]],[57,57],[[[58,[-1]]],[[58,[-1]]],[2,55]],[[[59,[-1]]],[[59,[-1]]],[2,55]],[[[53,[-1]]],[[53,[-1]]],[2,55]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,0,[[[33,[[60,[-1]]]]],[[52,[-1]]],55],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[57]]],7],[-1,[[6,[[58,[-2]]]]],7,55],[-1,[[6,[[59,[-2]]]]],7,55],[-1,[[6,[[53,[-2]]]]],7,[4,55]],[[[52,[-1]],42],[[52,[-1]]],[55,56]],0,0,[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],0,0,0,[[[53,[-1]],[62,[[61,[-1]]]],[61,[-1]]],[[63,[-1]]],[55,56]],0,[[57,12],13],[[[58,[-1]],12],13,[14,55]],[[[59,[-1]],12],13,[14,55]],[[[53,[-1]],12],13,[14,55]],[[64,12],13],0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[52,[-1]],[33,[[65,[-1]]]]],[[52,[-1]]],[55,56]],0,0,[[[52,[-1]],[23,[5]]],[[52,[-1]]],[55,56]],0,[[[67,[[66,[-1]]]],-1,-1,-2,-1],-1,55,10],0,0,0,0,[[[53,[-1]]],[[69,[[68,[-1]]]]],55],[[[52,[-1]],5],[[52,[-1]]],[55,56]],0,[[[52,[-1]],5],[[52,[-1]]],[55,56]],0,0,0,0,0,0,0,[[[52,[-1]],[23,[[33,[[70,[-1]]]]]]],[[52,[-1]]],[55,56]],[[71,[34,[[60,[-1]]]],[72,[-1]],[73,[-1]],42],[[74,[-1,[73,[-1]]]]],55],[[57,-1],6,25],[[[58,[-1]],-2],6,55,25],[[[59,[-1]],-2],6,55,25],[[[53,[-1]],-2],6,55,25],[[[53,[-1]],[69,[[68,[-1]]]]],3,55],[[[52,[-1]],[69,[[68,[-1]]]]],[[52,[-1]]],[55,56]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[5,5],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[68,[-1]]],[[68,[-1]]],[2,75]],[[-1,-2],3,[],[]],0,0,[[[72,[-1]],43],[[23,[[68,[-1]]]]],75],[5,-1,[]],[5,-1,[]],[-1,[[6,[[68,[-2]]]]],7,75],[5,3],[[[68,[-1]],12],13,[14,75]],[-1,-1,[]],[[],5],[-1,-2,[],[]],0,0,0,[[[68,[-1]],-2],6,75,25],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],0,[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[72,[-1]]],[[72,[-1]]],[2,75]],[[-1,-2],3,[],[]],[5,[[6,[[72,[-1]],76]]],75],0,0,0,0,[5,-1,[]],[5,-1,[]],[-1,[[6,[[72,[-2]]]]],7,75],[5,3],[[[72,[-1]],12],13,[14,75]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[[72,[-1]],-2],6,75,25],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[39,[-1]],[39,[-1]]],[[39,[-1]]],21],[[[77,[-1,-2]],[77,[-1,-2]]],[[77,[-1,-2]]],78,[]],[[[77,[-1,-2]],[77,[-1,-2]]],3,[78,2],2],0,0,[[[77,[-1,-2]],57],[[77,[-1,-2]]],[78,79,80,81,2],[2,81]],0,0,[[],[[77,[[39,[-1]],-2]]],75,82],0,[[[77,[[39,[-1]],49]]],[[77,[[39,[-1]],49]]],55],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[37,-2],-2,21,[[36,[-1]]]],[[[77,[[39,[-1]],49]],37],[[77,[[39,[-1]],49]]],55],[[-1,48],[[77,[-2,-1]]],[],[]],[[[83,[-1]]],[[83,[-1]]],2],[[[39,[-1]]],[[39,[-1]]],2],[84,84],[85,85],[86,86],[87,87],[[[77,[-1,-2]]],[[77,[-1,-2]]],2,2],[[[88,[-1,-2]]],[[88,[-1,-2]]],2,2],[51,51],[[[89,[-1,-2]]],[[89,[-1,-2]]],2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[83,[-1]],[83,[-1]]],50,90],[[84,84],50],[5,[[38,[-1]]],[]],[[5,[23,[[91,[-1]]]]],[[77,[[39,[-1]],49]]],55],0,0,[[-1,[33,[[77,[[39,[-2]],-3]]]]],[[77,[[39,[-2]],-3]]],10,21,81],[-1,[[38,[-1]]],[]],[[[39,[-1]],[23,[[91,[-1]]]]],[[77,[[39,[-1]],49]]],55],[-1,[[77,[-1,-2]]],[],[]],0,0,0,[[[77,[[39,[-1]],49]]],[[77,[[39,[-1]],49]]],55],[[],37],[[],[[89,[-1,-2]]],4,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[83,[-2]]]]],7,8],[-1,[[6,[86]]],7],[-1,[[6,[87]]],7],[-1,[[6,[[88,[-2,-3]]]]],7,8,8],[-1,[[6,[[89,[-2,-3]]]]],7,8,8],[-1,51,[]],0,[[[77,[[39,[-1]],49]]],[[77,[[39,[-1]],49]]],55],[[[77,[-1,-2]]],[[77,[-1,-2]]],[],[]],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],0,[[[83,[-1]],[83,[-1]]],42,81],[[[39,[-1]],[39,[-1]]],42,81],[[84,84],42],[[85,85],42],[[86,86],42],[[87,87],42],[[[77,[-1,-2]],[77,[-1,-2]]],42,81,81],[[[88,[-1,-2]],[88,[-1,-2]]],42,81,81],[[51,51],42],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[-1,[[6,[[66,[-2]],92]]],[],[]],[[[77,[[39,[-1]],-2]],[73,[-1]],-1,-3,-4],[[6,[-1,[92,[-2]]]]],75,[81,82,93],[[94,[-1]]],[[95,[-1]]]],[[[77,[-1,-2]],[73,[-1]],-1,43,-3],[[6,[-1,[92,[-2]]]]],75,[82,93],[[94,[-1]]]],[[[34,[[88,[-1,-2]]]],[73,[-1]],-1,-3,[41,[-1]]],[[6,[-1,[92,[-2]]]]],75,82,[[94,[-1]]]],[[[77,[[39,[-1]],-2]],[73,[-1]],-1,-3,[41,[-1]]],[[6,[-1,[92,[-2]]]]],75,[81,82,93],[[94,[-1]]]],[[[77,[[39,[-1]],-2]],-3],[[77,[-1,-2]]],75,[81,82,93],[[95,[-1]]]],[[[89,[[77,[[39,[-1]],-2]],-2]],-3],[[89,[[77,[-1,-2]],-2]]],75,[81,82,93],[[95,[-1]]]],[[[77,[[39,[-1]],-2]],-3],[[74,[-1,[73,[-1]]]]],75,[81,82,93],[[95,[-1]]]],[[[77,[-1,-2]],-3],[[74,[-1,[73,[-1]]]]],75,[82,93],[[95,[-1]]]],[[[92,[-1]],12],13,14],[[[92,[-1]],12],13,14],[[[83,[-1]],12],13,14],[[[39,[-1]],12],13,14],[[84,12],13],[[85,12],13],[[86,12],13],[[87,12],13],[[[77,[-1,-2]],12],13,14,14],[[[77,[[39,[-1]],49]],12],13,55],[[[88,[-1,-2]],12],13,14,14],[[51,12],13],[[[89,[-1,-2]],12],13,14,14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[43,[[39,[-1]]],21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[43,[[77,[-1,-2]]],21,[]],[43,[[77,[[39,[-1]],-2]]],21,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[96,[[23,[51]]]],[43,[[23,[51]]]],0,[-1,[[23,[[74,[-2,[73,[-2]]]]]]],[],[]],[[[97,[-1]]],[[23,[[74,[-1,[73,[-1]]]]]]],75],[-1,[[41,[-2]]],[],[]],[[[97,[-1]]],[[41,[-1]]],75],[[-1,51],[[73,[-2]]],[],[]],[[[97,[-1]],51],[[73,[-1]]],75],[[-1,-2],43,[44,45],46],[[-1,-2],43,[44,45],46],[[[83,[-1]],-2],3,44,47],[[84,-1],3,47],[71,[[38,[-1]]],[]],0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[39,[-1]]],42,21],[[[77,[-1,-2]]],42,[78,79,81],81],[[[39,[-1]]],42,21],[[[77,[-1,-2]]],42,78,[]],0,[[[73,[-1]]],-1,75],[-1,-2,[],[]],[[[97,[-1]]],-1,75],0,[[[83,[49]]],26],[[[77,[[39,[-1]],49]]],[[33,[26]]],55],[[[77,[-1,-2]],[98,[-2]]],[[6,[[89,[[77,[-1,-2]],-2]],[92,[-2]]]]],[80,2,79,78,81],[90,82,44]],[-1,[[77,[[39,[-1]],-2]]],21,81],[-1,[[77,[[39,[-1]],49]]],55],0,[[[89,[-1,-2]],-3],[[89,[-4,-2]]],[],82,99,[]],0,[[[39,[-1]],[39,[-1]]],[[39,[-1]]],21],[[[77,[[39,[-1]],-2]],-1],[],21,81],[[[77,[-1,-2]],[77,[-1,-2]]],[[77,[-1,-2]]],[78,79,81],81],[[[77,[-1,-2]],[77,[-1,-2]]],3,[78,79,81,2],[81,2]],[[[39,[-1]]],[[39,[-1]]],[79,80]],[[[77,[-1,-2]]],[[77,[-1,-2]]],[79,80],[]],[[[83,[49]]],26],[[[77,[[39,[-1]],49]]],26,55],0,[[],[[39,[-1]]],21],[[],[[77,[-1,-2]]],[78,79,81],81],[[[83,[-1]],[83,[-1]]],[[23,[50]]],100],[[84,84],[[23,[50]]]],[[[39,[-1]],43],[[39,[-1]]],21],[[[77,[[39,[-1]],49]],43],[[77,[[39,[-1]],49]]],55],[[[77,[-1,-2]],43],[[77,[-1,-2]]],79,[]],[[-1,5],[[33,[-1]]],21],0,0,0,0,0,[[[83,[-1]],-2],6,24,25],[[86,-1],6,25],[[87,-1],6,25],[[[88,[-1,-2]],-3],6,24,24,25],[[[89,[-1,-2]],-3],6,24,24,25],0,[[[77,[-1,-2]]],[[77,[-1,-2]]],[],[]],[[[77,[[39,[-1]],49]]],[[77,[[39,[-1]],49]]],55],[[[39,[-1]],[39,[-1]]],[[39,[-1]]],21],[[[77,[-1,-2]],[77,[-1,-2]]],[[77,[-1,-2]]],78,[]],0,[[[83,[49]]],26],[[[77,[[39,[-1]],49]]],26,55],[51,[[23,[96]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[77,[[39,[-1]],-2]]],[[33,[[88,[-1,-2]]]]],75,82],[[[89,[[33,[[88,[-1,-2]]]],-2]],-3,-1,-4],[[3,[-1,[74,[-1,[73,[-1]]]]]]],75,[82,14],[[95,[-1]]],[[94,[-1]]]],[[[89,[[77,[[39,[-1]],-2]],-2]],-3,-1,-4],[[3,[-1,[61,[-1]]]]],75,[14,81,82,93],[[95,[-1]]],[[94,[-1]]]],[-1,26,[]],[-1,26,[]],[51,[[23,[43]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[43,[[77,[[39,[-1]],49]]],55],[[],[[77,[[39,[-1]],49]]],55],[[],[[77,[[39,[-1]],49]]],55],[[],[[77,[[39,[-1]],49]]],55],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[[[39,[-1]],[41,[-1]]],-1,21],[-1,[[74,[-2,[73,[-2]]]]],[],[]],[[[97,[-1]]],[[74,[-1,[73,[-1]]]]],75],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,48],[[38,[-1]]],[]],[[48,5,[23,[[91,[-1]]]]],[[77,[[39,[-1]],49]]],55],0,[5,[[38,[-1]]],[]],[5,[[38,[-1]]],[]],0,[[],[[39,[-1]]],21],[[],[[77,[-1,-2]]],78,[]],0,0,0,0,0,0,0,[-2,-2,21,[[36,[-1]]]],[-1,-1,[]],[[-1,37],-1,[]],[[5,[23,[[91,[-1]]]]],-2,[],[]],[[-2,-2],-2,21,[[36,[-1]]]],[[[39,[-1]],[23,[[91,[-1]]]]],-2,[],[]],[-2,-2,21,[[36,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[[-1,43],-1,[]],[-1,-1,[]],[43,-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[48,5,[23,[[91,[-1]]]]],-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[48,48],[71,71],[101,101],[[[60,[-1]]],[[60,[-1]]],[2,55]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[48,48],50],[[71,71],50],0,[[-1,5,5],3,[]],[[-1,[3,[5,5]],[3,[5,5]]],3,[]],[[-1,5,[23,[5]],[23,[5]],5],3,[]],[102,[[60,[-1]]],[55,56]],[102,[[60,[-1]]],[55,56]],[[5,5],[[3,[[33,[[60,[-1]]]],5]]],[55,56]],[102,[[60,[-1]]],[55,56]],[102,[[60,[-1]]],[55,56]],[[5,[34,[103]],104],[[3,[5,[33,[[60,[-1]]]]]]],[55,56]],[5,[[3,[5,[33,[[60,[-1]]]]]]],[55,56]],[102,[[60,[-1]]],55],[[5,104],[[3,[5,[33,[[60,[-1]]]]]]],[55,56]],[[102,[62,[-1]]],[[60,[-1]]],55],[[102,[105,[-1]],[23,[[105,[-1]]]]],[[60,[-1]]],55],[5,[[3,[5,[33,[[60,[-1]]]]]]],[55,56]],[[102,[62,[[62,[-1]]]]],[[60,[-1]]],[55,56]],[[5,[62,[102]],[34,[[33,[-1]]]]],[[3,[[33,[[60,[-1]]]],5]]],[55,56]],[5,[[3,[5,[33,[[60,[-1]]]]]]],[55,56]],[[5,16,106],[[3,[5,[33,[[60,[-1]]]]]]],[55,56]],[[5,16],[[33,[[60,[-1]]]]],[55,56]],[[5,103,104],[[3,[5,[33,[[60,[-1]]]]]]],[55,56]],[[[62,[102]]],[[33,[[60,[-1]]]]],55],[[5,5],[[3,[5,[33,[[60,[-1]]]]]]],[55,56]],[[],71],[[],[[60,[-1]]],[4,55]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[48]]],7],[-1,[[6,[71]]],7],[-1,[[6,[[60,[-2]]]]],7,55],[5,3],[5,3],[5,3],[5,3],[5,3],[[[60,[-1]]],-1,55],[[48,48],42],[[71,71],42],[[101,101],42],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[[33,[[60,[-1]]]],5],5,[55,56]],[[[33,[[60,[-1]]]],5,5,[34,[103]],104],3,[55,56]],[[[33,[[60,[-1]]]],5],3,[55,56]],[[[33,[[60,[-1]]]],5,104],3,[55,56]],[[[33,[[60,[-1]]]],5,102,[105,[-1]],[23,[[105,[-1]]]]],3,55],[[[33,[[60,[-1]]]],5,104],3,[55,56]],[[[33,[[60,[-1]]]],5],5,[55,56]],[[[33,[[60,[-1]]]],5],3,[55,56]],[[[33,[[60,[-1]]]],5,5],5,55],[[[33,[[60,[-1]]]],5,5],5,55],[[[33,[[60,[-1]]]],5],3,[55,56]],[[[33,[[60,[-1]]]],16,106,5],5,[55,56]],[[[33,[[60,[-1]]]],5,103,104],3,[55,56]],[[[33,[[60,[-1]]]],5],5,[55,56]],[[48,12],13],[[71,12],13],[[101,12],13],[[101,12],13],[[[60,[-1]],12],13,[14,55]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[53,[-1]]],[[107,[-1]]],55],[96,[[23,[71]]]],[43,[[23,[71]]]],0,[[[107,[-1]]],26,55],[[-1,-2],43,[44,45],46],[[-1,-2],43,[44,45],46],[[48,-1],3,47],[[71,-1],3,47],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[33,[108]]]],[[71,102,[33,[-1]]],[[60,[-1]]],55],[[5,[34,[[60,[-1]]]]],[[107,[-1]]],55],[[48,48],[[23,[50]]]],[[71,71],[[23,[50]]]],[[[60,[-1]]],-1,[55,56]],0,[[[60,[-1]]],[[62,[[62,[-1]]]]],[55,56]],[[48,-1],6,25],[[71,-1],6,25],[[[60,[-1]],-2],6,55,25],[[[107,[-1]],-2],6,55,25],[48,5],[71,[[23,[96]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,26,[]],[71,[[23,[43]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],0,[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[[[60,[-1]]],-1,55],[[[60,[-1]],5,[62,[[33,[-1]]]],[109,[-2,-3]],[34,[-1]]],[[6,[3,26]]],[55,56],110,[[111,[-2]]]],[[[60,[-1]],5,[62,[[33,[-1]]]],[53,[-1]]],[[6,[3,26]]],[55,56]],[[[60,[-1]],5,[62,[[33,[-1]]]]],[[6,[3,26]]],55],[[[60,[-1]],5,[62,[[33,[-1]]]],[53,[-1]]],[[6,[3,26]]],55],[[[60,[-1]],5,[62,[[33,[-1]]]],[53,[-1]]],[[6,[3,26]]],55],[[[60,[-1]],5,[62,[[33,[-1]]]],[34,[-1]]],[[6,[3,26]]],55],[[[60,[-1]],5,[62,[[33,[-1]]]]],[[6,[3,26]]],[55,56]],[[[60,[-1]],5,[62,[[33,[-1]]]]],[[6,[3,26]]],55],[[[60,[-1]],5,[62,[[33,[-1]]]],[53,[-1]],[34,[-1]]],[[112,[3]]],[55,56]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[60,[-1]],-2],[[113,[3]]],55,114],[102,[[60,[-1]]],[55,56]],0,0,0,0,0,0,0,0,0,0,[[-1,[74,[-1,[73,[-1]]]],[73,[-1]],[34,[[60,[-1]]]],[62,[[33,[-1]]]],-1,-1,-1,-1,[34,[[74,[-1,[73,[-1]]]]]],-2,115,5],[[6,[[74,[-1,[73,[-1]]]],116]]],55,[117,45]],[-1,-2,[],[]],[-1,-2,[],[]],[[[118,[-1]]],[[118,[-1]]],2],[[-1,-2],3,[],[]],[[[118,[-1]],42],[[33,[[38,[-1]]]]],75],[5,-1,[]],[5,-1,[]],[-1,[[6,[[118,[-2]]]]],7,[119,120]],[5,3],0,[[[118,[-1]],12],13,14],[-1,-1,[]],[[],5],[-1,-2,[],[]],0,[115,[[118,[-1]]],78],[[[118,[-1]],-2],6,[119,120],25],[[-1,[74,[-1,[73,[-1]]]],[73,[-1]],[34,[[60,[-1]]]],[62,[[33,[-1]]]],-1,-1,115,5],[[6,[[33,[[33,[-1]]]],116]]],55],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[[-1,-2,5,[73,[-1]],[34,[[60,[-1]]]],[62,[[33,[-1]]]],-1,-1,[34,[[74,[-1,[73,[-1]]]]]],115,5],3,55,99],[-1,-2,[],[]],[[[33,[-1]],[73,[-1]],5,-2],[[74,[-1,[73,[-1]]]]],75,[117,45]],0,0,0,0,0,0,[[[121,[-1]]],[[121,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[121,[-1]]],[[121,[-1]]],2],[[[122,[-1]]],[[122,[-1]]],[2,75]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[[[34,[[60,[-1]]]],[33,[[65,[-1]]]],[23,[[33,[[70,[-1]]]]]],[72,[-1]],5],[[6,[[23,[[122,[-1]]]],123]]],[55,56]],[[],[[121,[-1]]],4],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[121,[-2]]]]],7,8],[-1,[[6,[[122,[-2]]]]],7,75],[5,3],[5,3],[5,3],0,[[123,12],13],[[123,12],13],[[[121,[-1]],12],13,14],[[[122,[-1]],12],13,[14,75]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[121,[-1]],108],[],[]],[[[121,[-1]],108],[],[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[[121,[-1]],-2],[[121,[-3]]],[],99,[]],0,0,0,0,[[[121,[-1]],-2],6,24,25],[[[122,[-1]],-2],6,75,25],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,26,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[115,[34,[[60,[-1]]]]],[[33,[[33,[[124,[-1]]]]]]],55],[125,125],[126,126],[115,115],[127,127],[[[128,[-1]]],[[128,[-1]]],2],[129,129],[[[130,[-1,-2]]],[[130,[-1,-2]]],2,2],[108,108],[131,131],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[108,108],50],0,[126,115],[[[34,[[60,[-1]]]],42],[[23,[115]]],55],[[],125],[[],126],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[125]]],7],[-1,[[6,[126]]],7],[-1,[[6,[115]]],7],[-1,[[6,[127]]],7],[-1,[[6,[[128,[-2]]]]],7,8],[-1,[[6,[129]]],7],[-1,[[6,[[130,[-2,-3]]]]],7,8,8],[-1,[[6,[108]]],7],[-1,[[6,[[132,[-2]]]]],7,[]],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],0,0,0,[[125,125],42],[[126,126],42],[[108,108],42],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[[132,[-1]],-1,-1],-1,[78,79,2,80,[133,[43]]]],[[[128,[-1]],-2],-3,82,99,[78,[134,[-1]]]],[[[130,[-1,-1]],-1,-1],-1,[78,79,2,80,[133,[43]]]],[[[130,[[128,[-1]],129]],-2,-2,-3],-2,82,[78,79,2,[134,[-1]],80,[133,[43]]],99],0,[[125,12],13],[[126,12],13],[[115,12],13],[[127,12],13],[[129,12],13],[[[130,[-1,-2]],12],13,14,14],[[108,12],13],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[71,48],[[23,[108]]]],[[[34,[[60,[-1]]]]],125,55],[[[34,[[60,[-1]]]],42],126,55],[[-1,-2],43,[44,45],46],[[108,-1],3,47],[[125,108]],[[125,108]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[125],[-1,-2,[],[]],[[],131],0,[125,42],[131,5],0,[108,[[33,[[124,[-1]]]]],21],[108,16],0,[108,5],0,[131,23],[131,23],[[131,5],23],[-1,[[135,[-2]]],[],[]],[[108,108],[[23,[50]]]],0,0,[[[130,[[128,[-1]],129]],-2],[[132,[-3]]],82,99,[78,[134,[-1]],80,[133,[43]]]],0,[[115,[72,[-1]],[34,[[60,[-1]]]]],[[3,[[121,[[74,[-1,[73,[-1]]]]]],[33,[[65,[-1]]]]]]],55],[[125,-1],6,25],[[126,-1],6,25],[[115,-1],6,25],[[127,-1],6,25],[[[128,[-1]],-2],6,24,25],[[129,-1],6,25],[[[130,[-1,-2]],-3],6,24,24,25],[[108,-1],6,25],[[[132,[-1]],-2],6,[],25],[131,[[3,[5,[23,[5]]]]]],[108,[[23,[136]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[137,137],[[[70,[-1]]],[[70,[-1]]],2],[[[138,[-1]]],[[138,[-1]]],2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],[[33,[[38,[-1]]]]],21],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[137]]],7],[-1,[[6,[[70,[-2]]]]],7,8],[5,3],[5,3],[5,3],0,[[137,12],13],[[[70,[-1]],12],13,14],[[[138,[-1]],12],13,14],[[[70,[-1]]],137,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[70,[-1]]],139,[]],0,0,0,[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[70,[-1]]],42,[]],[[[70,[-1]]],5,[]],0,[[137,-1],6,25],[[[70,[-1]],-2],6,24,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[136,136],[[[65,[-1]]],[[65,[-1]]],2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[34,[[140,[-1]]]],[23,[[140,[-1]]]],[23,[[140,[-1]]]]],[[140,[-1]]],141],[[-1,-1,-2,-1],-1,[78,79,2],142],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[136]]],7],[5,3],[5,3],[[136,136],42],[[-1,-2],42,[],[]],[[136,12],13],[[[65,[-1]],12],13,14],[-1,-1,[]],[-1,-1,[]],[[-1,-2],43,[44,45],46],[136,[[65,[-1]]],75],[[[65,[-1]]],42,75],[[136,-1],3,47],0,[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[65,[-1]]],42,75],[[[65,[-1]]],5,75],0,[[136,-1],6,25],[136,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[65,[-1]]],5,75],0,0,0,[[],[[65,[-1]]],21],0,[[],[[65,[-1]]],21],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[143,[-1]]],[[143,[-1]]],[2,75]],[[[144,[-1]]],[[144,[-1]]],[2,75]],[[[63,[-1]]],[[63,[-1]]],[2,75]],[[[145,[-1]]],[[145,[-1]]],[2,75]],[[[146,[-1]]],[[146,[-1]]],[2,75]],[[[147,[-1]]],[[147,[-1]]],[2,75]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-1,5],[[62,[[33,[-1]]]]],55],[[[62,[[33,[-1]]]],-1,-1,5],3,55],[[],[[65,[-1]]],55],0,[-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[[],[[149,[-1]]],4],[5,-1,[]],[5,-1,[]],[5,3],[-1,-1,[]],[[],5],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],0,[-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[[],[[150,[-1]]],4],[5,-1,[]],[5,-1,[]],[5,3],[-1,-1,[]],[[[62,[[33,[-1]]]],-1,-1,5],-1,[55,11]],[[],5],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],0,0,0,[-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[[],[[151,[-1]]],4],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,3],[5,3],[-1,-1,[]],[-1,-1,[]],[[[62,[[33,[-1]]]],5,-1,[3,[-1,-1]],[34,[42]],[3,[-1,-1]]],[[152,[-1]]],[21,11]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[[],[[153,[-1]]],4],[5,-1,[]],[5,-1,[]],[5,3],[-1,-1,[]],[[],5],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[103,103],[[-1,-2],3,[],[]],[[[33,[104]],[34,[103]],104],[[62,[[33,[-1]]]]],55],[5,-1,[]],[5,-1,[]],[5,3],[[103,103],42],[[-1,-2],42,[],[]],[[[62,[[33,[-1]]]],[62,[-1]],[62,[-1]]],3,55],[[103,12],13],[-1,-1,[]],[[],5],[-1,-2,[],[]],[103,-1,55],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],0,0,0,0,[-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[[62,[-2]]],-2,55,[[36,[-1]]]],[[[62,[-2]],[62,[-2]],[62,[-2]],[62,[-2]]],[[62,[-2]]],55,[[36,[-1]]]],[[[62,[-2]],[62,[-2]],[62,[-2]],[62,[-2]],[62,[-2]]],[[62,[-2]]],55,[[36,[-1]]]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[[],[[154,[-1]]],4],[5,-1,[]],[5,-1,[]],[5,3],[-1,-1,[]],[[],5],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],0,[71,16],[[71,[1,[-1]],37],[[38,[-1]]],55],[71,5],[[],[[62,[71]]]],[[[1,[-1]],37],[[38,[-1]]],55],[[],[[65,[-1]]],55],0,[[[155,[-1]],[62,[-1]]],3,55],[[[155,[-1]],[62,[-1]]],3,55],[[[155,[-1]],-1],3,55],[[[155,[-1]],-1],3,55],[[[155,[-1]],[62,[-1]]],3,55],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[104,104],104],[[104,104],104],[[104,104,104],[[3,[[62,[[33,[-1]]]],[155,[-1]]]]],55],[[],[[155,[-1]]],[4,55]],[5,-1,[]],[5,-1,[]],[5,3],[[[155,[-1]],[62,[[33,[-1]]]],[62,[-1]]],3,55],[[[155,[-1]],[62,[[33,[-1]]]]],3,55],[[[155,[-1]],[62,[[33,[-1]]]],104],3,55],[[[155,[-1]],[62,[[33,[-1]]]]],3,55],[[[155,[-1]],[62,[[33,[-1]]]]],3,55],[-1,-1,[]],0,[[],5],[-1,-2,[],[]],0,0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[105,[-1]]],[[105,[-1]]],2],[[-1,-2],3,[],[]],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[[],[[156,[-1]]],4],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,3],[5,3],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[[5,5],[[33,[[60,[-1]]]]],55],[[5,[62,[[33,[-1]]]],[34,[-1]]],3,75],0,0,0,0,0,0,0,0,0,0,0,[-1,15,[]],[-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[[],[[157,[-1]]],4],[[],[[158,[-1]]],4],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,3],[5,3],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[62,[[33,[-1]]]],104],3,55],[[[62,[[33,[-1]]]],-1,[23,[5]]],3,55],[[[62,[[33,[-1]]]],[34,[-1]],5],[[6,[3,26]]],55],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,3],[[[73,[-1]],43,-1],-1,75],[[[73,[-1]],43,-1],-1,75],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[[73,[-1]]],[[159,[-1]]],[75,56]],[[[73,[-1]],43],[[61,[-1]]],75],[[[159,[-1]]],[[62,[-1]]],[75,56]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[[[73,[-1]],43],[[61,[-1]]],75],[-1,-2,[],[]],[[[73,[-1]],43],-1,75],0,0,0,0,0,0,[-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[[],[[160,[-1]]],4],[5,-1,[]],[5,-1,[]],[5,3],[-1,-1,[]],[[5,[161,[-1]],[62,[[33,[-1]]]],[62,[-1]]],3,21],[[],5],[-1,-2,[],[]],[5,[[22,[5]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,15,[]],[-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[[],[[162,[-1]]],4],[[],[[163,[-1]]],4],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,3],[5,3],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[71,16],[[71,[1,[-1]],37],[[38,[-1]]],55],[[],[[62,[71]]]],[[[1,[-1]],37],[[38,[-1]]],55],[[],[[65,[-1]]],75],[-1,[[62,[[33,[-1]]]]],55],[[-1,-1,-1],[[62,[[33,[-1]]]]],55],[[-1,-1],[[62,[[33,[-1]]]]],55],[[[62,[-1]]],[[62,[[33,[-1]]]]],55],[[[62,[-1]]],[[62,[[33,[-1]]]]],55],[[[62,[[33,[-1]]]],-1],3,55],[[[62,[[33,[-1]]]],-1,-1,-1],3,55],[[[62,[[33,[-1]]]],-1,-1],3,55],[[[62,[[33,[-1]]]],[62,[-1]]],3,55],[[[62,[[33,[-1]]]],[164,[-1]]],3,55],[[[62,[[33,[-1]]]],[62,[-1]]],3,55],[[[62,[[33,[-1]]]],-1],3,55],[[165,5],[[33,[[167,[166]]]]]],0,0,0,0,[-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[106,106],[[-1,-2],3,[],[]],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[[],[[168,[-1]]],4],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,3],[5,3],[[106,106],42],[[-1,-2],42,[],[]],[[[62,[[33,[-1]]]],43,16,106],3,55],[[106,12],13],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[65,[-1]]],55],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[71,[1,[-1]],37],[[38,[-1]]],55],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,3],[5,3],[5,3],[5,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[60,[-1]],5,[62,[[33,[-1]]]]],[[6,[3,26]]],55],[[[169,[-1]]],[[62,[[33,[-1]]]]],21],0,0,0,0,[-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[[],[[170,[-1]]],4],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,3],[5,3],[5,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[62,[[33,[-1]]]],5,[3,[-1,-1]],[34,[42]],[3,[-1,-1]]],[[171,[-1]]],[75,11]],0,[-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[1,[-2]],37],[[77,[[39,[-2]],49]]],[],[]],[[[35,[-1,-2]],37],[[33,[-2]]],55,[[36,[-1]]]],[[-1,37],[[33,[[77,[[39,[-2]],49]],148]]],[],[]],[[-1,-1,5],[[62,[[33,[-1]]]]],55],[[],[[172,[-1]]],4],[5,-1,[]],[5,-1,[]],[5,3],[[[62,[[33,[-1]]]],-1,-1,5],3,55],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[65,[-1]]],55],[5,5],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[173,[-1]]],[[173,[-1]]],[2,21]],[[-1,-2],3,[],[]],[[],[[173,[-1]]],21],[5,-1,[]],[5,-1,[]],[5,3],[[[173,[-1]],12],13,[14,21]],[-1,-1,[]],0,[[],5],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],0,0,0,0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[174,174],[[-1,-2],3,[],[]],0,[[],174],[5,-1,[]],[5,-1,[]],[-1,[[6,[174]]],7],[5,3],[[174,174],42],[[-1,-2],42,[],[]],[[174,12],13],[5,[[62,[174]]]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[5,-1,[]],[5,102],[[5,5],174],[-1,[[113,[174]]],175],0,[[174,-1],6,25],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],[[-1,5,174],-1,[]],[[102,5,174],102],[[174,-1],[[113,[3]]],114],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[167,[[176,[-1]]]]],21],[[5,5,5,5],[[167,[177]]]],[[5,5],[[167,[178]]]],[[5,5,43],[[167,[179]]]],[[165,5,5],[[167,[180]]]],[[165,5,[23,[5]]],[[167,[181]]]],[165,[[167,[182]]]],[[],[[183,[-1]]],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[183,[-1]],165],[],[]],[[[183,[-1]],165],[],[]],[[[62,[[33,[-1]]]],5,[34,[[33,[[167,[166]]]]]],[183,[-2]]],3,55,[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[62,[[33,[-1]]]],5,5,5,5,5,[34,[[33,[[167,[166]]]]]],[183,[-2]]],3,55,[]],[[[62,[[33,[-1]]]],5,5,[34,[[33,[[167,[166]]]]]],[183,[-2]]],3,55,[]],[[[183,[-1]],165,-1],3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[180,5],[-1,5,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[[-1,[62,[[33,[-2]]]],[183,[-3]],5],-2,[],[],[]],[[[176,[-1]],[62,[[33,[-1]]]],[183,[-1]],5],-1,21],[[177,[62,[[33,[-1]]]],[183,[-1]],5],-1,21],[[178,[62,[[33,[-1]]]],[183,[-1]],5],-1,21],[[179,[62,[[33,[-1]]]],[183,[-1]],5],-1,21],[[180,[62,[[33,[-1]]]],[183,[[33,[-1]]]],5],-1,21],[[181,[62,[[33,[-1]]]],[183,[-1]],5],-1,21],[[182,[62,[[33,[-1]]]],[183,[-1]],5],-1,21],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],3],[[]],[[],3],[[],161],[[],161],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[116,116],[184,184],[76,76],[54,54],[185,185],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,3],[5,3],[5,3],[5,3],[5,3],[[116,12],13],[[116,12],13],[[184,12],13],[[184,12],13],[[76,12],13],[[76,12],13],[[54,12],13],[[54,12],13],[[185,12],13],[[185,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,3],[[[186,[-1]],[74,[-1,-2]]],[[33,[-1]]],75,[[187,[-1]]]],[[[186,[-1]],[74,[-1,-2]]],[[33,[-1]]],75,[[187,[-1]]]],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[5,[73,[-1]],-1],[[186,[-1]]],75],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],[[[23,[57]],42],[[3,[[77,[[39,[-1]],49]],[1,[-1]]]]],[55,56]],[[[23,[57]],42],[[3,[[89,[[33,[[88,[-1,49]]]],49]],[1,[-1]]]]],[55,56]],[[[23,[57]]],[[98,[49]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[5,-1,[]],[5,-1,[]],0,[5,3],0,[-1,-1,[]],0,[[],5],[-1,-2,[],[]],0,0,0,0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],0,0,[[-1,-2],3,[],[]],[[-1,[67,[[66,[[33,[-2]]]]]]],3,[],[]],[[-1,[34,[-2]]],3,[],[]],[-1,[[188,[-2]]],[],[]],[-1,-2,[],[]],[[[161,[-1]]],-2,[],[]],0,[[],[[189,[-1]]],110],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[66,[-1]]],[[66,[-1]]],2],[[[67,[-1]]],[[67,[-1]]],2],[[[190,[-1]]],[[190,[-1]]],[2,191]],[[[192,[-1]]],[[192,[-1]]],[2,191]],[[[31,[-1,-2]]],[[31,[-1,-2]]],[2,191],2],[[[193,[-1]]],[[193,[-1]]],[191,2]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[[[67,[[66,[[33,[-1]]]]]],[66,[-1]]],[[67,[[66,[-1]]]]],75],0,0,0,[[[62,[33]],[34,[138]],[109,[-1,-2]]],[[6,[[31,[-1,-2]],116]]],110,[[111,[-1]]]],[[[62,[33]],[34,[138]],[109,[-1,-2]],[33,[[193,[-1]]]],[23,[[62,[[23,[140]]]]]]],[[6,[[31,[-1,-2]],116]]],110,[[111,[-1]]]],[[],[[66,[-1]]],4],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[66,[-2]]]]],7,[]],[-1,[[6,[[67,[-2]]]]],7,8],[-1,[[6,[[190,[-2]]]]],7,[120,119,191]],[-1,[[6,[[192,[-2]]]]],7,[120,119,191]],[-1,[[6,[[31,[-2,-3]]]]],7,[120,119,191],8],[-1,[[6,[[193,[-2]]]]],7,[191,120,119]],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[[[62,[-1]],[62,[-1]]],[[67,[[66,[-1]]]]],[78,82]],0,0,[[[193,[-1]],5,34,34],[[33,[33]]],191],0,[[[67,[[66,[-1]]]]],[[6,[[66,[-1]],92]]],82],[[[66,[-1]],12],13,14],[[[67,[-1]],12],13,14],[[[190,[-1]],12],13,[14,191]],[[[192,[-1]],12],13,[14,191]],[[[31,[-1,-2]],12],13,[14,191],14],[[[193,[-1]],12],13,[191,14]],0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[[[67,[-1]],49],[[23,[-1]]],[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[[[66,[-1]],-2],[[66,[-3]]],[],99,[]],[[[67,[-1]],-2],[[67,[-3]]],[],99,[]],[[[66,[-1]],-2],[[66,[-3]]],[],99,[]],[[[67,[-1]],-2],[[67,[-3]]],[],99,[]],0,[[33,[140,[-1]]],[[193,[-1]]],191],[[[31,[-1,-2]],[194,[-1,-2]],[140,[-1]],[23,[34]]],[[196,[[195,[-1,-3]]]]],110,[[111,[-1]]],[2,[197,[-1]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[[66,[-1]],-2],6,[],25],[[[67,[-1]],-2],6,24,25],[[[190,[-1]],-2],6,[120,119,191],25],[[[192,[-1]],-2],6,[120,119,191],25],[[[31,[-1,-2]],-3],6,[120,119,191],24,25],[[[193,[-1]],-2],6,[191,120,119],25],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[109,[-1,-2]]],[[109,[-1,-2]]],[2,110],[2,[111,[-1]]]],[[-1,-2],3,[],[]],0,[[[109,[-1,-2]]],[],110,[[111,[-1]]]],[[53,69],[[109,[-1,-2]]],110,[[111,[-1]]]],0,[5,-1,[]],[5,-1,[]],[-1,[[6,[[109,[-2,-3]]]]],7,[4,110],[4,[111,[-2]]]],[5,3],[[[109,[-1,-2]],12],13,[14,110],[14,[111,[-1]]]],[-1,-1,[]],[[],5],[-1,-2,[],[]],0,0,[[[109,[-1,-2]],[62,[[33,[-3]]]],-3,-3,-4],[[6,[[61,[-3]],116]]],110,[[111,[-1]]],55,[198,199]],[[[109,[-1,-2]],[67,[[66,[-3]]]],-3,-3,-3,-4],[[74,[-3,[73,[-3]]]]],110,[[111,[-1]]],55,10],[[[109,[-1,-2]],[63,[-3]],-3,-3,[61,[-3]],-4],[[6,[[3,[[74,[-3,[73,[-3]]]],[61,[-3]]]],116]]],110,[[111,[-1]]],55,10],0,[[[109,[-1,-2]],-3],6,110,[[111,[-1]]],25],0,0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[[[109,[-1,-2]]],[[194,[-1,-2]]],110,[[111,[-1]]]],0,[[[109,[-1,-2]]],[],110,[[111,[-1]]]],0,[[[109,[-1,-2]],[62,[[33,[-3]]]],[34,[-3]]],[[6,[3,64]]],110,[[111,[-1]]],[55,56]],[[[109,[-1,-2]],[62,[[61,[-3]]]],[61,[-3]]],42,110,[[111,[-1]]],55],[-1,-2,[],[]],[[[33,[60]],5],[[109,[-1,[30,[-1]]]]],110],[[[33,[60]],5,5,[33,[65]],[23,[[33,[70]]]],42,[23,[5]]],[[109,[-1,[30,[-1]]]]],110],[[[33,[60]],5,5,[33,[65]],[23,[[33,[70]]]],42,[23,[5]],-1],[[109,[-2,-3]]],200,110,[[111,[-2]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[201,[-1]]],4],[5,-1,[]],[5,-1,[]],[5,3],[-1,-1,[]],[[],5],[[[201,[-1]],-1],42,[202,44,2]],[-1,-2,[],[]],[[[201,[-1]]],42,[202,44,2]],[[[201,[-1]]],[[0,[10]]],[202,44,2]],[[[201,[-1]]],5,[202,44,2]],[[[201,[-1]],-1],5,[202,44,2]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[203,[-1]]],[[203,[-1]]],[2,21]],[[-1,-2],3,[],[]],[5,-1,[]],[5,-1,[]],[5,3],0,[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[203,[-1]]],21],0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[204,[-1]],[205,[-2]]],3,55,206],[[[204,[-1]],[207,[-2,-1]]],3,55,206],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[[3,[[33,[[3,[5]]]],5,42]]]]],206],[[[204,[-1]],-2],[[33,[[33,[-1]]]]],55,99],[[[203,[-1]]],[[204,[-1]]],55],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,3],[5,3],[5,3],[5,3],[5,3],[5,3],[[[204,[-1]]],3,55],[[[204,[-1]]],[[33,[[60,[-1]]]]],55],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[204,[-1]]],5,55],[[[204,[-1]]],5,55],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[[204,[-1]],5],3,55],[[[204,[-1]],5],3,55],0,[-1,[[3,[23,[33,[[3,[5]]]]]]],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[34,[[208,[-1,-2]]]]],[[196,[3]]],110,[[111,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,3],[-1,-1,[]],[[[208,[-1,-2]],49],[[23,[[140,[-1]]]]],110,[[111,[-1]]]],[[],5],[-1,-2,[],[]],0,0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],0,[[[194,[-1,-2]],[31,[-1,-2]],34],[[196,[3]]],110,[[111,[-1]]]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[209,[-1]]],[[209,[-1]]],[2,141]],[[[194,[-1,-2]]],[[194,[-1,-2]]],[2,110],[2,[111,[-1]]]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[209,[-2]]]]],7,141],[-1,[[6,[[194,[-2,-3]]]]],7,110,[[111,[-2]]]],[[[194,[-1,-2]]],[],110,[[111,[-1]]]],0,[5,3],[5,3],0,0,0,[[[209,[-1]],12],13,[14,141]],[[[194,[-1,-2]],12],13,[14,110],[14,[111,[-1]]]],0,0,[-1,-1,[]],[-1,-1,[]],[[69,210,[23,[43]]],[[6,[[194,[-1,-2]],26]]],110,[[111,[-1]]]],0,[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[[194,[-1,-2]]],61,110,[[111,[-1]]]],0,0,0,0,0,0,0,0,0,[[[209,[-1]],-2],6,141,25],[[[194,[-1,-2]],-3],6,110,[[111,[-1]]],25],0,0,[[[194,[-1,-2]]],69,110,[[111,[-1]]]],0,0,[[[194,[-1,-2]],210,[23,[42]]],[[6,[3,26]]],110,[[111,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[194,[-1,-2]]],[],110,[[111,[-1]]]],0,0,0],"c":[],"p":[[3,"Alphas",29],[8,"Clone",3230],[15,"tuple"],[8,"Default",3231],[15,"usize"],[4,"Result",3232],[8,"Deserializer",3233],[8,"Deserialize",3233],[3,"MustConsumeIterator",29],[8,"Iterator",3234],[8,"Display",3235],[3,"Formatter",3235],[6,"Result",3235],[8,"Debug",3235],[4,"ArgumentType",117],[15,"u32"],[3,"Iter",3236],[3,"Skip",3237],[3,"Take",3238],[3,"Cloned",3239],[8,"Field",3240],[3,"Range",3241],[4,"Option",3242],[8,"Serialize",3243],[8,"Serializer",3243],[3,"String",3244],[3,"TypeId",3245],[3,"BenchmarkCtx",85],[6,"Vesta",3246],[3,"OpeningProof",3247],[3,"ProverProof",2724],[6,"Fp",3248],[3,"Vec",3249],[15,"slice"],[3,"ArgumentEnv",117],[8,"ExprOps",940],[3,"Cache",458],[6,"E",458],[4,"ConstantExpr",458],[3,"ArgumentWitness",117],[3,"Constants",458],[15,"bool"],[15,"u64"],[8,"Hash",3250],[8,"Sized",3251],[8,"BuildHasher",3250],[8,"Hasher",3250],[4,"CurrOrNext",966],[4,"Column",210],[4,"Ordering",3252],[4,"Domain",458],[3,"Builder",249],[3,"ConstraintSystem",249],[4,"SetupError",2551],[8,"PrimeField",3240],[8,"SquareRootField",3240],[3,"FeatureFlags",249],[3,"EvaluatedColumnCoefficients",249],[3,"ColumnEvaluations",249],[3,"CircuitGate",966],[3,"DensePolynomial",3253],[15,"array"],[3,"WitnessOverDomains",1648],[4,"GateError",249],[3,"LookupTable",1587],[3,"PointEvaluations",2724],[3,"ProofEvaluations",2724],[3,"DomainConstantEvaluations",408],[3,"Arc",3254],[3,"RuntimeTableCfg",1521],[4,"GateType",966],[3,"EvaluationDomains",434],[3,"Radix2EvaluationDomain",3255],[3,"Evaluations",3256],[8,"FftField",3240],[4,"DomainCreationError",2551],[4,"Expr",458],[8,"Zero",3257],[8,"One",3257],[8,"Neg",3258],[8,"PartialEq",3252],[8,"Copy",3251],[3,"Variable",458],[3,"CacheId",458],[4,"Op2",458],[4,"FeatureFlag",458],[3,"RowOffset",458],[4,"PolishToken",458],[3,"Linearization",458],[8,"Ord",3252],[3,"ArgumentData",117],[4,"ExprError",458],[8,"GenericColumn",458],[8,"ColumnEvaluations",458],[8,"ColumnEnvironment",458],[15,"i64"],[3,"Environment",458],[3,"HashSet",3259],[8,"Fn",3260],[8,"PartialOrd",3252],[4,"CircuitGateError",966],[6,"GateWires",2376],[4,"FFOps",1872],[3,"BigUint",3261],[4,"GenericGateSpec",1959],[4,"RotMode",2163],[3,"Circuit",966],[4,"LookupPattern",1285],[3,"ProverIndex",2894],[8,"KimchiCurve",2544],[8,"OpenProof",3262],[6,"CircuitGateResult",966],[6,"Result",3263],[8,"Write",3264],[3,"LookupInfo",1285],[4,"ProverError",2551],[8,"Rng",3265],[3,"LookupConfiguration",1179],[8,"CanonicalSerialize",3266],[8,"CanonicalDeserialize",3266],[3,"LookupSelectors",1207],[3,"LookupConstraintSystem",1207],[4,"LookupError",1207],[6,"JointLookupSpec",1285],[3,"LookupPatterns",1285],[3,"LookupFeatures",1285],[3,"LocalPosition",1285],[3,"SingleLookup",1285],[4,"LookupTableID",1285],[3,"JointLookup",1285],[3,"LookupPatternIter",1285],[6,"JointLookupValue",1285],[8,"From",3267],[8,"Mul",3258],[3,"IterBridge",3268],[4,"GateLookupTable",1587],[3,"RuntimeTableSpec",1521],[3,"RuntimeTable",1521],[15,"i32"],[3,"PolyComm",3269],[8,"CommitmentCurve",3269],[8,"DoubleEndedIterator",3270],[3,"WitnessEvals",1648],[3,"WitnessShifts",1648],[3,"LookupEvals",1648],[3,"LookupShifts",1648],[3,"LookupPolys",1648],[3,"Global",3271],[3,"CompleteAdd",1780],[3,"EndomulScalar",1798],[3,"EndosclMul",1817],[3,"EndoMulResult",1817],[3,"ForeignFieldAdd",1854],[3,"ForeignFieldMul",1899],[3,"ExternalChecks",1927],[3,"Generic",1959],[3,"KeccakRound",2020],[3,"KeccakSponge",2020],[3,"Shifts",2059],[3,"Poseidon",2080],[3,"ArithmeticSpongeParams",3272],[3,"RangeCheck0",2108],[3,"RangeCheck1",2108],[3,"ForeignElement",3273],[15,"str"],[8,"WitnessCell",2413],[3,"Box",3274],[3,"Rot64",2163],[3,"CairoProgram",3275],[3,"VarbaseMul",2278],[3,"VarbaseMulResult",2278],[3,"Xor16",2325],[3,"RandomOracles",2347],[3,"Wire",2376],[8,"Read",3264],[3,"ConstantCell",2413],[3,"CopyBitsCell",2413],[3,"CopyCell",2413],[3,"CopyShiftCell",2413],[3,"IndexCell",2413],[3,"VariableBitsCell",2413],[3,"VariableCell",2413],[3,"Variables",2413],[4,"VerifyError",2551],[4,"VerifierIndexError",2551],[3,"LagrangeBasisEvaluations",2673],[8,"EvaluationDomain",3276],[3,"ScalarChallenge",3277],[3,"SRS",3278],[3,"LookupCommitments",2724],[8,"AffineCurve",3279],[3,"ProverCommitments",2724],[3,"RecursionChallenge",2724],[3,"VerifierIndex",3153],[3,"OraclesResult",2692],[6,"Result",3131],[8,"FqSponge",3280],[8,"RngCore",3281],[8,"CryptoRng",3281],[8,"FnMut",3260],[3,"OrderedHashSet",2937],[8,"Eq",3252],[3,"Constants",2956],[3,"SnarkyConstraintSystem",2976],[4,"BasicSnarkyConstraint",2976],[8,"SnarkyCvar",2976],[4,"KimchiConstraint",2976],[3,"Context",3131],[3,"LookupVerifierIndex",3153],[3,"Path",3282],[8,"Argument",117],[8,"DynArgument",117],[13,"Custom",406],[3,"LookupEnvironment",458],[13,"Mds",936],[13,"Mds",938],[8,"Connect",966],[13,"CopyConstraint",1171],[13,"LookupTableTooLong",1283],[13,"Add",2004],[13,"Mul",2004],[3,"Claim",2204],[3,"Instruction",2204],[3,"Flags",2204],[3,"Transition",2204],[3,"Layout",2278],[8,"Wirable",2376],[8,"FrSponge",2715],[3,"EndoscaleScalarRound",2976],[3,"ScaleRound",2976],[3,"EndoscaleRound",2976],[13,"Basic",3111],[13,"EcAddComplete",3111],[13,"EcEndoscale",3111],[13,"Poseidon",3111],[13,"EcScale",3111],[13,"EcEndoscalar",3111]]},\
"kimchi_optimism":{"doc":"","t":"AAANNNRRDDDNRRRRRDDDDDDEDDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLMLLLLLLLLLLLLMMMMMMMMMMMMMMMLLMMMMMFMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAANNNNNNNNNNNNNNRRRRRRRNEDEINEDNNNNNNNNNNNNNNNNNNNNNNNNNEDNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRDLLLLLLLLLLLMMLLLLLMLLLLLLDRRRRRDLLLLLLLLLLLLLLLLLLLMMLLMMLLMMMMMMMMMMMLLMLLLLLLLLLNNENDDDLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLMMMLLLLLLLLLLLLLLLLLLM","n":["cannon","mips","preimage_oracle","Always","Every","Exactly","HINT_CLIENT_READ_FD","HINT_CLIENT_WRITE_FD","Hint","HostProgram","Meta","Never","PAGE_ADDRESS_MASK","PAGE_ADDRESS_SIZE","PAGE_SIZE","PREIMAGE_CLIENT_READ_FD","PREIMAGE_CLIENT_WRITE_FD","Page","ParsePreimageKeyError","Preimage","PreimageKey","Start","State","StepFrequency","Symbol","VmConfiguration","arguments","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","create","create","create","data","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","exited","find_address_symbol","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get","heap","hi","host","index","info_at","init","init","init","init","init","init","init","init","init","init","init","init","input_state_file","into","into","into","into","into","into","into","into","into","into","into","into","last_hint","lo","memory","metadata_file","name","name","next_pc","output_state_file","pc","pprof_cpu","preimage_key","preimage_offset","proof_at","proof_fmt","registers","serialize","serialize","size","snapshot_fmt","start","step","step","step_frequency_parser","stop_at","symbols","time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","interpreter","registers","witness","Add","AddImmediate","AddImmediateUnsigned","AddUnsigned","And","AndImmediate","BranchEq","BranchGtZero","BranchLeqZero","BranchNeq","CountLeadingOnes","CountLeadingZeros","Div","DivUnsigned","FD_HINT_READ","FD_HINT_WRITE","FD_PREIMAGE_READ","FD_PREIMAGE_WRITE","FD_STDERR","FD_STDIN","FD_STDOUT","IType","ITypeInstruction","ITypeInstructionIter","Instruction","InterpreterEnv","JType","JTypeInstruction","JTypeInstructionIter","Jump","JumpAndLink","JumpAndLinkRegister","JumpRegister","Load16","Load16Unsigned","Load32","Load8","Load8Unsigned","LoadUpperImmediate","LoadWordLeft","LoadWordRight","MoveFromHi","MoveFromLo","MoveNonZero","MoveToHi","MoveToLo","MoveZero","Multiply","MultiplyToRegister","MultiplyUnsigned","Nor","Or","OrImmediate","RType","RTypeInstruction","RTypeInstructionIter","SetLessThan","SetLessThanImmediate","SetLessThanImmediateUnsigned","SetLessThanUnsigned","ShiftLeftLogical","ShiftLeftLogicalVariable","ShiftRightArithmetic","ShiftRightArithmeticVariable","ShiftRightLogical","ShiftRightLogicalVariable","Store16","Store32","Store8","StoreWordLeft","StoreWordRight","Sub","SubUnsigned","Sync","SyscallExitGroup","SyscallFcntl","SyscallMmap","SyscallOther","SyscallReadOther","SyscallReadPreimage","SyscallWriteHint","SyscallWriteOther","SyscallWritePreimage","Variable","Xor","XorImmediate","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","constant","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","init","init","init","init","init","init","init","interpret_instruction","interpret_itype","interpret_jtype","interpret_rtype","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","iter","iter","iter","len","len","len","next","next","next","next_back","next_back","next_back","nth","nth","nth","par_bridge","par_bridge","par_bridge","set_halted","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","NUM_REGISTERS","Registers","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","drop","fmt","from","general_purpose","hi","index","index_mut","init","into","iter","lo","serialize","to_owned","try_from","try_into","type_id","vzip","Env","NUM_DECODING_LOOKUP_TERMS","NUM_GLOBAL_LOOKUP_TERMS","NUM_INSTRUCTION_LOOKUP_TERMS","NUM_LOOKUP_TERMS","SCRATCH_SIZE","SyscallEnv","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","constant","create","create","decode_instruction","deref","deref","deref_mut","deref_mut","drop","drop","from","from","get_memory_direct","halt","heap","init","init","instruction_counter","instruction_pointer","into","into","last_hint","memory","memory_write_index","next_instruction_pointer","preimage_key","preimage_offset","preimage_oracle","registers","registers_write_index","scratch_state","scratch_state_idx","set_halted","step","syscall_env","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Global","Keccak","Key","Local","PreImageOracle","RW","ReadWrite","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cmd","contents","create","create","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","from","from","from","from","get_preimage","hint","hint_read","hint_write","init","init","init","init","into","into","into","into","preimage_read","preimage_write","reader","start","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","writer"],"q":[[0,"kimchi_optimism"],[3,"kimchi_optimism::cannon"],[251,"kimchi_optimism::mips"],[254,"kimchi_optimism::mips::interpreter"],[487,"kimchi_optimism::mips::registers"],[514,"kimchi_optimism::mips::witness"],[571,"kimchi_optimism::preimage_oracle"],[640,"alloc::vec"],[641,"core::result"],[642,"serde::de"],[643,"alloc::string"],[644,"core::option"],[645,"core::fmt"],[646,"core::fmt"],[647,"core::any"],[648,"rayon::iter::par_bridge"],[649,"core::clone"],[650,"core::default"],[651,"serde::de"],[652,"serde::ser"],[653,"std::process"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over the variants of Self","","","","","An iterator over the variants of Self","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over the variants of Self","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,10,11,13,16,17,19,1,2,3,4,5,6,10,11,13,16,17,19,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,10,11,4,13,10,11,13,16,17,19,1,2,3,4,5,6,10,11,13,16,17,19,1,2,3,4,5,6,13,16,5,6,10,11,13,16,17,19,1,2,3,4,5,6,17,19,1,5,6,17,16,6,13,16,17,19,1,2,3,4,5,6,10,11,13,16,17,19,1,2,3,4,5,6,19,10,11,16,16,3,13,3,10,11,13,16,17,19,1,2,3,4,5,6,3,10,11,13,16,17,19,1,2,3,4,5,6,16,16,16,3,2,5,16,3,16,3,16,16,3,3,16,13,16,5,3,5,16,4,0,3,6,4,1,2,3,4,5,6,16,10,11,13,16,17,19,1,2,3,4,5,6,10,11,13,16,17,19,1,2,3,4,5,6,10,11,13,16,17,19,1,2,3,4,5,6,10,11,13,16,17,19,1,2,3,4,5,6,0,0,0,29,33,33,29,29,33,33,33,33,33,29,29,29,29,0,0,0,0,0,0,0,28,0,0,0,0,28,0,0,31,31,29,29,33,33,33,33,33,33,33,33,29,29,29,29,29,29,29,29,29,29,29,33,28,0,0,29,33,33,29,29,29,29,29,29,29,33,33,33,33,33,29,29,29,29,29,29,29,29,29,29,29,29,35,29,33,28,29,30,31,32,33,34,28,29,30,31,32,33,34,28,29,30,31,32,33,34,28,29,30,31,32,33,34,35,28,29,30,31,32,33,34,28,29,30,31,32,33,34,28,29,30,31,32,33,34,28,29,31,33,28,29,31,33,28,29,31,33,28,29,30,31,32,33,34,28,29,30,31,32,33,34,0,0,0,0,28,29,30,31,32,33,34,30,32,34,29,31,33,30,32,34,30,32,34,30,32,34,30,32,34,30,32,34,35,30,32,34,28,29,30,31,32,33,34,28,29,30,31,32,33,34,28,29,30,31,32,33,34,28,29,30,31,32,33,34,28,29,30,31,32,33,34,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,0,0,0,0,0,46,44,46,44,44,44,46,46,44,46,46,44,46,44,46,44,46,44,46,46,44,46,44,46,46,46,44,44,46,46,46,44,44,46,46,46,46,46,46,46,46,44,46,44,46,44,46,44,46,44,48,48,0,48,0,0,0,48,45,52,50,48,45,52,50,45,48,45,50,48,45,52,50,48,45,52,50,48,45,52,50,48,45,52,50,45,45,45,45,48,45,52,50,48,45,52,50,45,45,52,45,48,45,52,50,48,45,52,50,48,48,45,52,50,48,45,52,50,52],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[[9,[8]]],10],[[[9,[8]]],11],[12,4],0,[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[-1,[[14,[13]]],15],[-1,[[14,[16]]],15],[-1,[[14,[5]]],15],[-1,[[14,[6]]],15],[12,7],[12,7],[12,7],[12,7],[12,7],[12,7],[12,7],[12,7],[12,7],[12,7],[12,7],[12,7],[[17,17],18],[[19,19],18],[[1,1],18],[[5,5],18],[[6,6],18],[[-1,-2],18,[],[]],0,[[6,20],[[22,[21]]]],[[13,23],24],[[16,23],24],[[17,23],24],[[19,23],24],[[1,23],24],[[2,23],24],[[3,23],24],[[4,23],24],[[5,23],24],[[6,23],24],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[25,[[14,[19]]]],[10,[[9,[8]]]],[11,[[9,[8]]]],0,0,0,0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[13,-1],14,26],[[16,-1],14,26],0,0,0,0,0,[25,[[14,[1,21]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[16,21],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[20],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,7],[12,7],[12,7],[12,7],[12,7],[12,7],[12,7],[[28,28],18],[[29,29],18],[[31,31],18],[[33,33],18],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[28,23],24],[[29,23],24],[[31,23],24],[[33,23],24],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[-1,28],7,35],[[-1,33],7,35],[[-1,31],7,35],[[-1,29],7,35],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],30],[[],32],[[],34],[30,12],[32,12],[34,12],[30,22],[32,22],[34,22],[30,22],[32,22],[34,22],[[30,12],22],[[32,12],22],[[34,12],22],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,7,[]],[30,[[7,[12,[22,[12]]]]]],[32,[[7,[12,[22,[12]]]]]],[34,[[7,[12,[22,[12]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1]]],[[37,[-1]]],38],[[-1,-2],7,[],[]],[[],[[37,[-1]]],39],[12,-1,[]],[12,-1,[]],[-1,[[14,[[37,[-2]]]]],15,40],[12,7],[[[37,[-1]],23],24,41],[-1,-1,[]],0,0,[[[37,[-1]],12],[],38],[[[37,[-1]],12],[],38],[[],12],[-1,-2,[],[]],[[[37,[-1]]],[[0,[42]]],[]],0,[[[37,[-1]],-2],14,43,26],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[44,44],[[-1,-2],7,[],[]],[20],[[12,16,45],[[46,[-1]]],47],[16,44],[[[46,[-1]]],28,47],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,7],[12,7],[-1,-1,[]],[-1,-1,[]],[[[46,[-1]],20],8,47],0,0,[[],12],[[],12],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[[46,[-1]]],7,47],[[[46,[-1]],3,6,4],7,47],0,[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[48,[[49,[8]]]],[[[22,[2]]],45],[[],[[22,[50]]]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,7],[12,7],[12,7],[12,7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[45,48],10],[[45,11],7],0,0,[[],12],[[],12],[[],12],[[],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[45,51],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[48,8],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0],"c":[],"p":[[4,"StepFrequency",3],[3,"HostProgram",3],[3,"VmConfiguration",3],[3,"Start",3],[3,"Symbol",3],[3,"Meta",3],[15,"tuple"],[15,"u8"],[3,"Vec",640],[3,"Preimage",3],[3,"Hint",3],[15,"usize"],[3,"Page",3],[4,"Result",641],[8,"Deserializer",642],[3,"State",3],[3,"ParsePreimageKeyError",3],[15,"bool"],[3,"PreimageKey",3],[15,"u32"],[3,"String",643],[4,"Option",644],[3,"Formatter",645],[6,"Result",645],[15,"str"],[8,"Serializer",646],[3,"TypeId",647],[4,"Instruction",254],[4,"RTypeInstruction",254],[3,"RTypeInstructionIter",254],[4,"JTypeInstruction",254],[3,"JTypeInstructionIter",254],[4,"ITypeInstruction",254],[3,"ITypeInstructionIter",254],[8,"InterpreterEnv",254],[3,"IterBridge",648],[3,"Registers",487],[8,"Clone",649],[8,"Default",650],[8,"Deserialize",642],[8,"Debug",645],[8,"Iterator",651],[8,"Serialize",646],[3,"SyscallEnv",514],[3,"PreImageOracle",571],[3,"Env",514],[8,"Field",652],[4,"Key",571],[15,"array"],[3,"RW",571],[3,"Child",653],[3,"ReadWrite",571]]},\
"kimchi_visu":{"doc":"Implements a tool to visualize a circuit as an HTML page.","t":"CFFADLLLLLLLLLLLLLLLLL","n":["Witness","latex_constraints","visu","witness","Witness","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","from","init","inner","into","new","serialize","try_from","try_into","type_id","vzip"],"q":[[0,"kimchi_visu"],[4,"kimchi_visu::witness"],[22,"alloc::string"],[23,"alloc::vec"],[24,"std::collections::hash::map"],[25,"poly_commitment::evaluation_proof"],[26,"kimchi::prover_index"],[27,"core::option"],[28,"kimchi::curve"],[29,"core::fmt"],[30,"core::fmt"],[31,"core::fmt"],[32,"serde::ser"],[33,"core::any"]],"d":["","","Produces a <code>circuit.html</code> in the current folder.","","The type that represents the execution trace. It …","","","","","","","Returns the argument unchanged.","","","Returns the inner witness.","Calls <code>U::from(self)</code>.","Creates a new witness with <code>rows</code> rows.","","","","",""],"i":[0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],"f":[0,[[],[[4,[1,[3,[[3,[2]]]]]]]],[[[6,[-1,[5,[-1]]]],[8,[7]]],9,10],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[11,-1,[]],[11,-1,[]],[11,9],[[[7,[-1]],12],13,[14,15]],[-1,-1,[]],[[[16,[[3,[-1]]]]],[[7,[-1]]],14],[[],11],[[[7,[-1]]],[[16,[[3,[-1]]]]],14],[-1,-2,[],[]],[11,[[7,[-1]]],14],[[[7,[-1]],-2],17,14,18],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,19,[]],[-1,-2,[],[]]],"c":[],"p":[[15,"str"],[3,"String",22],[3,"Vec",23],[3,"HashMap",24],[3,"OpeningProof",25],[3,"ProverIndex",26],[3,"Witness",4],[4,"Option",27],[15,"tuple"],[8,"KimchiCurve",28],[15,"usize"],[3,"Formatter",29],[6,"Result",29],[8,"Field",30],[8,"Debug",29],[15,"array"],[4,"Result",31],[8,"Serializer",32],[3,"TypeId",33]]},\
"mina_book":{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"mina_curves":{"doc":"","t":"ACCCCCCCCAAAARRGDGDGLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLMMMMMMMRRGDGGDLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLMMMMMMMAAGDLLLLLLLLLLLLGDLLLLLLLLLLLL","n":["pasta","Fp","Fq","Pallas","PallasParameters","ProjectivePallas","ProjectiveVesta","Vesta","VestaParameters","curves","fields","pallas","vesta","G_GENERATOR_X","G_GENERATOR_Y","LegacyPallas","LegacyPallasParameters","Pallas","PallasParameters","ProjectivePallas","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","fmt","from","from","infinity","infinity","init","init","into","into","mul_by_a","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","x","x","x","y","y","y","z","G_GENERATOR_X","G_GENERATOR_Y","LegacyVesta","LegacyVestaParameters","ProjectiveVesta","Vesta","VestaParameters","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","fmt","from","from","infinity","infinity","init","init","into","into","mul_by_a","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","x","x","x","y","y","y","z","fp","fq","Fp","FpParameters","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","Fq","FqParameters","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip"],"q":[[0,"mina_curves"],[1,"mina_curves::pasta"],[11,"mina_curves::pasta::curves"],[13,"mina_curves::pasta::curves::pallas"],[67,"mina_curves::pasta::curves::vesta"],[121,"mina_curves::pasta::fields"],[123,"mina_curves::pasta::fields::fp"],[137,"mina_curves::pasta::fields::fq"],[151,"core::fmt"],[152,"core::fmt"],[153,"core::any"]],"d":["","","","","","","","","","","","","","G_GENERATOR_X = 1","G1_GENERATOR_Y = …","","legacy curve, a copy of the normal curve to support legacy …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","G_GENERATOR_X = 1","G1_GENERATOR_Y = …","","legacy curve, a copy of the normal curve to support legacy …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,12,13,1,2,1,2,1,1,2,1,2,1,2,1,2,1,2,12,14,13,12,14,13,14,0,0,0,0,0,0,0,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,10,11,15,16,10,11,10,11,10,10,11,10,11,10,11,10,11,10,11,15,17,16,15,17,16,17,0,0,0,0,18,18,18,18,18,18,18,18,18,18,18,18,0,0,19,19,19,19,19,19,19,19,19,19,19,19],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],1],[[],2],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,3],[4,3],[[1,1],5],[[2,2],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[1,6],7],[-1,-1,[]],[-1,-1,[]],0,0,[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,10],[11,11],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],10],[[],11],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,3],[4,3],[[10,10],5],[[11,11],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[10,6],7],[-1,-1,[]],[-1,-1,[]],0,0,[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[4,-1,[]],[4,-1,[]],[4,3],[-1,-1,[]],[[],4],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[4,-1,[]],[4,-1,[]],[4,3],[-1,-1,[]],[[],4],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"PallasParameters",13],[3,"LegacyPallasParameters",13],[15,"tuple"],[15,"usize"],[15,"bool"],[3,"Formatter",151],[6,"Result",151],[4,"Result",152],[3,"TypeId",153],[3,"VestaParameters",67],[3,"LegacyVestaParameters",67],[6,"Pallas",13],[6,"LegacyPallas",13],[6,"ProjectivePallas",13],[6,"Vesta",67],[6,"LegacyVesta",67],[6,"ProjectiveVesta",67],[3,"FpParameters",123],[3,"FqParameters",137]]},\
"mina_hasher":{"doc":"Mina hasher","t":"QIGIICCCFFKKLKLKAKAKKDGGLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["D","DomainParameter","Fp","Hashable","Hasher","PoseidonHasherKimchi","PoseidonHasherLegacy","ROInput","create_kimchi","create_legacy","digest","domain_string","hash","init","init_and_hash","into_bytes","poseidon","reset","roinput","to_roinput","update","Poseidon","PoseidonHasherKimchi","PoseidonHasherLegacy","borrow","borrow_mut","deref","deref_mut","digest","drop","from","init","init","into","reset","try_from","try_into","type_id","update","vzip","ROInput","append_bool","append_bytes","append_field","append_hashable","append_roinput","append_scalar","append_u32","append_u64","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","equivalent","fmt","from","init","into","new","to_bytes","to_fields","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"mina_hasher"],[21,"mina_hasher::poseidon"],[40,"mina_hasher::roinput"],[71,"alloc::string"],[72,"core::option"],[73,"alloc::vec"],[74,"mina_poseidon::constants"],[75,"core::result"],[76,"core::any"],[77,"mina_curves::pasta::fields::fq"],[78,"core::fmt"],[79,"core::fmt"]],"d":["Generic domain string argument type","The domain parameter trait is used during hashing to …","","Interface for hashable objects","Interface for hashing <code>Hashable</code> inputs","","","","Create an experimental kimchi hasher context","Create a legacy hasher context","Obtain has result output","Generate unique domain string of length <code>&lt;= 20</code>.","Hash input and obtain result output","Set the initial state based on domain separation string …","Initialize state, hash input and obtain result output","Conversion into vector of bytes","Mina Poseidon hasher","Restore the initial state that was set most recently","Random oracle input structures and algorithms","Serialization to random oracle input","Consume hash <code>input</code>","Poseidon hasher context","Poseidon hasher type with experimental kimchi plonk sponge …","Poseidon hasher type with legacy plonk sponge constants","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","Random oracle input structure","Append a single bit","Append bytes","Append a base field element","Append a <code>Hashable</code> input","Append another random oracle input","Append a scalar field element","Append a 32-bit unsigned integer","Append a 64-bit unsigned integer","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new empty random oracle input","Serialize random oracle input to bytes","Serialize random oracle input to vector of base field …","","","","",""],"i":[2,0,0,0,0,0,0,0,0,0,7,2,7,7,7,24,0,7,0,2,7,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"f":[0,0,0,0,0,0,0,0,[[],[[1,[-1]]],2],[[],[[3,[-1]]],2],[-1,4,[]],[[],[[6,[5]]]],[[-1,-2],4,[],[]],[-1,7,[]],[[-1,-2],4,[],[]],[-1,[[9,[8]]],[]],0,[-1,7,[]],0,[-1,10,[]],[[-1,-2],7,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[11,-1,[]],[11,-1,[]],[[[12,[-1,-2]]],4,13,2],[11,14],[-1,-1,[]],[[],11],[[[12,[-1,-2]]],7,13,2],[-1,-2,[],[]],[[[12,[-1,-2]]],7,13,2],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,16,[]],[[[12,[-1,-2]],-2],7,13,2],[-1,-2,[],[]],0,[[10,17],10],[[10,[18,[8]]],10],[[10,4],10],[[10,-1],10,2],[[10,10],10],[[10,19],10],[[10,20],10],[[10,21],10],[-1,-2,[],[]],[-1,-2,[],[]],[10,10],[[-1,-2],14,[],[]],[[],10],[11,-1,[]],[11,-1,[]],[11,14],[[10,10],17],[[-1,-2],17,[],[]],[[10,22],23],[-1,-1,[]],[[],11],[-1,-2,[],[]],[[],10],[10,[[9,[8]]]],[10,[[9,[4]]]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,16,[]],[-1,-2,[],[]]],"c":[],"p":[[6,"PoseidonHasherKimchi",21],[8,"Hashable",0],[6,"PoseidonHasherLegacy",21],[6,"Fp",0],[3,"String",71],[4,"Option",72],[8,"Hasher",0],[15,"u8"],[3,"Vec",73],[3,"ROInput",40],[15,"usize"],[3,"Poseidon",21],[8,"SpongeConstants",74],[15,"tuple"],[4,"Result",75],[3,"TypeId",76],[15,"bool"],[15,"slice"],[6,"Fq",77],[15,"u32"],[15,"u64"],[3,"Formatter",78],[6,"Result",78],[8,"DomainParameter",0]]},\
"mina_poseidon":{"doc":"","t":"IKKKKKAKKAKAAAASSSSSSDDSSSILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFAAAAFFFFFFFFFNDDIENKLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMKLKLMFLMKLMLLLLLLLLLLLLLLLRDDCDLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLMMLMMLLLLLLLLLLLLLLLLLLLL","n":["FqSponge","absorb_fq","absorb_fr","absorb_g","challenge","challenge_fq","constants","digest","digest_fq","dummy_values","new","pasta","permutation","poseidon","sponge","PERM_FULL_MDS","PERM_HALF_ROUNDS_FULL","PERM_INITIAL_ARK","PERM_ROUNDS_FULL","PERM_ROUNDS_PARTIAL","PERM_SBOX","PlonkSpongeConstantsKimchi","PlonkSpongeConstantsLegacy","SPONGE_CAPACITY","SPONGE_RATE","SPONGE_WIDTH","SpongeConstants","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","kimchi_dummy","fp_kimchi","fp_legacy","fq_kimchi","fq_legacy","params","static_params","static_params","params","static_params","static_params","full_round","half_rounds","poseidon_block_cipher","Absorbed","ArithmeticSponge","ArithmeticSpongeParams","Sponge","SpongeState","Squeezed","absorb","absorb","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","constants","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","fmt","fmt","from","from","from","full_round","init","init","init","into","into","into","mds","new","new","reset","reset","round_constants","sbox","serialize","sponge_state","squeeze","squeeze","state","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","CHALLENGE_LENGTH_IN_LIMBS","DefaultFqSponge","DefaultFrSponge","FqSponge","ScalarChallenge","absorb_fq","absorb_fr","absorb_g","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","challenge","challenge_fq","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","digest","digest_fq","drop","drop","drop","endo_coefficient","fmt","from","from","from","init","init","init","into","into","into","last_squeezed","last_squeezed","new","sponge","sponge","squeeze","squeeze","squeeze_field","squeeze_limbs","to_field","to_field_with_length","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"mina_poseidon"],[15,"mina_poseidon::constants"],[57,"mina_poseidon::dummy_values"],[58,"mina_poseidon::pasta"],[62,"mina_poseidon::pasta::fp_kimchi"],[64,"mina_poseidon::pasta::fp_legacy"],[65,"mina_poseidon::pasta::fq_kimchi"],[67,"mina_poseidon::pasta::fq_legacy"],[68,"mina_poseidon::permutation"],[71,"mina_poseidon::poseidon"],[142,"mina_poseidon::sponge"],[209,"core::result"],[210,"core::any"],[211,"ark_ff::fields"],[212,"core::str::traits"],[213,"mina_curves::pasta::fields::fp"],[214,"mina_curves::pasta::fields::fq"],[215,"alloc::vec"],[216,"core::clone"],[217,"core::default"],[218,"serde::de"],[219,"core::fmt"],[220,"core::fmt"],[221,"ark_ec::models"],[222,"ark_ec::models::short_weierstrass_jacobian"],[223,"ark_ff::fields"]],"d":["","","","","","","","","","","","","The permutation module contains the function implementing …","This module implements Poseidon Hash Function primitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Placeholder dummy value for the kimchi configuration, …","","","","","","the fp sponge params","the legacy fp sponge params","","the fq sponge params","the legacy fq sponge params","","","","","","","Cryptographic sponge interface - for hashing an arbitrary …","","","Absorb an array of field elements <code>x</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new cryptographic sponge using arithmetic sponge …","","Reset the sponge back to its initial state (as if it were …","","","","","","Squeeze an output from the sponge","","","","","","","","","","","","","","","","","","","","","","A challenge which is used as a scalar on a group element …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,31,31,31,31,31,0,31,31,0,31,0,0,0,0,15,15,15,15,15,15,0,0,15,15,15,0,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,16,32,14,16,3,14,16,3,14,16,3,14,16,3,14,14,3,16,3,14,16,3,14,3,16,3,14,16,3,16,3,14,14,16,3,14,16,3,14,3,32,14,32,14,3,0,3,14,32,14,14,16,3,14,16,3,14,16,3,14,16,3,14,16,3,14,0,0,0,0,0,24,24,24,29,27,24,29,27,24,24,24,27,24,27,24,29,27,24,29,27,24,24,24,29,27,24,0,27,29,27,24,29,27,24,29,27,24,29,24,24,29,24,29,24,24,24,27,27,27,24,29,27,24,29,27,24,29,27,24,29,27,24],"f":[0,[[-1,[1,[-2]]],2,[],[]],[[-1,[1,[-2]]],2,[],[]],[[-1,[1,[-2]]],2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[[3,[-1]]],-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[5,5],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,2],[6,2],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[3,[-1]]],[9,10]],0,0,0,0,[[],[[3,[11]]]],[[],[[3,[11]]]],[[],[[3,[11]]]],[[],[[3,[12]]]],[[],[[3,[12]]]],[[],[[3,[12]]]],[[[3,[-1]],[13,[-1]],6],2,9],[[[3,[-1]],[1,[-1]]],2,9],[[[3,[-1]],[13,[-1]]],2,9],0,0,0,0,0,0,[[-1,[1,[-2]]],2,[],[]],[[[14,[-1,-2]],[1,[-1]]],2,9,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[16,16],[[[3,[-1]]],[[3,[-1]]],[17,9]],[[[14,[-1,-2]]],[[14,[-1,-2]]],[17,9],[17,15]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[3,[-1]]],[18,9]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[-1,[[7,[[3,[-2]]]]],19,9],[6,2],[6,2],[6,2],[[16,20],21],[[[3,[-1]],20],21,[22,9]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[14,[-1,-2]],6],2,9,15],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[3,[-1]]],-2,[],[]],[[[3,[-1]]],[[14,[-1,-2]]],9,15],[-1,2,[]],[[[14,[-1,-2]]],2,9,15],0,[-1,-1,9],[[[3,[-1]],-2],7,9,23],0,[-1,-2,[],[]],[[[14,[-1,-2]]],-1,9,15],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[[[24,[-1,-2]],1],2,25,15],[[[24,[-1,-2]],1],2,25,15],[[[24,[-1,-2]],[1,[[26,[-1]]]]],2,25,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[24,[-1,-2]]],[],25,15],[[[24,[-1,-2]]],[],25,15],[[[27,[-1]]],[[27,[-1]]],17],[[[24,[-1,-2]]],[[24,[-1,-2]]],[17,25],[17,15]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[[24,[-1,-2]]],[],25,15],[[[24,[-1,-2]]],[],25,15],[6,2],[6,2],[6,2],[[],-1,28],[[[27,[-1]],20],21,22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[3,[[24,[-1,-2]]],25,15],0,0,[[[29,[-1,-2]],6],-1,28,15],[[[24,[-1,-2]],6],[],25,15],[[[24,[-1,-2]]],[],25,15],[[[24,[-1,-2]],6],[[13,[30]]],25,15],[[[27,[-1]],-1],-1,28],[[[27,[-1]],6,-1],-1,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[15,"slice"],[15,"tuple"],[3,"ArithmeticSpongeParams",71],[3,"PlonkSpongeConstantsLegacy",15],[3,"PlonkSpongeConstantsKimchi",15],[15,"usize"],[4,"Result",209],[3,"TypeId",210],[8,"Field",211],[8,"FromStr",212],[6,"Fp",213],[6,"Fq",214],[3,"Vec",215],[3,"ArithmeticSponge",71],[8,"SpongeConstants",15],[4,"SpongeState",71],[8,"Clone",216],[8,"Default",217],[8,"Deserializer",218],[3,"Formatter",219],[6,"Result",219],[8,"Debug",219],[8,"Serializer",220],[3,"DefaultFqSponge",142],[8,"SWModelParameters",221],[3,"GroupAffine",222],[3,"ScalarChallenge",142],[8,"PrimeField",211],[3,"DefaultFrSponge",142],[15,"u64"],[8,"FqSponge",0],[8,"Sponge",71]]},\
"mina_signer":{"doc":"Mina signer","t":"GCGCNECGCCCINLLLLFFLLLLLMLLLAAAAKALLLLKLMMNDENNNGNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLNNNNNDNNRNNDEGNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLMDLLLLLLLLLLLLLLNRNGDENNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLMMLLLLLL","n":["BaseField","CompressedPubKey","CurvePoint","Keypair","MAINNET","NetworkId","PubKey","ScalarField","Schnorr","SecKey","Signature","Signer","TESTNET","borrow","borrow_mut","clone","clone_into","create_kimchi","create_legacy","deref","deref_mut","drop","fmt","from","infinity","init","into","into_bytes","keypair","pubkey","schnorr","seckey","sign","signature","to_owned","try_from","try_into","type_id","verify","vzip","x","y","Err","Keypair","KeypairError","NonCurvePoint","Ok","PublicKey","Result","SecretKey","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_bytes","from_hex","from_parts_unsafe","from_secret_key","get_address","init","init","into","into","public","rand","source","to_bytes","to_hex","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AddressBase58","AddressChecksum","AddressLength","AddressRawByteLength","AddressVersion","CompressedPubKey","Err","Hex","MINA_ADDRESS_LEN","NonCurvePoint","Ok","PubKey","PubKeyError","Result","SecKey","XCoordinate","XCoordinateBytes","YCoordinateBytes","YCoordinateParity","YCoordinateParityBytes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","empty","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from_address","from_address","from_bytes","from_bytes","from_hex","from_hex","from_point_unsafe","from_secret_key","from_secret_key","init","init","init","into","into","into","into_address","into_address","into_compressed","into_point","is_odd","point","to_bytes","to_bytes","to_hex","to_hex","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","x","Schnorr","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","sign","try_from","try_into","type_id","verify","vzip","Err","MINA_SEC_KEY_LEN","Ok","Result","SecKey","SecKeyError","SecretKeyBase58","SecretKeyBytes","SecretKeyChecksum","SecretKeyHex","SecretKeyLength","SecretKeyVersion","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from_base58","from_bytes","from_hex","init","init","into","into","into_scalar","new","rand","scalar","to_base58","to_bytes","to_hex","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Signature","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","fmt","fmt","from","init","into","new","rx","s","to_owned","to_string","try_from","try_into","type_id","vzip"],"q":[[0,"mina_signer"],[42,"mina_signer::keypair"],[102,"mina_signer::pubkey"],[201,"mina_signer::schnorr"],[216,"mina_signer::seckey"],[276,"mina_signer::signature"],[300,"mina_hasher"],[301,"core::fmt"],[302,"core::fmt"],[303,"core::result"],[304,"core::any"],[305,"alloc::string"],[306,"rand_core"],[307,"rand_core"],[308,"core::option"]],"d":["Base field element type","","Affine curve point type","","Id for mainnet","Mina network (or blockchain) identifier","","Scalar field element type","","","","Interface for signed objects","Id for all testnets","","","","","Create an experimental kimchi signer context with domain …","Create a legacy signer context with domain parameters …","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Keypair structures and algorithms","Public key structures and algorithms","Mina Schnorr signature scheme","Secret key structures and helpers","Sign <code>input</code> (see <code>Hashable</code>) using keypair <code>kp</code> and return the …","Mina signature structure and associated helpers","","","","","Verify that the signature <code>sig</code> on <code>input</code> (see <code>Hashable</code>) is …","","","","Contains the error value","Keypair structure","Keypair error","point not on curve","Contains the success value","Public key error","Keypair result","Invalid secret key","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Deserialize keypair from secret key bytes","Deserialize keypair from secret key hex","Create keypair from scalar field <code>secret</code> element and curve …","Create keypair from secret key","Obtain the Mina address corresponding to the keypair’s …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Public key","Generate random keypair","","Deserialize keypair into bytes","Deserialize keypair into hex","","","","","","","","","","","","","Invalid address base58","Invalid address checksum","Invalid address length","Invalid raw address bytes length","Invalid address version","Compressed public keys consist of x-coordinate and …","Contains the error value","Invalid hex","Length of Mina addresses","Invalid y-coordinate parity","Contains the success value","Public key","Public key errors","Public key Result","Invalid secret key","Invalid x-coordinate","Invalid x-coordinate bytes","Point not on curve","Invalid y-coordinate parity","Invalid y-coordinate","","","","","","","","","","","","","","","","","","","","","","The empty <code>CompressedPubKey</code> value that is used as <code>public_key</code>…","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize Mina address into public key","Deserialize Mina address into compressed public key (via …","Deserialize public key from bytes","Deserialize compressed public key from bytes","Deserialize public key from hex","Deserialize compressed public key from hex","Create public key from curve point Note: Does not check …","Create public key from a secret key","Create compressed public key from a secret key","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Serialize public key into corresponding Mina address","Serialize compressed public key into corresponding Mina …","Convert public key into compressed public key","Convert public key into curve point","Parity of y-coordinate","Borrow public key as curve point","Deserialize public key into bytes","Deserialize compressed public key into bytes","Deserialize public key into hex","Deserialize compressed public key into hex","","","","","","","","","","","","","","","","","","X-coordinate","Schnorr signer context for the Mina signature algorithm","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Contains the error value","Secret key length","Contains the success value","Keypair result","Secret key","Keypair error","Invalid base58 secret key","Invalid secret key bytes","Invalid secret key checksum","Invalid secret key hex","Invalid secrey key length","Invalid secret key version","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize base58 encoded secret key","Deserialize secret key from bytes","Deserialize secret key from hex","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert secret key into scalar field element","Create secret key from scalar field element","Generate a random secret key","Borrows secret key as scalar field element","Deserialize secret key into base58","Deserialize secret key into bytes","Deserialize secret key into hex","","","","","","","","","","","","Signature structure","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new signature","Base field component","Scalar field component","","","","","",""],"i":[0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,23,1,1,1,0,0,0,0,3,0,1,1,1,1,3,1,23,23,20,0,0,16,20,16,0,16,16,10,16,10,16,10,16,10,16,10,16,10,16,10,16,10,16,10,16,16,10,10,16,16,16,10,10,10,10,10,10,16,10,16,10,10,10,16,10,10,16,10,16,10,16,10,16,10,16,10,16,10,17,17,17,17,17,0,31,17,0,17,31,0,0,0,17,17,17,17,17,17,17,14,30,17,14,30,17,14,30,17,14,30,17,14,30,17,14,30,17,14,30,30,17,14,30,17,14,30,17,17,14,14,30,17,14,30,14,30,14,30,14,30,14,14,30,17,14,30,17,14,30,14,30,14,14,30,14,14,30,14,30,17,14,30,17,14,17,14,30,17,14,30,17,14,30,17,14,30,30,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,0,33,0,0,0,18,18,18,18,18,18,18,24,18,24,18,24,18,24,18,24,18,24,18,24,18,24,18,24,18,18,24,18,24,24,24,24,18,24,18,24,24,24,24,24,24,24,24,18,24,18,18,24,18,24,18,24,18,24,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[],[[0,[[3,[-1]]]]],4],[[],[[0,[[3,[-1]]]]],4],[5,-1,[]],[5,-1,[]],[5,2],[[1,6],7],[-1,-1,[]],0,[[],5],[-1,-2,[],[]],[1,[[9,[8]]]],0,0,0,0,[[-1,10,-2],11,[],[]],0,[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[[-1,11,14,-2],15,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[16,16],[10,10],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,2],[5,2],[[16,16],15],[[10,10],15],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[16,6],7],[[16,6],7],[[10,6],7],[[10,6],7],[-1,-1,[]],[17,16],[18,16],[-1,-1,[]],[[[19,[8]]],[[20,[10]]]],[21,[[20,[10]]]],[[22,23],10],[24,[[20,[10]]]],[10,25],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[20,[10]]],[26,27]],[16,[[29,[28]]]],[10,[[9,[8]]]],[10,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,25,[]],[-1,25,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[17,17],[14,14],[30,30],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,2],[5,2],[5,2],[[],30],[[17,17],15],[[14,14],15],[[30,30],15],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[17,6],7],[[17,6],7],[[14,6],7],[[14,6],7],[[30,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[21,[[31,[14]]]],[21,[[31,[30]]]],[[[19,[8]]],[[31,[14]]]],[[[19,[8]]],[[31,[30]]]],[21,[[31,[14]]]],[21,[[31,[30]]]],[23,14],[24,[[31,[14]]]],[24,30],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,25],[30,25],[14,30],[14,23],0,[14,23],[14,[[9,[8]]]],[30,[[9,[8]]]],[14,25],[30,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,25,[]],[-1,25,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,2],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[[32,[-1]],10,-1],11,4],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[[[32,[-1]],11,14,-1],15,4],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[18,18],[24,24],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,2],[5,2],[[18,18],15],[[24,24],15],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[18,6],7],[[18,6],7],[[24,6],7],[-1,-1,[]],[-1,-1,[]],[21,[[33,[24]]]],[[[19,[8]]],[[33,[24]]]],[21,[[33,[24]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[24,22],[22,24],[-1,24,[26,27]],[24,22],[24,25],[24,[[9,[8]]]],[24,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,25,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[11,11],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,2],[[11,11],15],[[-1,-2],15,[],[]],[[11,6],7],[[11,6],7],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[34,22],11],0,0,[-1,-2,[],[]],[-1,25,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,-2,[],[]]],"c":[],"p":[[4,"NetworkId",0],[15,"tuple"],[8,"Signer",0],[8,"Hashable",300],[15,"usize"],[3,"Formatter",301],[6,"Result",301],[15,"u8"],[3,"Vec",302],[3,"Keypair",42],[3,"Signature",276],[4,"Result",303],[3,"TypeId",304],[3,"PubKey",102],[15,"bool"],[4,"KeypairError",42],[4,"PubKeyError",102],[4,"SecKeyError",216],[15,"slice"],[6,"Result",42],[15,"str"],[6,"ScalarField",0],[6,"CurvePoint",0],[3,"SecKey",216],[3,"String",305],[8,"RngCore",306],[8,"CryptoRng",306],[8,"Error",307],[4,"Option",308],[3,"CompressedPubKey",102],[6,"Result",102],[3,"Schnorr",201],[6,"Result",216],[6,"BaseField",0]]},\
"o1_utils":{"doc":"A collection of utility functions and constants that can …","t":"CCCCCCCCCCCAAAAAAAAAAAADLLLLLLLLLLLLLLLLIKKIKKKDLLMLLLLLLLLLLMLLLLLDLLLLLLLLLLMMLLLLIKKKKIKKKKINNNNIENNIGIKLLLLLLLLLLLLLKKKKKFLLLLLKKKKLLLLKKLLRIIIIIIDIRRRRRRKLLLLKKLLLLLLLLLLLLLLMKLKLLLKKKKKLKKLLLKKKKFKKLLLISLFFDLLLLLLLLLALLLLLFF","n":["BigUintFieldHelpers","BigUintHelpers","BitwiseOps","ChunkedEvaluations","ExtendedDensePolynomial","ExtendedEvaluations","FieldHelpers","ForeignElement","LIMB_COUNT","RandomField","Two","adjacent_pairs","biguint_helpers","bitwise_operations","chunked_evaluations","chunked_polynomial","dense_polynomial","evaluations","field_helpers","foreign_field","hasher","math","serialization","AdjacentPairs","borrow","borrow_mut","deref","deref_mut","drop","from","from","from","init","into","into_iter","next","try_from","try_into","type_id","vzip","BigUintHelpers","bitlen","from_hex","BitwiseOps","bitwise_and","bitwise_not","bitwise_xor","ChunkedEvaluations","borrow","borrow_mut","chunks","clone","clone_into","deref","deref_mut","deserialize","drop","from","init","into","serialize","size","to_owned","try_from","try_into","type_id","vzip","ChunkedPolynomial","borrow","borrow_mut","deref","deref_mut","drop","evaluate_chunks","from","init","into","linearize","polys","size","try_from","try_into","type_id","vzip","ExtendedDensePolynomial","eval_polynomial","scale","shiftr","to_chunked_polynomial","ExtendedEvaluations","pow","scale","shift","square","BigUintFieldHelpers","DecodeHex","DeserializeBits","DeserializeBytes","Err","FieldHelpers","FieldHelpersError","FromBigToField","Ok","RandomField","Result","Two","bits_to_field","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","fmt","fmt","from","from_biguint","from_bits","from_bytes","from_hex","gen","gen_field_with_bits","i32_to_field","init","into","modulus_biguint","size_in_bytes","to_biguint","to_bits","to_bytes","to_field","to_hex","to_owned","to_string","try_from","try_into","two","two_pow","type_id","vzip","BINARY_MODULUS_EXP","BigUintArrayCompose","BigUintArrayFieldHelpers","BigUintForeignFieldHelpers","FieldArrayBigUintHelpers","FieldArrayCompact","FieldArrayCompose","ForeignElement","ForeignFieldHelpers","HI","LIMB_BITS","LIMB_COUNT","LO","MI","TWO_TO_LIMB","binary_modulus","borrow","borrow_mut","clone","clone_into","compose","compose","deref","deref_mut","drop","eq","equivalent","fmt","from","from_be","from_biguint","from_field","index","index_mut","init","into","limbs","max_foreign_field_modulus","neg","negate","new","to_biguint","to_biguints","to_compact_field_limbs","to_compact_limbs","to_compact_limbs","to_field_limbs","to_field_limbs","to_fields","to_limbs","to_limbs","to_owned","try_from","try_into","two","two_to_2limb","two_to_2limb","two_to_3limb","two_to_limb","two_to_limb","two_to_limb","type_id","vzip","zero","CryptoDigest","PREFIX","digest","ceil_log2","div_ceil","SerdeAs","borrow","borrow_mut","deref","deref_mut","deserialize_as","drop","from","init","into","ser","serialize_as","try_from","try_into","type_id","vzip","deserialize","serialize"],"q":[[0,"o1_utils"],[23,"o1_utils::adjacent_pairs"],[40,"o1_utils::biguint_helpers"],[43,"o1_utils::bitwise_operations"],[47,"o1_utils::chunked_evaluations"],[67,"o1_utils::chunked_polynomial"],[84,"o1_utils::dense_polynomial"],[89,"o1_utils::evaluations"],[94,"o1_utils::field_helpers"],[143,"o1_utils::foreign_field"],[207,"o1_utils::hasher"],[210,"o1_utils::math"],[212,"o1_utils::serialization"],[228,"o1_utils::serialization::ser"],[230,"core::iter::traits::collect"],[231,"core::iter::traits::iterator"],[232,"core::option"],[233,"core::marker"],[234,"core::result"],[235,"core::any"],[236,"ark_ff::fields"],[237,"core::clone"],[238,"serde::de"],[239,"serde::ser"],[240,"alloc::vec"],[241,"ark_ff::fields"],[242,"core::fmt"],[243,"core::fmt"],[244,"core::convert"],[245,"core::ops::arith"],[246,"alloc::string"],[247,"core::cmp"],[248,"ark_serialize"],[249,"ark_serialize"]],"d":["","","","","","","","","","","","This module hosts the AdjacentPairs type, which can be …","This module provides a set of functions to perform bit …","This module provides a set of functions to perform bit …","This module contains a type ChunkedEvaluations,","This module contains a type ChunkedPolynomial, and a …","This adds a few utility functions for the DensePolynomial …","This adds a few utility functions for the Evaluations …","Useful helper methods to extend ark_ff::Field.","Describes helpers for foreign field arithmetics","This module provides the CryptoDigest trait, which …","This modules implements some math helper functions.","This adds a few utility functions for serializing and …","You can create a new AdjacentPairs from an iterator using:","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Helpers for BigUint","Returns the minimum number of bits required to represent a …","Creates a BigUint from an hexadecimal string in big endian","Bitwise operations","Conjunction of the bits of two BigUint inputs for a given …","Negate the bits of a Self input If it provides a larger …","Bitwise XOR of two BigUint inputs","This struct contains multiple chunk evaluations.","","","The chunk evaluations.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Each chunk polynomial has degree <code>size-1</code>.","","","","","","This struct contains multiple chunk polynomials with …","","","","","","This function evaluates polynomial in chunks.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Multiplies the chunks of a polynomial with powers of …","The chunk polynomials.","Each chunk polynomial has degree <code>size-1</code>.","","","","","An extension for the DensePolynomial type.","<code>eval_polynomial(coeffs, x)</code> evaluates a polynomial given …","This function “scales” (multiplies all the …","Shifts all the coefficients to the right.","Convert a polynomial into chunks. Implementors must ensure …","An extension for the Evaluations type.","Raise each evaluation to some power <code>pow</code>","This function “scales” (multiplies) a polynomial with …","Utility function for shifting poly along domain coordinate","Square each evaluation","Field element wrapper for BigUint","","","","Contains the error value","Field element helpers Unless otherwise stated everything …","Field helpers error","","Contains the success value","Helper to generate random field elements","Result alias using FieldHelpersError","Helper to obtain two","Create a new field element from this field elements bits","","","","","","","","","","","","Returns the argument unchanged.","Deserialize from BigUint","Deserialize from bits","Deserialize from bytes","Deserialize from little-endian hex","Initialize a random input with a random value of given …","Generates a random field element of up to a given number …","Converts an i32 into a Field","","Calls <code>U::from(self)</code>.","Get the modulus as <code>BigUint</code>","Field size in bytes","Serialize field element to a BigUint","Serialize to bits","Serialize to bytes","Convert BigUint into PrimeField element","Serialize to hex","","","","","Value two","Power of two","","","Exponent of binary modulus (i.e. t)","BigUint array compose helper","BigUint array PrimeField helpers","Foreign field helpers","PrimeField array BigUint helpers","PrimeField array compact limbs","PrimeField array compose BigUint","Represents a foreign field element Represents a foreign …","Foreign field helpers","Index of high limb (in 3-limb foreign elements)","Limb length for foreign field elements","Number of desired limbs for foreign field elements","Index of low limb (in 3-limb foreign elements)","Index of middle limb (in 3-limb foreign elements)","Two to the power of the limb length","2^t","","","","","Compose field limbs into BigUint","Compose limbs into BigUint","","","","","","","Returns the argument unchanged.","Initializes a new foreign element from a set of bytes in …","Initializes a new foreign element from a big unsigned …","Initializes a new foreign element from an element in the …","","","","Calls <code>U::from(self)</code>.","limbs in little endian order","2^259 (see foreign field multiplication RFC)","Initializes a new foreign element from an absolute <code>BigUint</code> …","Negate: 2^T - self","Creates a new foreign element from an array containing N …","Obtains the big integer representation of the foreign …","Alias for to_limbs","Convert to 2 PrimeField limbs of 2 * LIMB_BITS each. The …","Convert to 2 limbs of 2 * LIMB_BITS each. The compressed …","Compose field limbs into BigUint","Convert to 3 PrimeField limbs of LIMB_BITS each","Convert limbs from BigUint to field element","Alias for to_field_limbs","Convert to 3 limbs of LIMB_BITS each","Convert limbs from field elements to BigUint","","","","2","2^{2 * LIMB_BITS}","2^{2 * LIMB_SIZE}","2^{3 * LIMB_BITS}","Two to the power of the limb length","2^{LIMB_BITS}","2^{LIMB_SIZE}","","","Creates a new foreign element representing the value zero","This trait can be implemented on any type that implements …","The domain separation string to use in the hash. This is …","Returns the digest of <code>self</code>. Note: this is implemented as …","Returns ceil(log2(d)) but panics if d = 0.","This function is bound to be stable soon. See …","You can use SerdeAs with serde_with in order to serialize …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","You can use this module for serialization and …","","","","","","You can use this to deserialize an arkworks type with …","You can use this to serialize an arkworks type with serde …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,39,39,0,40,40,40,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,41,41,41,41,0,42,42,42,42,0,23,23,23,22,0,0,23,22,0,0,0,43,23,23,23,23,23,23,23,23,23,23,23,23,43,43,43,43,44,44,0,23,23,43,43,43,43,43,45,43,23,23,23,23,46,46,23,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,34,34,34,34,48,49,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,47,34,47,34,34,50,47,47,51,47,52,52,47,50,34,34,34,47,53,47,53,0,53,47,34,34,34,0,54,54,0,0,0,55,55,55,55,55,55,55,55,55,0,55,55,55,55,55,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[1,2],[-1,[[3,[-2,-3]]],4,[],5],[6,-1,[]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[-1,-2]]],[[7,[[2,[-1,-1]]]]],8,5],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,[-1,1,[]],[11,-1,[]],0,[[-1,-1,1],-1,[]],[[-1,[7,[1]]],-1,[]],[[-1,-1],-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[[12,[-1]]],[[12,[-1]]],[13,14]],[[-1,-2],2,[],[]],[1,-1,[]],[1,-1,[]],[-1,[[9,[[12,[-2]]]]],15,13],[1,2],[-1,-1,[]],[[],1],[-1,-2,[],[]],[[[12,[-1]],-2],9,13,16],0,[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[1,2],[[[17,[-1]],-1],[[18,[-1]]],19],[-1,-1,[]],[[],1],[-1,-2,[],[]],[[[17,[-1]],-1],[[20,[-1]]],19],0,0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,[[[21,[-1]],-1],-1,[]],[[-1,-2],-1,[],[]],[[-1,1],-1,[]],[[-1,1,1],[[17,[-2]]],[],[]],0,[[-1,1],-1,[]],[[-1,-2],-1,[],[]],[[-1,1],-1,[]],[-1,-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1,1],[[22,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[23,23],[[-1,-2],2,[],[]],[1,-1,[]],[1,-1,[]],[1,2],[[23,23],24],[[-1,-2],24,[],[]],[[23,25],26],[[23,25],26],[-1,-1,[]],[27,[[22,[-1]]],13],[[[21,[24]]],[[22,[-1]]],[]],[[[21,[28]]],[[22,[-1]]],[]],[11,[[22,[-1]]],[]],[[-1,[7,[-2]],[7,[1]]],-2,[],[]],[[-1,1],-2,[],[]],[29,-1,[[31,[30]],32]],[[],1],[-1,-2,[],[]],[[],27],[[],1],[-1,27,[]],[-1,[[18,[24]]],[]],[-1,[[18,[28]]],[]],[-1,[[22,[-2]]],[],13],[-1,33,[]],[-1,-2,[],[]],[-1,33,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[[],-1,[]],[30,-1,[]],[-1,10,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[34,[-1]]],[[34,[-1]]],[14,19]],[[-1,-2],2,[],[]],[-1,27,[]],[-1,27,[]],[1,-1,[]],[1,-1,[]],[1,2],[[[34,[-1]],[34,[-1]]],24,[35,19]],[[-1,-2],24,[],[]],[[[34,[-1]],25],26,19],[-1,-1,[]],[[[21,[28]]],[[34,[-1]]],19],[27,[[34,[-1]]],19],[-1,[[34,[-1]]],13],[[[34,[-1]],1],[],19],[[[34,[-1]],1],[],19],[[],1],[-1,-2,[],[]],0,[[],-1,[]],[[[34,[-1]],27],[[34,[-1]]],19],[-1,27,[]],[[[36,[-1]]],[[34,[-1]]],19],[[[34,[-1]]],27,19],[-1,[[36,[27]]],[]],[-1,[[36,[-2]]],[],19],[-1,[[36,[27]]],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],19],[-1,[[36,[-2]]],[],19],[-1,[[36,[-2]]],[],19],[-1,[[36,[27]]],[]],[-1,[[36,[27]]],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],27],[[],-1,[]],[[],-1,[]],[-1,10,[]],[-1,-2,[],[]],[[],[[34,[-1]]],19],0,0,[-1,[[36,[28]]],[]],[1,1],[[1,1],1],0,[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[-1,[[9,[-2]]],15,37],[1,2],[-1,-1,[]],[[],1],[-1,-2,[],[]],0,[[-1,-2],9,38,16],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],[-1,[[9,[-2]]],15,37],[[-1,-2],9,38,16]],"c":[],"p":[[15,"usize"],[15,"tuple"],[3,"AdjacentPairs",23],[8,"IntoIterator",230],[8,"Iterator",231],[15,"never"],[4,"Option",232],[8,"Copy",233],[4,"Result",234],[3,"TypeId",235],[15,"str"],[3,"ChunkedEvaluations",47],[8,"PrimeField",236],[8,"Clone",237],[8,"Deserializer",238],[8,"Serializer",239],[3,"ChunkedPolynomial",67],[3,"Vec",240],[8,"Field",236],[3,"DensePolynomial",241],[15,"slice"],[6,"Result",94],[4,"FieldHelpersError",94],[15,"bool"],[3,"Formatter",242],[6,"Result",242],[3,"BigUint",243],[15,"u8"],[15,"i32"],[15,"u64"],[8,"From",244],[8,"Neg",245],[3,"String",246],[3,"ForeignElement",143],[8,"PartialEq",247],[15,"array"],[8,"CanonicalDeserialize",248],[8,"CanonicalSerialize",248],[8,"BigUintHelpers",40],[8,"BitwiseOps",43],[8,"ExtendedDensePolynomial",84],[8,"ExtendedEvaluations",89],[8,"FieldHelpers",94],[8,"RandomField",94],[8,"BigUintFieldHelpers",94],[8,"Two",94],[8,"BigUintForeignFieldHelpers",143],[8,"FieldArrayCompose",143],[8,"BigUintArrayCompose",143],[8,"FieldArrayBigUintHelpers",143],[8,"FieldArrayCompact",143],[8,"BigUintArrayFieldHelpers",143],[8,"ForeignFieldHelpers",143],[8,"CryptoDigest",207],[3,"SerdeAs",212]]},\
"poly_commitment":{"doc":"","t":"ICIQKAKKKKAAAKLKKKAAKDDIIDQQDFLFFMLLLLLLLLLLLLLLLFFLLFMMMMLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLFLLLLLLLLLKMMFFLLLFMMFFLKFLLLLLLLLLLLLLLMLLLLLNELLLLLLLLLLLLLLLLLLDNENDLLLLLLMMLLLFLMLLLLLLLLLLLLLLLLLLLLMLLLMLLLLLLLLLLLLLLMMDDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLLMLLLLDLLLLLLLLLLLLLLLLLFLLLLMLMLLMLLLLLLLLLLLLL","n":["OpenProof","PolyComm","SRS","SRS","blinding_commitment","chunked","commit","commit_evaluations","commit_evaluations_non_hiding","commit_non_hiding","commitment","error","evaluation_proof","get_lagrange_basis","mask","mask_custom","max_poly_size","open","pairing_proof","srs","verify","BatchEvaluationProof","BlindedCommitment","CommitmentCurve","EndoCurve","Evaluation","Map","Params","PolyComm","absorb_commitment","add","b_poly","b_poly_coefficients","blinders","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk_blinding","chunk_commitment","clone","clone","clone_into","clone_into","combine","combine_commitments","combine_evaluations","combine_one","combine_one_endo","combined_inner_product","combined_inner_product","commitment","commitment","degree_bound","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","eq","equivalent","evalscale","evaluation_points","evaluations","evaluations","fmt","fmt","from","from","from","from","init","init","init","init","inner_prod","into","into","into","into","is_empty","len","map","multi_scalar_mul","new","of_coordinates","opening","polyscale","pows","product","scale","serialize","serialize","shift_scalar","shifted","sponge","squeeze_challenge","squeeze_prechallenge","sub","to_coordinates","to_group","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unshifted","vzip","vzip","vzip","vzip","zip","BlindersDontMatch","CommitmentError","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","fmt","from","init","into","to_owned","to_string","try_from","try_into","type_id","vzip","Challenges","DensePolynomial","DensePolynomialOrEvaluations","Evaluations","OpeningProof","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chal","chal_inv","challenges","clone","clone_into","combine_polys","default","delta","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","fmt","from","from","from","init","init","init","into","into","into","lr","open","prechallenges","serialize","sg","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","z1","z2","PairingProof","PairingSRS","blinding","blinding_commitment","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","commit","commit_evaluations","commit_evaluations_non_hiding","commit_non_hiding","create","create","default","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","full_srs","get_lagrange_basis","init","init","into","into","mask","mask_custom","max_poly_size","open","quotient","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verifier_srs","verify","verify","vzip","vzip","SRS","add_lagrange_basis","blinding_commitment","borrow","borrow_mut","clone","clone_into","commit","commit_evaluations","commit_evaluations_non_hiding","commit_non_hiding","create","create_trusted_setup","default","deref","deref_mut","deserialize","drop","endos","eq","equivalent","fmt","from","g","get_lagrange_basis","h","init","into","lagrange_bases","mask","mask_custom","max_degree","max_poly_size","open","prover_polynomials_to_verifier_evaluations","serialize","to_owned","try_from","try_into","type_id","verify","vzip"],"q":[[0,"poly_commitment"],[21,"poly_commitment::commitment"],[134,"poly_commitment::error"],[154,"poly_commitment::evaluation_proof"],[214,"poly_commitment::pairing_proof"],[272,"poly_commitment::srs"],[314,"ark_poly::polynomial::univariate::dense"],[315,"core::option"],[316,"rand_core"],[317,"rand_core"],[318,"ark_poly::evaluations::univariate"],[319,"alloc::vec"],[320,"core::result"],[321,"ark_poly::domain"],[322,"core::clone"],[323,"mina_poseidon"],[324,"ark_ff::fields"],[325,"ark_ff::fields"],[326,"mina_poseidon::sponge"],[327,"serde::de"],[328,"ark_serialize"],[329,"ark_serialize"],[330,"core::fmt"],[331,"core::fmt"],[332,"core::iter::traits::iterator"],[333,"serde::ser"],[334,"serde::ser"],[335,"core::marker"],[336,"alloc::string"],[337,"core::default"],[338,"ark_ec"]],"d":["","","","","Get the group element used for blinding commitments","","Commits a polynomial, potentially splitting the result in …","","","This function commits a polynomial using the SRS’ basis …","This module implements Dlog-based polynomial commitment …","","","Retrieve the precomputed Lagrange basis for the given …","Turns a non-hiding polynomial commitment into a hidding …","Same as SRS::mask except that you can pass the blinders …","The maximum polynomial degree that can be committed to","","","This module implements the Marlin structured reference …","","Contains the batch evaluation","","A useful trait extending AffineCurve for commitments. …","A trait extending CommitmentCurve for endomorphisms. …","Contains the evaluation of a polynomial commitment at a …","","","A polynomial commitment.","","","Returns (1 + chal[-1] x)(1 + chal[-2] x^2)(1 + chal[-3] …","","","","","","","","","","","Multiplies each blinding chunk of f with powers of zeta^n …","Multiplies each commitment chunk of f with powers of zeta^n","","","","","","","","Combine where x1 = one","Combine where x1 = one","Computes the linearization of the evaluations of a …","","The commitment of the polynomial being evaluated","","optional degree bound","","","","","","","","","","","","","","","","","scaling factor for polynomials","vector of evaluation points","Contains an evaluation table","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the commitment is empty.","Returns the length of the unshifted commitment.","","Performs a multi-scalar multiplication between scalars <code>elm</code> …","","","batched opening proof","scaling factor for evaluation point powers","<code>pows(d, x)</code> returns a vector containing the first <code>d</code> powers …","Returns the product of all the field elements belonging to …","","","","Inside the circuit, we have a specialized scalar …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Combine the polynomials using <code>polyscale</code>, creating a single …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","vector of rounds of L &amp; R commitments","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Compute commitments to the lagrange basis corresponding to …","","","","","","Commits a polynomial, potentially splitting the result in …","","","This function commits a polynomial using the SRS’ basis …","This function creates SRS instance for circuits with …","This function creates a trusted-setup SRS instance for …","","","","","","","","","","Returns the argument unchanged.","The vector of group elements for committing to polynomials …","","A group element used for blinding commitments","","Calls <code>U::from(self)</code>.","Commitments to Lagrange bases, per domain size","Turns a non-hiding polynomial commitment into a hidding …","Same as SRS::mask except that you can pass the blinders …","","The maximum polynomial degree that can be committed to","This function opens polynomial commitments in batch plnms: …","This function is a debugging helper.","","","","","","This function verifies batch of batched polynomial …",""],"i":[0,0,0,51,52,0,52,52,52,52,0,0,0,52,52,52,52,51,0,0,51,0,0,0,0,0,25,25,0,0,9,0,0,4,26,19,9,4,26,19,9,4,9,9,9,4,9,4,46,0,0,46,46,0,19,26,4,26,26,19,9,4,26,19,9,4,9,4,26,19,9,4,9,9,19,19,26,19,9,4,26,19,9,4,26,19,9,4,0,26,19,9,4,9,9,9,9,9,25,19,19,0,0,9,9,4,0,9,19,0,0,9,25,0,9,4,26,19,9,4,26,19,9,4,26,19,9,4,9,26,19,9,4,9,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,13,0,13,0,13,44,43,13,44,43,44,44,43,43,43,0,43,43,13,44,43,13,44,43,43,13,44,43,43,13,44,43,13,44,43,13,44,43,43,43,43,43,43,43,13,44,43,13,44,43,13,44,43,43,13,44,43,43,43,0,0,49,47,49,47,49,47,49,47,49,47,47,47,47,47,49,47,49,47,49,47,49,47,49,47,49,47,49,47,49,47,47,47,49,47,49,47,47,47,47,49,49,49,47,49,47,49,47,49,47,49,47,47,49,49,49,47,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50],"f":[0,0,0,0,[-1,-2,[],[]],0,[[-1,1,2,[3,[2]],-2],[[4,[-3]]],[],[5,6],[]],[[-1,7,[8,[7]],-2],[[4,[-3]]],[],[5,6],[]],[[-1,7,[8,[7]]],[[9,[-2]]],[],[]],[[-1,1,2,[3,[2]]],[[9,[-2]]],[],[]],0,0,0,[[-1,2],[[3,[[10,[[9,[-2]]]]]]],[],[]],[[-1,[9,[-2]],-3],[[4,[-2]]],[],[],[5,6]],[[-1,[9,[-2]],9],[[12,[[4,[-2]],11]]],[],[]],[-1,2,[]],[[[15,[[14,[[13,[-1]],[3,[2]],9]]]],15,-3,-4],-5,16,[],[17,[18,[-2]]],[5,6],[]],0,0,[[[15,[[19,[-1,-2,-3]]]],-4],20,[],[[18,[-1]]],[],[5,6]],0,0,0,0,0,0,0,0,[[-4,[9,[-2]]],14,21,17,[22,23],[[18,[-1,-2,-3]]]],[[[9,[-1]],[9,[-1]]],[[9,[-1]]],24],[[[15,[-1]],-1],-1,21],[[[15,[-1]]],[[10,[-1]]],21],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[-1]],-1],-1,21],[[[9,[-1]]],[[9,[-1]]],25],[[[9,[-1]]],[[9,[-1]]],17],[[[4,[-1]]],[[4,[-1]]],[25,17]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[[15,[-1]],[15,[-1]]],[[10,[-1]]],[]],[[[15,[[26,[-1]]]],10,[10,[-1]]],14,25],[[[10,[[26,[-1]]]]],10,25],[[[15,[-1]],[15,[-1]]],[[10,[-1]]],[]],[[[15,[-1]],[15,[-1]],27],[[10,[-1]]],[]],[[[15,[-1]],-1,-1,[15,[[14,[[10,[[10,[-1]]]],[3,[2]]]]]],2],-1,22],0,0,0,0,[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[-1,[[12,[[9,[-2]]]]],28,[29,30]],[-1,[[12,[[4,[-2]]]]],28,[25,31]],[2,14],[2,14],[2,14],[2,14],[[[9,[-1]],[9,[-1]]],20,32],[[-1,-2],20,[],[]],0,0,0,0,[[[9,[-1]],33],34,35],[[[4,[-1]],33],34,[25,35]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[[],2],[[],2],[[[15,[-1]],[15,[-1]]],-1,21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[-1]]],20,[29,30,17]],[[[9,[-1]]],2,[29,30,17]],[[[9,[-1]],-2],[[9,[-3]]],[29,30,17],36,[29,30]],[[[15,[[9,[-1]]]],15],[[9,[-1]]],24],[[[10,[-1]],[3,[-1]]],[[9,[-1]]],[]],[[],-1,[]],0,0,[[2,-1],[[10,[-1]]],21],[-1,-2,37,21],[[[9,[-1]]],[[9,[-1]]],24],[[[9,[-1]],-2],12,[29,30],38],[[[4,[-1]],-2],12,[25,39],38],[[]],0,0,[[-1,-4],-1,[22,23],21,[],[[18,[-2,-3,-1]]]],[-4,[[27,[-3]]],21,[],23,[[18,[-1,-2,-3]]]],[[[9,[-1]],[9,[-1]]],[[9,[-1]]],24],[-1,[[3,[14]]],[]],[[],-1,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[-1]],[9,[-2]]],[[3,[[9,[[14,[-1,-2]]]]]]],[41,29,30],[41,29,30]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[11,11],[[-1,-2],14,[],[]],[2,-1,[]],[2,-1,[]],[2,14],[[11,33],34],[[11,33],34],[-1,-1,[]],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,42,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,40,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[43,[-1]],-2],44,24,[[18,[-1]]]],[[[43,[-1]]],[[43,[-1]]],[17,24]],[[-1,-2],14,[],[]],[[[15,[[14,[[13,[-1]],[3,[2]],9]]]],2],[[14,[1]]],16],[[],[[43,[-1]]],[45,24]],0,[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[-1,[[12,[[43,[-2]]]]],28,[29,30,24]],[2,14],[2,14],[2,14],[[[43,[-1]],33],34,[35,24]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],2],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[15,[[14,[[13,[-1]],[3,[2]],9]]]],15,-3,-4],[[43,[-2]]],16,[24,25,46],[17,[18,[-2]]],[5,6]],[[[43,[-1]],-2],[[10,[27]]],24,[[18,[-1]]]],[[[43,[-1]],-2],12,[29,30,24],38],0,[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[[[15,[[19,[-1,-2,[43,[-1]]]]]],-3],20,[24,25,46],[[18,[-1]]],[5,6]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[[[47,[-1]]],-2,48,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[49,[-1]]],[[49,[-1]]],48],[[[47,[-1]]],[[47,[-1]]],48],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[[47,[-1]],1,2,[3,[2]],-2],[[4,[-3]]],48,[5,6],25],[[[47,[-1]],7,[8,[7]],-2],[[4,[-3]]],48,[5,6],25],[[[47,[-1]],7,[8,[7]]],[[9,[-2]]],48,25],[[[47,[-1]],1,2,[3,[2]]],[[9,[-2]]],48,25],[[[47,[-1]],[15,[[14,[[13,[-2]],[3,[2]],9]]]],15],[[3,[[49,[-1]]]]],48,16],[[-1,2],[[47,[-2]]],22,48],[[],[[49,[-1]]],48],[[],[[47,[-1]]],48],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[-1,[[12,[[49,[-2]]]]],28,48],[-1,[[12,[[47,[-2]]]]],28,48],[2,14],[2,14],[[[49,[-1]],33],34,[35,48]],[[[47,[-1]],33],34,[35,48]],[-1,-1,[]],[-1,-1,[]],0,[[[47,[-1]],2],[[3,[[10,[[9,[-2]]]]]]],48,25],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[[[47,[-1]],[9,[-2]],-3],[[4,[-2]]],48,25,[5,6]],[[[47,[-1]],[9,[-2]],9],[[12,[[4,[-2]],11]]],48,25],[[[47,[-1]]],2,48],[[[15,[[14,[[13,[-1]],[3,[2]],9]]]],15,-3,-4],[[49,[-5]]],16,25,[17,[18,[-2]]],[5,6],48],0,[[[49,[-1]],-2],12,48,38],[[[47,[-1]],-2],12,48,38],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,40,[]],[-1,40,[]],0,[[[49,[-1]],[47,[-1]],[10,[[26,[-2]]]],15],20,48,25],[[[15,[[19,[-1,-2,[49,[-3]]]]]],-4],20,25,[[18,[-1]]],48,[5,6]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[50,[-1]],7],14,25],[[[50,[-1]]],-1,25],[-1,-2,[],[]],[-1,-2,[],[]],[[[50,[-1]]],[[50,[-1]]],17],[[-1,-2],14,[],[]],[[[50,[-1]],1,2,[3,[2]],-2],[[4,[-1]]],25,[5,6]],[[[50,[-1]],7,[8,[7]],-2],[[4,[-1]]],25,[5,6]],[[[50,[-1]],7,[8,[7]]],[[9,[-1]]],25],[[[50,[-1]],1,2,[3,[2]]],[[9,[-1]]],25],[2,[[50,[-1]]],25],[2,[[50,[-1]]],25],[[],[[50,[-1]]],45],[2,-1,[]],[2,-1,[]],[-1,[[12,[[50,[-2]]]]],28,[29,30]],[2,14],[[],14],[[[50,[-1]],[50,[-1]]],20,32],[[-1,-2],20,[],[]],[[[50,[-1]],33],34,35],[-1,-1,[]],0,[[[50,[-1]],2],[[3,[[10,[[9,[-1]]]]]]],25],0,[[],2],[-1,-2,[],[]],0,[[[50,[-1]],[9,[-1]],-2],[[4,[-1]]],25,[5,6]],[[[50,[-1]],[9,[-1]],9],[[12,[[4,[-1]],11]]],25],[[[50,[-1]]],2,25],[[[50,[-1]]],2,25],[[[50,[-1]],[15,[[14,[[13,[-2]],[3,[2]],9]]]],15,-3,-4],[[43,[-1]]],[46,25],16,[17,[18,[-1]]],[5,6]],[[[50,[-1]],[15,[[14,[[13,[-2]],[3,[2]],9]]]],15],[[10,[[26,[-1]]]]],25,16],[[[50,[-1]],-2],12,[29,30],38],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,40,[]],[[[50,[-1]],[15,[[19,[-1,-2,[43,[-1]]]]]],-3],20,25,[[18,[-1]]],[5,6]],[-1,-2,[],[]]],"c":[],"p":[[3,"DensePolynomial",314],[15,"usize"],[4,"Option",315],[3,"BlindedCommitment",21],[8,"RngCore",316],[8,"CryptoRng",316],[3,"Radix2EvaluationDomain",317],[3,"Evaluations",318],[3,"PolyComm",21],[3,"Vec",319],[4,"CommitmentError",134],[4,"Result",320],[4,"DensePolynomialOrEvaluations",154],[15,"tuple"],[15,"slice"],[8,"EvaluationDomain",321],[8,"Clone",322],[8,"FqSponge",323],[3,"BatchEvaluationProof",21],[15,"bool"],[8,"Field",324],[8,"PrimeField",324],[8,"SquareRootField",324],[8,"AffineCurve",325],[8,"CommitmentCurve",21],[3,"Evaluation",21],[3,"ScalarChallenge",326],[8,"Deserializer",327],[8,"CanonicalDeserialize",328],[8,"CanonicalSerialize",328],[8,"Deserialize",327],[8,"PartialEq",329],[3,"Formatter",330],[6,"Result",330],[8,"Debug",330],[8,"FnMut",331],[8,"Iterator",332],[8,"Serializer",333],[8,"Serialize",333],[3,"TypeId",334],[8,"Copy",335],[3,"String",336],[3,"OpeningProof",154],[3,"Challenges",154],[8,"Default",337],[8,"EndoCurve",21],[3,"PairingSRS",214],[8,"PairingEngine",325],[3,"PairingProof",214],[3,"SRS",272],[8,"OpenProof",0],[8,"SRS",0]]},\
"turshi":{"doc":"This module contains the code that executes a compiled …","t":"CCCCCCAAAAARRRRRRRRRRRRRRRRRRRRRRRRRIKKKKDLLLLLLLLLLLLLLLLLLLLLLDDDDDILLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIIIKLLLLLLLLKLKLKLKLKLKLKLKLKLKLKLKLKLKLKLKLKLLLLLKLKLKLKLKLKLKLKLLLLLLL","n":["CairoInstruction","CairoMemory","CairoProgram","FlagBits","Offsets","Pointers","flags","helper","memory","runner","word","AP_ADD","AP_ONE","AP_Z2","DST_AP","NUM_FLAGS","OP0_AP","OP1_AP","OP1_DBL","OP1_FP","OP1_VAL","OPC_AEQ","OPC_CALL","OPC_JMP_INC","OPC_RET","PC_ABS","PC_JNZ","PC_REL","PC_SIZ","POS_DST","POS_FLAGS","POS_OP0","POS_OP1","RES_ADD","RES_MUL","RES_ONE","CairoFieldHelpers","lsb","to_hex_be","to_u64","u16_chunk","CairoMemory","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","get_codelen","index","index_mut","init","into","is_empty","len","new","read","to_string","try_from","try_into","type_id","vzip","write","CairoContext","CairoInstruction","CairoProgram","CairoState","CairoStep","Pointers","adr_dst","adr_op0","adr_op1","ap","ap","ap","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","dst","execute","f15","f_ap_add","f_ap_one","f_dst_fp","f_op0_fp","f_op1_ap","f_op1_fp","f_op1_val","f_opc_aeq","f_opc_call","f_opc_ret","f_pc_abs","f_pc_jnz","f_pc_rel","f_res_add","f_res_mul","fin","fp","fp","fp","from","from","from","from","from","ini","init","init","init","init","init","instr","instr","into","into","into","into","into","new","new","new","new","next_pc","off_dst","off_op0","off_op1","op0","op1","pc","pc","pc","res","set_dst","set_op0","set_op1","set_res","size","steps","to_owned","to_owned","to_owned","trace","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","CairoWord","FlagBits","FlagSets","Offsets","ap_up","ap_up","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","dst_reg","dst_reg","f15","f15","f_ap_add","f_ap_add","f_ap_one","f_ap_one","f_dst_fp","f_dst_fp","f_op0_fp","f_op0_fp","f_op1_ap","f_op1_ap","f_op1_fp","f_op1_fp","f_op1_val","f_op1_val","f_opc_aeq","f_opc_aeq","f_opc_call","f_opc_call","f_opc_ret","f_opc_ret","f_pc_abs","f_pc_abs","f_pc_jnz","f_pc_jnz","f_pc_rel","f_pc_rel","f_res_add","f_res_add","f_res_mul","f_res_mul","from","init","into","new","off_dst","off_dst","off_op0","off_op0","off_op1","off_op1","op0_reg","op0_reg","op1_src","op1_src","opcode","opcode","pc_up","pc_up","res_log","res_log","to_owned","try_from","try_into","type_id","vzip","word"],"q":[[0,"turshi"],[11,"turshi::flags"],[36,"turshi::helper"],[41,"turshi::memory"],[64,"turshi::runner"],[192,"turshi::word"],[265,"alloc::string"],[266,"core::fmt"],[267,"core::fmt"],[268,"alloc::vec"],[269,"core::option"],[270,"core::result"],[271,"core::any"],[272,"core::clone"]],"d":["","","","","","","Definition of some constants for easier readability of the …","This module inlcudes some field helpers that are useful …","This module represents the Cairo memory, containing the …","This module represents a run of a Cairo program as a …","The Cairo language works natively for field elements in …","Update ap by adding a number of positions","Update ap by self increment","Update by 2 in call instructions or zero behaviour for …","Destination refers to ap register","Number of Cairo flags","First operand refers to ap register","Second operand refers to ap register","Second operand is double indexing","Second operand refers to fp register","Second operand is immediate value","Operation code is an assert-equal","Operation code is a call","Operation code is a jump or an increment","Operation code is a return","Update pc by an absolute jump","Update pc by a conditional relative jump","Update pc by a relative jump","Default increase of pc by adding instruction size","Position of destination offset of 16 bits within …","Bit position of the beginning of the flags in a Cairo …","Position of first operand offset of 16 bits within …","Position of second operand offset of 16 bits within …","Result is an addition","Result is a multiplication","Result is a single operand","Field element helpers for Cairo","Return field element as byte, if it fits. Otherwise …","Return a field element in hexadecimal in big endian","Return first 64 bits of the field element","Return <code>pos</code>-th 16-bit chunk as another field element","This data structure stores the memory of the program","","","","","","","Returns the argument unchanged.","Get size of the public memory","","","","Calls <code>U::from(self)</code>.","Returns whether the memory is empty (either length 0, or …","Get size of the full memory including dummy 0th entry","Create a new memory structure from a vector of field …","Read element in memory address","","","","","","Write u64 element in memory address","A structure to store auxiliary variables throughout …","This structure stores all the needed information relative …","This struct stores the needed information to run a program","A structure to store program counter, allocation pointer …","A data structure to store a current step of Cairo …","This trait contains functions to obtain the Cairo pointers …","Returns the destination address of the instruction","Returns the first operand address of the instruction","Returns the second operand address of the instruction","Returns the allocation pointer","","","","","","","","","","","","","","","","","","","This function creates an instance of a default CairoContext…","","","","","","","","","","","","","","","","Returns the destination of the instruction","Executes a Cairo step from the current registers","","","","","","","","","","","","","","","","","Outputs the final value of the pointers after the …","Returns the frame pointer","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Outputs the initial value of the pointers after the …","","","","","","This function returns the current word instruction being …","Returns the field element corresponding to the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new Cairo execution step from a step index, a …","Creates a Cairo execution from the public information …","Creates a new triple of pointers","Creates a CairoInstruction","This function computes the next program counter Panics if …","","","","Returns the first operand of the instruction","Returns the second operand of the instruction","Returns the program counter","","","Returns the result of the instruction","This function computes the destination address","This function computes the first operand address","This function computes the second operand address and …","This function computes the value of the result of the …","Returns the size of the instruction","Outputs the total number of steps of the execution carried …","","","","Returns a reference to the set of instructions","","","","","","","","","","","","","","","","","","","","","A Cairo word for the runner. Some words are instructions …","This trait contains methods that decompose a field element …","This trait contains methods that decompose a field element …","This trait contains methods to obtain the offset …","Returns flagset for allocation pointer update","","","","","","","","","Returns flagset for destination register","","Returns bit-flag for 16th position","","Returns bit-flag for allocation counter update being a …","","Returns bit-flag for allocation counter update being a …","","Returns bit-flag for destination register as <code>F</code>","","Returns bit-flag for first operand register as <code>F</code>","","Returns bit-flag for allocation pointer for second …","","Returns bit-flag for frame pointer for second register as <code>F</code>","","Returns bit-flag for immediate value for second register …","","Returns bit-flag for operation being an assert-equal as <code>F</code>","","Returns bit-flag for operation being a call as <code>F</code>","","Returns bit-flag for operation being a return as <code>F</code>","","Returns bit-flag for program counter update being absolute …","","Returns bit-flag for program counter update being …","","Returns bit-flag for program counter update being relative …","","Returns bit-flag for addition operation in right side as <code>F</code>","","Returns bit-flag for multiplication operation in right …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creates a CairoWord from a field element","Returns the destination offset in biased representation","","Returns the first operand offset in biased representation","","Returns the second operand offset in biased representation","","Returns flagset for first operand register","","Returns flagset for second operand register","","Returns flagset for operation code","","Returns flagset for program counter update","","Returns flagset for result logics","","","","","","","Returns the content of the word as a field element"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,15,15,15,23,16,15,19,20,16,18,15,19,20,16,18,15,16,18,15,16,18,15,18,19,20,16,18,15,19,20,16,18,15,19,20,16,18,15,15,19,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,20,23,16,15,19,20,16,18,15,20,19,20,16,18,15,19,15,19,20,16,18,15,19,20,16,15,19,15,15,15,15,15,23,16,15,15,19,19,19,19,15,20,16,18,15,20,19,20,16,18,15,19,20,16,18,15,19,20,16,18,15,19,20,16,18,15,0,0,0,0,24,21,21,21,21,21,21,21,21,24,21,25,21,25,21,25,21,25,21,25,21,25,21,25,21,25,21,25,21,25,21,25,21,25,21,25,21,25,21,25,21,25,21,21,21,21,21,26,21,26,21,26,21,24,21,24,21,24,21,24,21,24,21,21,21,21,21,21,21],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,2,[]],[-1,3,[]],[[-1,4],-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[4,-1,[]],[4,-1,[]],[4,5],[[[6,[-1]],7],8,9],[-1,-1,[]],[[[6,[-1]]],4,9],[[[6,[-1]],-1],[],9],[[[6,[-1]],-1],[],9],[[],4],[-1,-2,[],[]],[[[6,[-1]]],10,9],[[[6,[-1]]],3,9],[[[11,[-1]]],[[6,[-1]]],9],[[[6,[-1]],-1],[[12,[-1]]],9],[-1,2,[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,-2,[],[]],[[[6,[-1]],-1,-1],5,9],0,0,0,0,0,0,[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[-1,-2,[],[]],[[[16,[-1]]],-1,9],[[[15,[-1]]],-1,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[-1]]],[[16,[-1]]],17],[[[18,[-1]]],[[18,[-1]]],17],[[[15,[-1]]],[[15,[-1]]],17],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],[[18,[-1]]],9],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,5],[4,5],[4,5],[4,5],[4,5],[[[15,[-1]]],-1,9],[[[19,[-1]]],[[15,[-1]]],9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[20,[-1]]],[[16,[-1]]],9],[-1,-2,[],[]],[[[16,[-1]]],-1,9],[[[15,[-1]]],-1,9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[20,[-1]]],[[16,[-1]]],9],[[],4],[[],4],[[],4],[[],4],[[],4],[[[19,[-1]]],[[21,[-1]]],9],[[[15,[-1]]],-1,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]],[16,[-1]]],[[19,[-1]]],9],[[[6,[-1]],3],[[20,[-1]]],9],[[-1,-1,-1],[[16,[-1]]],9],[[[21,[-1]],[16,[-1]],[18,[-1]]],[[15,[-1]]],9],[[[19,[-1]]],[[12,[-1]]],9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[-1,-2,[],[]],[[[16,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[15,[-1]]],-1,9],[[[19,[-1]]],5,9],[[[19,[-1]]],5,9],[[[19,[-1]]],5,9],[[[19,[-1]]],5,9],[[[15,[-1]]],-1,9],[[[20,[-1]]],-1,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[20,[-1]]],[[11,[[15,[-1]]]]],9],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,1,[]],[[[21,[-1]]],1,9],[-1,-2,[],[]],[-1,-2,[],[]],[[[21,[-1]]],[[21,[-1]]],17],[[-1,-2],5,[],[]],[4,-1,[]],[4,-1,[]],[4,5],[-1,1,[]],[[[21,[-1]]],1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-1,[]],[[],4],[-1,-2,[],[]],[-1,[[21,[-1]]],9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,-2,[],[]],[[[21,[-1]]],-1,9],[-1,1,[]],[[[21,[-1]]],1,9],[-1,1,[]],[[[21,[-1]]],1,9],[-1,1,[]],[[[21,[-1]]],1,9],[-1,1,[]],[[[21,[-1]]],1,9],[-1,1,[]],[[[21,[-1]]],1,9],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,-2,[],[]],[[[21,[-1]]],-1,9]],"c":[],"p":[[15,"u8"],[3,"String",265],[15,"u64"],[15,"usize"],[15,"tuple"],[3,"CairoMemory",41],[3,"Formatter",266],[6,"Result",266],[8,"Field",267],[15,"bool"],[3,"Vec",268],[4,"Option",269],[4,"Result",270],[3,"TypeId",271],[3,"CairoInstruction",64],[3,"CairoState",64],[8,"Clone",272],[3,"CairoContext",64],[3,"CairoStep",64],[3,"CairoProgram",64],[3,"CairoWord",192],[8,"CairoFieldHelpers",36],[8,"Pointers",64],[8,"FlagSets",192],[8,"FlagBits",192],[8,"Offsets",192]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
