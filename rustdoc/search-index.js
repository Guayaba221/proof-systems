var searchIndex = new Map(JSON.parse('[\
["export_test_vectors",{"doc":"","t":"CHCPPPPGGNNNNNNNNNNNNNNNNNNNNHNNNNNNNNFFNNNNNNNNNNNNNNHNNONNOOHHNNONNNNNNNN","n":["inner","main","vectors","B10","Hex","Kimchi","Legacy","Mode","ParamType","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from_str","from_str","init","init","into","into","main","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","TestVector","TestVectors","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","generate","init","init","input","into","into","name","output","poseidon","rand_fields","serialize","serialize","test_vectors","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"export_test_vectors"],[3,"export_test_vectors::inner"],[38,"export_test_vectors::vectors"],[75,"core::fmt"],[76,"core::fmt"],[77,"core::any"],[78,"mina_curves::pasta::fields::fp"],[79,"mina_poseidon::poseidon"],[80,"alloc::vec"],[81,"rand::rng"],[82,"serde::ser"]],"d":["","“Usage: cargo run –all-features –bin …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","creates a set of test vectors","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Computes the poseidon hash of several field elements. Uses …","generates a vector of <code>length</code> field elements","","","","","","","","","","",""],"i":[0,0,0,3,3,6,6,0,0,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,0,3,6,3,6,3,6,3,6,0,0,10,11,10,11,10,11,10,11,10,11,10,11,10,11,0,10,11,11,10,11,10,11,0,0,10,11,10,10,11,10,11,10,11,10,11],"f":"`{{}b}```````{ce{}{}}000{dc{}}000{db}0{{fh}j}{{lh}j}{cc{}}0{n{{A`{fc}}}{}}{n{{A`{lc}}}{}}{{}d}0889{c{{A`{e}}}{}{}}000{cAb{}}0::``::::999988{{Adh}j}{{Afh}j}77{{fl}Ad}55`==``{{{Aj{Ah}}{Al{Ah}}}Ah}{{cAn}{{B`{Ah}}}Bb}{{Adc}A`Bd}{{Afc}A`Bd}`888877{ce{}{}}0","c":[],"p":[[1,"unit"],[1,"usize"],[6,"Mode",3],[5,"Formatter",75],[8,"Result",75],[6,"ParamType",3],[1,"str"],[6,"Result",76],[5,"TypeId",77],[5,"TestVectors",38],[5,"TestVector",38],[8,"Fp",78],[1,"slice"],[5,"ArithmeticSpongeParams",79],[1,"u8"],[5,"Vec",80],[10,"Rng",81],[10,"Serializer",82]],"b":[]}],\
["flamegraph",{"doc":"","t":"HH","n":["black_box","main"],"q":[[0,"flamegraph"]],"d":["function to avoid optimizations by the compiler taken from …",""],"i":[0,0],"f":"{cc{}}{{}b}","c":[],"p":[[1,"unit"]],"b":[]}],\
["folding",{"doc":"This library implements basic components to fold …","t":"RRRREKKFKRPFFPRGKRRRRKRMNNNNNNNNMMNNMCMMCNNNNNNNNONNNNOOCONNNNNNNNNNNNNNNNNNMMNNCNNNNMMOONNNNNNNNNNNNNONNNNOOMOPPPPGPPPNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNPPPPPPPPGPPPGPPKGGGFPPPPPPPPGPPPPFPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOHNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNOONNNNNNOHNNNNNNNN","n":["Challenge","Column","Curve","Env","ExpExtension","FoldingConfig","FoldingEnv","FoldingScheme","Instance","Instance","Left","RelaxedInstance","RelaxedWitness","Right","Selector","Side","Sponge","Sponge","Srs","Structure","Structure","Witness","Witness","alpha","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","challenge","challenge","clone","clone_into","col","columns","combine","combine","decomposable_folding","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","domain","drop","drop","drop","drop","error_vec","expression","expressions","extended_witness_generator","fold_instance_pair","fold_instance_witness_pair","from","from","from","from","get_error_column","get_error_column_commitment","get_extended_column","get_extended_column_commitment","init","init","init","init","into","into","into","into","lagrange_basis","new","new","other","quadraticization","relax","relax","relax","relax","rows","selector","srs","structure","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u","vzip","vzip","vzip","vzip","witness","zero_commitment","zero_vec","zero_vec","Alpha","Challenge","Constant","Error","ExtendedFoldingColumn","Inner","Selector","WitnessExtended","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","fmt","from","get_hash","hash","init","into","to_owned","try_from","try_into","type_id","vzip","DecomposableFoldingScheme","borrow","borrow_mut","deref","deref_mut","drop","fold_instance_witness_pair","from","init","into","new","try_from","try_into","type_id","vzip","Add","Add","Alpha","Atom","Atom","Cell","Challenge","Constant","Degree","Double","Double","Error","ExpExtension","ExtendedWitness","Extensions","FoldingColumnTrait","FoldingCompatibleExpr","FoldingCompatibleExprInner","FoldingExp","IntegratedFoldingExpr","Mul","Mul","Neg","One","Pos","Pow","Pow","Selector","Sign","Square","Square","Sub","Sub","Term","Two","U","Zero","add","add","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","degree","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","double","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","exp","extract_terms","final_expression","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","folding_expression","from","from","from","from","from","from","from","from","from","from","from","from","from","get_hash","get_hash","hash","hash","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","is_witness","mul","mul","mul","neg","neg","partial_cmp","sign","sub","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","ExtendedWitnessGenerator","Quadraticized","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","extended_witness_generator","extra_constraints","from","from","init","init","into","into","original_constraints","quadraticize","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"folding"],[111,"folding::columns"],[139,"folding::decomposable_folding"],[154,"folding::expressions"],[357,"folding::quadraticization"],[387,"poly_commitment::commitment"],[388,"poly_commitment::commitment"],[389,"alloc::vec"],[390,"ark_poly::domain::radix2"],[391,"ark_poly::evaluations::univariate"],[392,"core::option"],[393,"core::result"],[394,"core::any"],[395,"core::clone"],[396,"core::cmp"],[397,"core::fmt"],[398,"core::fmt"],[399,"core::marker"],[400,"core::hash"],[401,"core::cmp"],[402,"alloc::boxed"],[403,"kimchi::circuits::expr"],[404,"kimchi::circuits::expr"]],"d":["The type of an abstract challenge that can be found in the …","","The target curve used by the polynomial commitment","","","","Describe a folding environment. The type parameters are:","","","For Plonk, it will be the commitments to the polynomials …","","","","","","This type refers to the two instances to be folded","TODO: Use Sponge trait from kimchi","The sponge used to create challenges","","","Structure which could be storing useful information like …","","For PlonK, it will be the polynomials in evaluation form …","Computes the i-th power of alpha for a given side. Folding …","","","","","","","","","Obtains a given challenge from the expanded instance for …","Compute a challenge from two commitments","","","Returns the evaluations of a given column witness at omega …","","Combine two instances ‘a’ and ‘b’ into a new …","Should return a linear combination","This variant of folding is designed to efficiently handle …","","","","","","","","","","","","","","","","Implement a library to represent expressions/multivariate …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Provides access to the error column","Provides access to a commitment to the error column","Provides access to the extra columns added by …","Provides access to commitments to the extra columns added …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the evaluations of the i-th Lagrangian term.","Creates a new environment storing the structure, instances …","","","A library to reduce constraints into degree 2.","","","","","Return the size of the circuit, i.e. the number of rows","similar to Self::col, but folding may ask for a dynamic …","","","","","","","","","","","","","","","","","","","","","","","Returns a vector of zeros with the same length as the …","","A list of randomizer to combine expressions","A challenge used by the PIOP or the folding scheme.","","The error term introduced in the “relaxed” instance.","Describes the additional columns. It is parametrized by a …","","A “virtual” selector that can be used to …","For the extra columns added by the module <code>quadraticization</code>.","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","folding with a selector will assume that only the selector …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Describe the degree of a constraint. Only degree up to <code>2</code> …","","","","Extra expressions that can be created by folding","","extra nodes created by folding, should not be passed to …","","Compatible folding expressions that can be used with …","Components to be used to convert multivariate polynomials …","Internal expression used for folding. A “folding” …","A simplified expression with all terms separated by degree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Combines constraints into single expression","","","","","","","","","Convert a list of folding compatible expression into the …","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the constraints converted into degree 2 or less …","","","","","","","",""],"i":[15,15,15,15,0,0,0,0,0,15,4,0,0,4,15,0,0,15,15,15,2,0,15,2,14,16,13,4,14,16,13,4,2,56,4,4,2,0,11,12,0,14,16,13,4,14,16,13,4,13,14,16,13,4,16,13,0,13,13,13,14,16,13,4,16,14,16,14,14,16,13,4,14,16,13,4,2,2,13,4,0,11,11,12,12,15,2,13,13,4,14,16,13,4,14,16,13,4,14,16,13,4,14,14,16,13,4,16,13,2,13,24,24,24,24,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,21,39,40,21,39,41,41,41,0,21,39,40,0,40,41,0,0,0,0,0,21,39,42,38,42,21,39,40,0,21,39,21,39,0,38,40,38,38,39,38,40,41,21,39,42,43,44,38,40,41,21,39,42,43,44,38,40,41,21,39,42,43,44,38,40,41,21,39,42,43,44,38,44,46,38,40,41,21,39,42,43,44,38,40,41,21,39,42,43,44,39,38,40,41,21,39,42,43,44,38,40,41,21,39,42,38,39,42,43,0,44,38,40,41,21,39,42,43,44,0,38,40,41,41,41,21,21,21,21,39,42,43,44,38,39,38,39,38,40,41,21,39,42,43,44,38,40,41,21,39,42,43,44,46,38,39,43,42,43,38,43,39,38,40,41,21,39,42,43,44,21,38,40,41,21,39,42,43,44,38,40,41,21,39,42,43,44,38,40,41,21,39,42,43,44,38,40,41,21,39,42,43,44,0,0,55,49,55,49,55,49,55,49,55,49,55,55,55,49,55,49,55,49,55,0,55,49,55,49,55,49,55,49],"f":"```````````````````````{{{d{}{{b{c}}}}fh}e{}{}}{ce{}{}}0000000{{{d{}{{b{c}}}}eh}g{}{}{}}{{{l{{j{c}}}}}{}n}{hh}{{ce}A`{}{}}{{{d{}{{b{c}}}}eAbh}{{Ad{g}}}{}{}{}}`{{AfAf}Af}{{AhAh}Ah}`{fc{}}0000000`{fA`}000````{{{Aj{c}}eg{l{j}}}AlAn``}{{{Aj{c}}eg}{{Bb{AlB`{l{j}}}}}An``}{cc{}}000{{{B`{ce}}}{{Bf{Bd}}}n{{Ah{c}}}}{{{Al{ce}}}{{j{c}}}n{{Af{c}}}}{{{B`{ce}}f}{{Bh{{Bf{Bd}}}}}n{{Ah{c}}}}{{{Al{ce}}f}{{Bh{{j{c}}}}}n{{Af{c}}}}{{}f}000{ce{}{}}000{{{d{}{{b{c}}}}f}{{Ad{e}}}{}{}}{{c{l{e}}{l{g}}}{{d{}{{b{c}}}}}{}{}{}}{{{Ad{{Bj{c}}}}Bd}{{Bb{{Aj{c}}{Bj{c}}}}}An}{hh}`{{Af{j{c}}}{{Al{cAf}}}n}0{{Ah{Bf{Bd}}}{{B`{cAh}}}n}07{{{d{}{{b{c}}}}eh}{{Ad{g}}}{}{}{}}``7{c{{Bl{e}}}{}{}}0000000{cBn{}}000`9999``{{{d{}{{b{c}}}}}{{Ad{e}}}{}{}}`````````::{{{C`{c}}}{{C`{c}}}{CbAn}}{{ce}A`{}{}}{fc{}}0{fA`}{{{C`{c}}{C`{c}}}Cd{CfAn}}{{ce}Cd{}{}}{{{C`{c}}Ch}Cj{ClAn}}{cc{}}{{ce}Cn{D`Db}Dd}{{{C`{c}}e}A`{D`An}Df}{{}f}{ce{}{}}0>>=0`00998{{{Dh{c}}egBh}{{Bb{AlB`{l{j}}}}}An``}521{{{Dj{{Ad{{Bj{c}}}}}}{Ad{{Bj{c}}}}Bd}{{Bb{{Dh{c}}{Bj{c}}}}}An}{c{{Bl{e}}}{}{}}0{cBn{}}4`````````````````````````````````````{{DlDl}c{}}{{{Dn{c}}{Dn{c}}}{{Dn{c}}}An}6666666666666666{DlDl}{{{E`{c}}}{{E`{c}}}{CbAn}}{{{Eb{c}}}{{Eb{c}}}{CbAn}}{{{Bj{c}}}{{Bj{c}}}{CbAn}}{{{Dn{c}}}{{Dn{c}}}{CbAn}}{EdEd}{{{Ef{c}}}{{Ef{c}}}{CbAn}}{{{Eh{c}}}{{Eh{c}}}{CbAn}}{{ce}A`{}{}}0000000{{DlDl}Ej}{{}{{Eh{c}}}An}{ElDl}{fc{}}000000000000000{{{Dn{c}}}{{Dn{c}}}An}{fA`}0000000{{DlDl}Cd}{{{E`{c}}{E`{c}}}Cd{CfAn}}{{{Eb{c}}{Eb{c}}}Cd{CfAn}}{{{Bj{c}}{Bj{c}}}Cd{CfAn}}{{{Dn{c}}{Dn{c}}}Cd{CfAn}}{{EdEd}Cd}{{ce}Cd{}{}}00`{{{Dn{c}}}{{F`{En}}}An}{{{Eh{c}}}{{Bj{c}}}An}{{DlCh}Cj}{{{E`{c}}Ch}Cj{ClAn}}{{{Eb{c}}Ch}Cj{ClAn}}{{{Bj{c}}Ch}Cj{ClAn}}{{{Dn{c}}Ch}Cj{ClAn}}{{EdCh}Cj}{{{Ef{c}}Ch}Cj{ClAn}}{{{Eh{c}}Ch}Cj{ClAn}}{{{Ad{{Bj{c}}}}}{{Bb{{Eh{c}}{Fb{c}}}}}An}{cc{}}0{{{Fd{c}}}{{Eb{e}}}{}An}{{{Ff{{Fd{c}}e}}}{{Eb{g}}}{}{}{{An{}{{Fh{e}}}}}}22{{{Fj{{Fd{c}}}}}{{Bj{g}}}{}{}{{An{}{{Fh{e}}}}}}{{{Fj{{Ff{{Fd{c}}e}}}}}{{Bj{g}}}{}{}{{An{}{{Fh{e}}}}}}{{{Fj{{Ff{{Fj{{Fd{c}}}}e}}}}}{{Bj{g}}}{}{}{{An{}{{Fh{e}}}}}}5555{{ce}Cn{D`Db}Dd}0{{Dlc}A`Df}{{{Dn{c}}e}A`{D`An}Df}{{}f}0000000{ce{}{}}0000000{ElCd}{{DlDl}c{}}{{{Dn{c}}{Dn{c}}}{{Dn{c}}}An}{{{Ef{c}}{Ef{c}}}eAn{}}{EdEd}{{{Ef{c}}}eAn{}}{{DlDl}{{Bh{Ej}}}}`477777777{{{Bj{c}}}FlAn}{c{{Bl{e}}}{}{}}000000000000000{cBn{}}0000000::::::::``::::{fc{}}000{fA`}0``{cc{}}0>>==`{{{Ad{{Dn{c}}}}}{{Fn{c}}}An}555544>>","c":[],"p":[[17,"Structure"],[10,"FoldingEnv",0],[1,"usize"],[6,"Side",0],[5,"PolyComm",387],[1,"array"],[10,"CommitmentCurve",387],[1,"unit"],[6,"CurrOrNext",388],[5,"Vec",389],[10,"Instance",0],[10,"Witness",0],[5,"FoldingScheme",0],[5,"RelaxedInstance",0],[10,"FoldingConfig",0],[5,"RelaxedWitness",0],[1,"tuple"],[5,"Radix2EvaluationDomain",390],[5,"Evaluations",391],[6,"Option",392],[6,"FoldingCompatibleExpr",154],[6,"Result",393],[5,"TypeId",394],[6,"ExtendedFoldingColumn",111],[10,"Clone",395],[1,"bool"],[10,"PartialEq",396],[5,"Formatter",397],[8,"Result",397],[10,"Debug",397],[1,"u64"],[10,"Hash",398],[10,"Sized",399],[10,"BuildHasher",398],[10,"Hasher",398],[5,"DecomposableFoldingScheme",139],[5,"BTreeMap",400],[6,"Degree",154],[6,"FoldingExp",154],[6,"ExpExtension",154],[6,"FoldingCompatibleExprInner",154],[6,"Sign",154],[5,"Term",154],[5,"IntegratedFoldingExpr",154],[6,"Ordering",396],[10,"FoldingColumnTrait",154],[10,"Iterator",401],[5,"Box",402],[5,"ExtendedWitnessGenerator",357],[6,"ConstantExprInner",403],[6,"ExprInner",403],[17,"Column"],[6,"Operations",403],[5,"String",404],[5,"Quadraticized",357],[10,"Sponge",0]],"b":[[276,"impl-From%3CConstantExprInner%3CF%3E%3E-for-FoldingCompatibleExprInner%3CConfig%3E"],[277,"impl-From%3CExprInner%3CConstantExprInner%3CF%3E,+Col%3E%3E-for-FoldingCompatibleExprInner%3CConfig%3E"],[280,"impl-From%3COperations%3CConstantExprInner%3CF%3E%3E%3E-for-FoldingCompatibleExpr%3CConfig%3E"],[281,"impl-From%3COperations%3CExprInner%3CConstantExprInner%3CF%3E,+Col%3E%3E%3E-for-FoldingCompatibleExpr%3CConfig%3E"],[282,"impl-From%3COperations%3CExprInner%3COperations%3CConstantExprInner%3CF%3E%3E,+Col%3E%3E%3E-for-FoldingCompatibleExpr%3CConfig%3E"]]}],\
["groupmap",{"doc":"Follows approach of SvdW06 to construct a “near injection…","t":"FKMNNNNNNNNNHNNMNMNNNNNN","n":["BWParameters","GroupMap","batch_to_group_x","batch_to_group_x","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","from","get_y","init","into","setup","setup","to_group","to_group","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"groupmap"],[24,"alloc::vec"],[25,"ark_ec::models"],[26,"core::clone"],[27,"core::option"],[28,"core::result"],[29,"core::any"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","returns the y-coordinate if x is a valid point on the …","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,1,4,4,4,4,4,4,4,4,4,0,4,4,1,4,1,4,4,4,4,4,4],"f":"``{{b{d{c}}}{{d{{f{c}}}}}{}}{{{h{c}}d}{{d{f}}}j}{ce{}{}}0{{{h{c}}}{{h{c}}}{lj}}{{ce}n{}{}}{A`c{}}0{A`n}{cc{}}{{}Ab}{{}A`}7{{}b}{{}{{h{c}}}j}{{bc}{{Ad{cc}}}{}}{{{h{c}}}Adj};{c{{Af{e}}}{}{}}0{cAh{}}=","c":[],"p":[[10,"GroupMap",0],[5,"Vec",24],[1,"array"],[5,"BWParameters",0],[10,"SWModelParameters",25],[10,"Clone",26],[1,"unit"],[1,"usize"],[6,"Option",27],[1,"tuple"],[6,"Result",28],[5,"TypeId",29]],"b":[]}],\
["internal_tracing",{"doc":"","t":"PPGPPPPPPGNNNNNNNNNNNNNNNQNNQNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQHNHNNNNHNNNNNNNN","n":["Array","Bool","JsonValue","Microseconds","Null","Number","Object","String","SystemTime","TimeInput","as_array","as_array_mut","as_bool","as_f64","as_i64","as_null","as_number","as_object","as_object_mut","as_str","as_u64","borrow","borrow","borrow_mut","borrow_mut","checkpoint","clone","clone_into","decl_traces","default","deserialize","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","get","get_mut","index","index_mut","into","into","into_deserializer","into_deserializer","is_array","is_boolean","is_f64","is_i64","is_null","is_number","is_object","is_string","is_u64","json","json_to_writer","micros","now_micros","pointer","pointer_mut","serialize","take","time_to_micros","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"internal_tracing"],[201,"alloc::vec"],[202,"core::option"],[203,"serde_json::number"],[204,"alloc::string"],[205,"serde_json::map"],[206,"core::result"],[207,"serde::de"],[208,"serde_json::error"],[209,"serde::de"],[210,"core::fmt"],[211,"alloc::borrow"],[212,"core::clone"],[213,"core::convert"],[214,"core::iter::traits::collect"],[215,"serde_json::value::index"],[216,"std::io"],[217,"serde::ser"],[218,"core::marker"],[219,"serde::ser"]],"d":["Represents a JSON array.","Represents a JSON boolean.","Represents any valid JSON value.","","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Represents a JSON string.","","","If the <code>Value</code> is an Array, returns the associated vector. …","If the <code>Value</code> is an Array, returns the associated mutable …","If the <code>Value</code> is a Boolean, returns the associated bool. …","If the <code>Value</code> is a number, represent it as f64 if possible. …","If the <code>Value</code> is an integer, represent it as i64 if …","If the <code>Value</code> is a Null, returns (). Returns None otherwise.","If the <code>Value</code> is a Number, returns the associated <code>Number</code>. …","If the <code>Value</code> is an Object, returns the associated Map. …","If the <code>Value</code> is an Object, returns the associated mutable …","If the <code>Value</code> is a String, returns the associated str. …","If the <code>Value</code> is an integer, represent it as u64 if …","","","","","Capture the trace/checkpoint.","","","Declare traces group.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Display a JSON value as a string.","","","Returns the argument unchanged.","Convert copy-on-write string to <code>Value::String</code>.","","Convert string slice to <code>Value::String</code>.","","","Returns the argument unchanged.","Convert map (with string keys) to <code>Value::Object</code>.","Convert a slice to <code>Value::Array</code>.","Convert <code>Number</code> to <code>Value::Number</code>.","","Convert <code>String</code> to <code>Value::String</code>.","Convert <code>()</code> to <code>Value::Null</code>.","","Convert 32-bit floating point number to <code>Value::Number</code>, or …","","","Convert boolean to <code>Value::Bool</code>.","","","","Convert 64-bit floating point number to <code>Value::Number</code>, or …","","Convert a <code>Vec</code> to <code>Value::Array</code>.","Create a <code>Value::Object</code> by collecting an iterator of …","Create a <code>Value::Array</code> by collecting an iterator of array …","","Index into a JSON array or map. A string index can be used …","Mutably index into a JSON array or map. A string index can …","Index into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or","Write into a <code>serde_json::Value</code> using the syntax …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if the <code>Value</code> is an Array. Returns false …","Returns true if the <code>Value</code> is a Boolean. Returns false …","Returns true if the <code>Value</code> is a number that can be …","Returns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Value</code> is a Null. Returns false …","Returns true if the <code>Value</code> is a Number. Returns false …","Returns true if the <code>Value</code> is an Object. Returns false …","Returns true if the <code>Value</code> is a String. Returns false …","Returns true if the <code>Value</code> is an integer between zero and …","Construct a <code>serde_json::Value</code> from a JSON literal.","Serialize the given data structure as JSON into the I/O …","","","Looks up a value by a JSON Pointer.","Looks up a value by a JSON Pointer and returns a mutable …","","Takes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …","","","","","","","","",""],"i":[1,1,0,29,1,1,1,1,29,0,1,1,1,1,1,1,1,1,1,1,1,29,1,29,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,29,29,29,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,29,1,1,1,1,1,1,1,1,1,1,1,1,0,0,29,0,1,1,1,1,0,1,1,29,1,29,1,29,1],"f":"``````````{b{{f{{d{b}}}}}}0{b{{f{h}}}}{b{{f{j}}}}{b{{f{l}}}}{b{{f{n}}}}{b{{f{A`}}}}{b{{f{{Ad{Abb}}}}}}0{b{{f{Af}}}}{b{{f{Ah}}}}{ce{}{}}000`{bb}{{ce}n{}{}}`{{}b}{c{{Aj{b}}}Al}{{bc}{{Aj{An}}}B`}000000000{{bAf{Bb{Af}}c}{{Aj{An}}}B`}011111111111111111111{{bAfc}{{Aj{An}}}B`}02222222211{{bBdc}{{Aj{An}}}B`}0{{bAfBdc}{{Aj{An}}}B`}044444444444422{{bBf}h}{{bBh}h}{{bAf}h}{{bBj}h}{{bAh}h}2{{bh}h}{{bBl}h}{{bBd}h}0{{bl}h}44{{bj}h}186309{{bBn}h}730{{bC`}h}060{{bCb}h}4{{bCd}h}80470{{bb}h}{{bAb}h}?3>35{{bCf}{{Aj{nCh}}}}0{AhCj}{ClCj}{cc{}}{{{Cn{Af}}}b}{Cbb}{Afb}{Ahb}{Bfb}5{{{Ad{Abb}}}b}{{{Bb{c}}}b{D`{Db{b}}}}{A`b}{Bjb}{Abb}{nb}{Bnb}{Bhb}{Blb}{Cdb}{hb}{Bdb}{lb}{{{f{c}}}b{{Db{b}}}}{jb}{C`b}{{{d{c}}}b{{Db{b}}}}{gb{{Db{Ab}}}{{Db{b}}}{{Dh{}{{Dd{{Df{ce}}}}}}}}{eb{{Db{b}}}{{Dh{}{{Dd{c}}}}}}{Af{{Aj{bAn}}}}{{bc}{{f{b}}}Dj}0{{bc}bDj}0{ce{}{}}0{b}0{bh}00000000`{{ce}{{Aj{nAn}}}Dl{DnE`}}{CjAh}{{}Ah}{{bAf}{{f{b}}}}0{{bc}AjEb}{bb}{ClAh}9{cAb{}}{c{{Aj{e}}}{}{}}000{cEd{}}0","c":[],"p":[[6,"JsonValue",0],[5,"Vec",201],[6,"Option",202],[1,"bool"],[1,"f64"],[1,"i64"],[1,"unit"],[5,"Number",203],[5,"String",204],[5,"Map",205],[1,"str"],[1,"u64"],[6,"Result",206],[10,"Deserializer",207],[5,"Error",208],[10,"Visitor",207],[1,"slice"],[1,"usize"],[1,"isize"],[1,"f32"],[1,"i32"],[1,"u32"],[1,"u8"],[1,"i8"],[1,"i16"],[1,"u16"],[5,"Formatter",209],[5,"Error",209],[6,"TimeInput",0],[5,"SystemTime",210],[6,"Cow",211],[10,"Clone",212],[10,"Into",213],[17,"Item"],[1,"tuple"],[10,"IntoIterator",214],[10,"Index",215],[10,"Write",216],[10,"Serialize",217],[10,"Sized",218],[10,"Serializer",217],[5,"TypeId",219]],"b":[[31,"impl-Deserializer%3C\'de%3E-for-Value"],[32,"impl-Deserializer%3C\'de%3E-for-%26Value"],[33,"impl-Deserializer%3C\'de%3E-for-Value"],[34,"impl-Deserializer%3C\'de%3E-for-%26Value"],[35,"impl-Deserializer%3C\'de%3E-for-%26Value"],[36,"impl-Deserializer%3C\'de%3E-for-Value"],[37,"impl-Deserializer%3C\'de%3E-for-%26Value"],[38,"impl-Deserializer%3C\'de%3E-for-Value"],[39,"impl-Deserializer%3C\'de%3E-for-%26Value"],[40,"impl-Deserializer%3C\'de%3E-for-Value"],[41,"impl-Deserializer%3C\'de%3E-for-Value"],[42,"impl-Deserializer%3C\'de%3E-for-%26Value"],[43,"impl-Deserializer%3C\'de%3E-for-%26Value"],[44,"impl-Deserializer%3C\'de%3E-for-Value"],[45,"impl-Deserializer%3C\'de%3E-for-%26Value"],[46,"impl-Deserializer%3C\'de%3E-for-Value"],[47,"impl-Deserializer%3C\'de%3E-for-%26Value"],[48,"impl-Deserializer%3C\'de%3E-for-Value"],[49,"impl-Deserializer%3C\'de%3E-for-Value"],[50,"impl-Deserializer%3C\'de%3E-for-%26Value"],[51,"impl-Deserializer%3C\'de%3E-for-%26Value"],[52,"impl-Deserializer%3C\'de%3E-for-Value"],[53,"impl-Deserializer%3C\'de%3E-for-%26Value"],[54,"impl-Deserializer%3C\'de%3E-for-Value"],[55,"impl-Deserializer%3C\'de%3E-for-%26Value"],[56,"impl-Deserializer%3C\'de%3E-for-Value"],[57,"impl-Deserializer%3C\'de%3E-for-Value"],[58,"impl-Deserializer%3C\'de%3E-for-%26Value"],[59,"impl-Deserializer%3C\'de%3E-for-Value"],[60,"impl-Deserializer%3C\'de%3E-for-%26Value"],[61,"impl-Deserializer%3C\'de%3E-for-%26Value"],[62,"impl-Deserializer%3C\'de%3E-for-Value"],[63,"impl-Deserializer%3C\'de%3E-for-Value"],[64,"impl-Deserializer%3C\'de%3E-for-%26Value"],[65,"impl-Deserializer%3C\'de%3E-for-Value"],[66,"impl-Deserializer%3C\'de%3E-for-%26Value"],[67,"impl-Deserializer%3C\'de%3E-for-Value"],[68,"impl-Deserializer%3C\'de%3E-for-%26Value"],[69,"impl-Deserializer%3C\'de%3E-for-%26Value"],[70,"impl-Deserializer%3C\'de%3E-for-Value"],[71,"impl-Deserializer%3C\'de%3E-for-Value"],[72,"impl-Deserializer%3C\'de%3E-for-%26Value"],[73,"impl-Deserializer%3C\'de%3E-for-%26Value"],[74,"impl-Deserializer%3C\'de%3E-for-Value"],[75,"impl-Deserializer%3C\'de%3E-for-%26Value"],[76,"impl-Deserializer%3C\'de%3E-for-Value"],[77,"impl-Deserializer%3C\'de%3E-for-Value"],[78,"impl-Deserializer%3C\'de%3E-for-%26Value"],[79,"impl-Deserializer%3C\'de%3E-for-%26Value"],[80,"impl-Deserializer%3C\'de%3E-for-Value"],[81,"impl-Deserializer%3C\'de%3E-for-%26Value"],[82,"impl-Deserializer%3C\'de%3E-for-Value"],[83,"impl-Deserializer%3C\'de%3E-for-%26Value"],[84,"impl-Deserializer%3C\'de%3E-for-Value"],[85,"impl-Deserializer%3C\'de%3E-for-%26Value"],[86,"impl-Deserializer%3C\'de%3E-for-Value"],[87,"impl-Deserializer%3C\'de%3E-for-%26Value"],[88,"impl-Deserializer%3C\'de%3E-for-Value"],[89,"impl-Deserializer%3C\'de%3E-for-%26Value"],[90,"impl-Deserializer%3C\'de%3E-for-Value"],[91,"impl-Deserializer%3C\'de%3E-for-%26Value"],[92,"impl-Deserializer%3C\'de%3E-for-Value"],[93,"impl-PartialEq%3Cisize%3E-for-%26Value"],[94,"impl-PartialEq%3Cf32%3E-for-%26mut+Value"],[95,"impl-PartialEq%3C%26str%3E-for-Value"],[96,"impl-PartialEq%3Ci32%3E-for-Value"],[97,"impl-PartialEq%3Cu64%3E-for-Value"],[98,"impl-PartialEq%3Cstr%3E-for-Value"],[99,"impl-PartialEq%3Cbool%3E-for-Value"],[100,"impl-PartialEq%3Cu32%3E-for-Value"],[101,"impl-PartialEq%3Cusize%3E-for-%26mut+Value"],[102,"impl-PartialEq%3Cusize%3E-for-%26Value"],[103,"impl-PartialEq%3Ci64%3E-for-%26mut+Value"],[104,"impl-PartialEq%3Cu64%3E-for-%26mut+Value"],[105,"impl-PartialEq%3Cu64%3E-for-%26Value"],[106,"impl-PartialEq%3Cf64%3E-for-%26mut+Value"],[107,"impl-PartialEq%3Ci64%3E-for-%26Value"],[108,"impl-PartialEq%3Cf32%3E-for-Value"],[109,"impl-PartialEq%3Ci32%3E-for-%26mut+Value"],[110,"impl-PartialEq%3Cu32%3E-for-%26mut+Value"],[111,"impl-PartialEq%3Cf64%3E-for-Value"],[112,"impl-PartialEq%3Cisize%3E-for-%26mut+Value"],[113,"impl-PartialEq%3Cu8%3E-for-%26Value"],[114,"impl-PartialEq%3Ci32%3E-for-%26Value"],[115,"impl-PartialEq%3Cusize%3E-for-Value"],[116,"impl-PartialEq%3Cu8%3E-for-Value"],[117,"impl-PartialEq%3Ci8%3E-for-Value"],[118,"impl-PartialEq%3Ci8%3E-for-%26mut+Value"],[119,"impl-PartialEq%3Cbool%3E-for-%26Value"],[120,"impl-PartialEq%3Ci8%3E-for-%26Value"],[121,"impl-PartialEq%3Ci16%3E-for-%26Value"],[122,"impl-PartialEq%3Ci64%3E-for-Value"],[123,"impl-PartialEq%3Cu16%3E-for-Value"],[124,"impl-PartialEq%3Cbool%3E-for-%26mut+Value"],[125,"impl-PartialEq%3Cu16%3E-for-%26mut+Value"],[126,"impl-PartialEq%3Cf64%3E-for-%26Value"],[127,"impl-PartialEq%3Cu32%3E-for-%26Value"],[128,"impl-PartialEq%3Cu16%3E-for-%26Value"],[129,"impl-PartialEq-for-Value"],[130,"impl-PartialEq%3CString%3E-for-Value"],[131,"impl-PartialEq%3Cisize%3E-for-Value"],[132,"impl-PartialEq%3Ci16%3E-for-Value"],[133,"impl-PartialEq%3Cf32%3E-for-%26Value"],[134,"impl-PartialEq%3Ci16%3E-for-%26mut+Value"],[135,"impl-PartialEq%3Cu8%3E-for-%26mut+Value"],[136,"impl-Debug-for-Value"],[137,"impl-Display-for-Value"],[138,"impl-From%3Cu64%3E-for-TimeInput"],[139,"impl-From%3CSystemTime%3E-for-TimeInput"],[141,"impl-From%3CCow%3C\'a,+str%3E%3E-for-Value"],[142,"impl-From%3Ci16%3E-for-Value"],[143,"impl-From%3C%26str%3E-for-Value"],[144,"impl-From%3Cu64%3E-for-Value"],[145,"impl-From%3Cisize%3E-for-Value"],[147,"impl-From%3CMap%3CString,+Value%3E%3E-for-Value"],[148,"impl-From%3C%26%5BT%5D%3E-for-Value"],[149,"impl-From%3CNumber%3E-for-Value"],[150,"impl-From%3Ci32%3E-for-Value"],[151,"impl-From%3CString%3E-for-Value"],[152,"impl-From%3C()%3E-for-Value"],[153,"impl-From%3Cu8%3E-for-Value"],[154,"impl-From%3Cf32%3E-for-Value"],[155,"impl-From%3Cu32%3E-for-Value"],[156,"impl-From%3Cu16%3E-for-Value"],[157,"impl-From%3Cbool%3E-for-Value"],[158,"impl-From%3Cusize%3E-for-Value"],[159,"impl-From%3Ci64%3E-for-Value"],[160,"impl-From%3COption%3CT%3E%3E-for-Value"],[161,"impl-From%3Cf64%3E-for-Value"],[162,"impl-From%3Ci8%3E-for-Value"],[163,"impl-From%3CVec%3CT%3E%3E-for-Value"],[164,"impl-FromIterator%3C(K,+V)%3E-for-Value"],[165,"impl-FromIterator%3CT%3E-for-Value"],[173,"impl-IntoDeserializer%3C\'de,+Error%3E-for-Value"],[174,"impl-IntoDeserializer%3C\'de,+Error%3E-for-%26Value"]]}],\
["ivc",{"doc":"","t":"CCCCPPPPPGSSPPPPPPPNNNNNNNNNNNNNNNNNNCCCPGPPNNNNNNNNNNNNNNNNNNKHMMHFNNNNNNNNNNHNNNNN","n":["ivc","poseidon","columns","interpreter","ConstPhi","ConstR","ECAdds","ECAddsBottom","Hashes","IVCColumn","IVC_POSEIDON_NB_FULL_ROUND","IVC_POSEIDON_STATE_SIZE","Input","InputRepacked150","InputRepacked75","Phi","PhiLimbs","PhiR","PhiRLimbs","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","init","into","to_column","to_owned","try_from","try_into","type_id","vzip","columns","interpreter","params","Input","PoseidonColumn","Round","RoundConstant","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","init","into","to_column","to_owned","try_from","try_into","type_id","vzip","Params","apply_permutation","constants","mds","poseidon_circuit","PlonkSpongeConstantsIVC","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","from","init","into","static_params","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"ivc"],[2,"ivc::ivc"],[4,"ivc::ivc::columns"],[37,"ivc::poseidon"],[40,"ivc::poseidon::columns"],[62,"ivc::poseidon::interpreter"],[67,"ivc::poseidon::params"],[84,"core::fmt"],[85,"core::fmt"],[86,"core::result"],[87,"core::any"],[88,"ark_ff::fields"],[89,"kimchi_msm::circuit_design::capabilities"],[90,"kimchi_msm::circuit_design::capabilities"],[91,"mina_poseidon::poseidon"]],"d":["","","","","Constant phi","Constant r","35 additions per row at most.","Overlapping, bottom ECADDs","We need to absorb 4 elements per row (1 input = 2 base …","N := N_IVC + N_APP is the total number of columns in the …","","","2*17 15-bit limbs (two base field points)","2*2 150-bit limbs","2*4 75-bit limbs","Scalar coeff #1, phi^i","17 15-bit limbs","Scalar coeff #2, r * phi^i","17 15-bit limbs","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Implement an interpreter for a specific instance of the …","Parameters for the Poseidon sponge.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Represents the parameters of the instance of the Poseidon …","Apply the whole permutation of Poseidon to the state. The …","","","Populates and checks one poseidon invocation.","Constants used by the IVC circuit used by the folding …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,14,14,0,0,18,18,18,18,18,18,18,18,18,18,0,18,18,18,18,18],"f":"```````````````````{ce{}{}}0{bb}{{ce}d{}{}}{fc{}}0{fd}{{bb}h}{{bj}l}{cc{}}{{}f}8{bn}9{c{{A`{e}}}{}{}}0{cAb{}};```````;;{AdAd}:998{{AdAd}h}{{Adj}l}76>{Adn}?554?`{{eg}dAf{{Ah{cAd}}{Aj{cAd}}}{{Al{c}}}}{Al{{An{{An{c}}}}}Af}0{{eg{B`{ccc}}}dAf{{Bb{cAd}}{Aj{cAd}}}{{Al{c}}}}`{ce{}{}}0{BdBd}{{ce}d{}{}}{fc{}}0{fd}{cc{}}{{}f}6{{}{{Bh{Bf}}}}7{c{{A`{e}}}{}{}}0{cAb{}}9","c":[],"p":[[6,"IVCColumn",4],[1,"unit"],[1,"usize"],[1,"bool"],[5,"Formatter",84],[8,"Result",84],[6,"Column",85],[6,"Result",86],[5,"TypeId",87],[6,"PoseidonColumn",40],[10,"PrimeField",88],[10,"ColAccessCap",89],[10,"HybridCopyCap",89],[10,"Params",62],[1,"array"],[1,"tuple"],[10,"ColWriteCap",89],[5,"PlonkSpongeConstantsIVC",67],[8,"Fr",90],[5,"ArithmeticSpongeParams",91]],"b":[]}],\
["kimchi",{"doc":"Kimchi","t":"CQQCCCCQQQECCQEEECCECCCCCEQQCCFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNONNNNNCCCCCCCCCCCCCCTKFFGFTKPPPMNNNNNNNNONNNNOMNNOMMNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNONNNNPPPPGPIFPPPFPPPPPPPPPPPPONNNNNNONNNHONHONNNNNNNONNNNNNNNNNNNNNNHONNNNNNNNONONNOOONOONNNNNNNNNNNNONNNHOHHOFFFPPFFGPNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNOONNNNNNOOONONNNNNOOOONNNNNNNNNNOOONNNNNNNNNNNNNNNNNOONONNNNOOOONNONOOOOONNNOONHNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOHOOFNNNNOONNNNNNNNNOOONNNNNONFNNNNNOOOONNNNNNNNNNNNNNPPPPPPPPPFPPPFPPPPGFRRKKPPPIGGFPPPPGPPPPPPIGGRPGPPKPPPPPFKPPPPPPPPPPPPPPGGPPPPPPPFPPPPPPPPPPPPKPPPPFPNNONMNNNNQQNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOMNNNNNOCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOMMMMNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNOHMMNNNNNNNNNMNNNNNNNNONNNNMNNNNNNNNNONNNNNHCONNNNNNNNNNNMNNNNNNNNMNNNNMNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNOOOOKHMMMHMHMMMMMMMMMMEEEEEEEEPPPPFFGIPKPPPGPPPPPPGPPPPPPPPPPPPPPPPNNNNNNNNNNCNNNNNNNNNNOMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNONNOOOFNNONNNNNNNNNNNNNNONNNOCCCCCSFHNNNNHNNNNONNNNONNHNNNNHNHPFGFPPPNNNNNNNNNNNNNONNNNNNNNNNNNNONNNNNNNNNNNNNNNOOOONOOOONNOONNNNNNNNNNNNNNNNOOOOPPFIIFPFFGFFGPFPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNONNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNONNONONNNNNNNNNNNNNNNNNOONNNNNNNNNNONNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNCOFFFNNNNNNCNNNNNNHONNNNNNNNNNNONNNNNNNNNNNOOONNNNNNNNONNNNNNNNNNNNNNNNNFFFNNNNNNONNNNNNNNNONNNNNNNNNOOONNNNNNNNNONNNNNNNNNNNNNNNNNNNNNGFFSPSPNNNNNNCNNNNNNHHONNNNNNNNNNNNNNNNNNNNNNNNHNNNONNNNNNNNNNNCONNNNNNNNNNNNNNNNNNNCOFNNONNNNNNONNNNNNNNNNSSHSHEFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOCCCCCCCCCCCCCCCCCHHHFNNNNNNNNNNNNNNNNNFNNNNNNNNNNNHNNNNNNFFONNNNNNNNNNNNNNNNNHNNNNONNNNNNNNCCCFNNNNNNNNNNNNNNNNNPGPNNNNHNNNNNHNNNNNNNNNNSKKKKKKSISSSSSMMMOMMNMMMMMNMMMMMCCCFNNNNHHHNNNNNNNNNNNNNSHHHHHHFNNNNNNNOOHHHNNNNNNNNNNONNOONNNNPSPSSSSFGPPPNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNOOOOOHHFSSNNNCNNCNNNNNNNNCNNNNNNNNNNNNNCFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHSFNNNNNHHNNNNHNNNNHNHSFSSSSNNNNNNNNNNNHNNHNNNNCCCFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSHHHHHHHHHHHHHHHHHHPPFGNNNNNNNNNNNNNNNNNNNHNNNNNNNHNNNNNNNNNSFFFFNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNCHHFFFONNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNHFNNNNNNHNNNNHNNNHHNNNNFOOONNCNNNNNNNNNONNONNNNOOOONOOFOOONNNNNNNNONNNONNNNNOONOONOOSISSKFNNCNNONNNNNNNNNNNNNNNNNNNNMNNNNNNNONNNNNNNNNCMNNFNNONNNNNNNNNNNONNNNNFFFFFFFFKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNQQNNNNNNNNKTMMMMMPPPPGPPPPPPPPPPPPPPPPPPGPPPGPGGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNHHHFONNCONNONONONNOOOONNNNOFNNHNNONNNNNNONNOONNNNNKMMMMMMSHFFFFFFONNNNNNNNNNNNCONNNNNNNNNNNNONOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNOONONNNNNNNOOONNNNNNNNNNNOONNNNNNNNNNNNNNOOOOONNNNONNNNOOOOOOOOOOOONNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOFFNNNNONNNNOOONNNNNNOOOOONNNNNONNNNNNOOOOONNNNOOOOOOOONNNNNNNNNNNNOOOOCCFFFFEONNNNNNNNNNNNONNNNNNNNNNNNONNNNNNNNNNNONNNNNNNNNNNNONNNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNOOSFNNOCONNOOOOOOONNNNONNNONNOOOOONOHHNNNNNONOFNNNNNNNNNNNNNNNNNNNFNNNNONNONNNNNNNNOONNNONOCNNNNNONONNNHHHCCCCCCCCCCCCCFRRRFRRKFFNNNNNNNNNMNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFONNNNNNNONNNNNONNNNNPFGPPFPPFPFFPRGPPFPPFFKPOOONNOOOOOOOONNNNNNNNNNNNNNNNNNNNOHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOONNNNNNNNNNNNNNNNOOOOOOONNNOOOOMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOPPGPIIPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPPFPGIGIGIPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNONNNNNNNNNNNNNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKFMNNNNNNNNNNNHNNNNNEEEQPGPFKNNNONNNNNNNNNMNNNNNNNNNONNNNNNNONNNNNNOONNNNMNNNNNONNNNNNNNNRKRTKMNMMMNMMMMFNNNNNNNNNNNNNNNNNNNNNFPPIHNNNNNNNNNOONNNOHNFFNNNNNNNNOONNNNNNNONNOOONNOONNNONNNNOOOOOOOONOOOOOOOOONNOONOONNNNNNNNNNNNOOO","n":["alphas","auto_clone","auto_clone_array","bench","circuits","curve","error","from_quarters","from_shifts","grid","groupmap","lagrange_basis_evaluations","linearization","loc","mina_curves","mina_poseidon","o1_utils","oracles","plonk_sponge","poly_commitment","precomputed_srs","proof","prover","prover_index","snarky","turshi","variable_map","variables","verifier","verifier_index","Alphas","MustConsumeIterator","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","drop","fmt","fmt","fmt","from","from","get_alphas","get_exponents","init","init","instantiate","into","into","into_iter","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","next","register","serialize","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BenchmarkCtx","batch_verification","borrow","borrow_mut","create_proof","deref","deref_mut","drop","from","init","into","new","num_gates","srs_size","try_from","try_into","type_id","vzip","argument","berkeley_columns","constraints","domain_constant_evaluation","domains","expr","gate","lookup","macros","polynomial","polynomials","scalars","wires","witness","ARGUMENT_TYPE","Argument","ArgumentData","ArgumentEnv","ArgumentType","ArgumentWitness","CONSTRAINTS","DynArgument","Gate","Lookup","Permutation","argument_type","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","challenges","clone","clone_into","coeff","coeff_chunk","coeffs","combined_constraints","combined_constraints","constant","constants","constraint_checks","constraints","constraints","create","curr","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","endo_coefficient","eq","equivalent","fmt","from","from","from","from","get_hash","hash","index","init","init","init","init","into","into","into","into","mds","next","serialize","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","witness","witness","witness_curr","witness_curr_chunk","witness_next","witness_next_chunk","Add","Atom","Cache","Coefficient","Column","Double","E","Environment","IfFeature","Index","LookupAggreg","LookupEnvironment","LookupKindIndex","LookupRuntimeSelector","LookupRuntimeTable","LookupSorted","LookupTable","Mul","Permutation","Pow","Square","Sub","Witness","Z","aggreg","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","challenges","clone","clone_into","cmp","coeff","coefficient","column_domain","constant","constants","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","domain","drop","drop","drop","eq","equivalent","fmt","from","from","from","get_challenges","get_column","get_constants","get_domain","get_hash","hash","index","index","init","init","init","into","into","into","is_alpha","l0_1","l0_1","latex","lookup","ocaml","partial_cmp","runtime_selector","runtime_table","selectors","serialize","sorted","table","text","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vanishes_on_zero_knowledge_and_previous_rows","vanishes_on_zero_knowledge_and_previous_rows","vzip","vzip","vzip","witness","witness","witness_curr","witness_next","z","Builder","ColumnEvaluations","ConstraintSystem","Custom","DisconnectedWires","EvaluatedColumnCoefficients","FeatureFlags","GateError","IncorrectPublic","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","coefficients","coefficients8","complete_add_selector4","create","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","describe","describe_vector","deserialize","deserialize","deserialize","deserialize","disable_gates_checks","disable_gates_checks","domain","drop","drop","drop","drop","drop","drop","emul_selector8","endo","endomul_scalar_selector8","evaluate","feature_flags","fmt","fmt","fmt","fmt","fmt","foreign_field_add","foreign_field_add_selector8","foreign_field_mul","foreign_field_mul_selector8","from","from","from","from","from","from","from_abi","from_gates","from_gates_and_lookup_features","from_value","gates","generic_selector","generic_selector4","init","init","init","init","init","init","into","into","into","into","into","into","into_abi","into_value","is_none","long_ref_from_abi","lookup","lookup_constraint_system","lookup_features","max_poly_size","mul_selector8","none","ocaml_binding","ocaml_desc","perm_scalars","permutation_coefficients","permutation_coefficients8","poseidon_selector","poseidon_selector8","precomputations","prev_challenges","prev_challenges","public","public","range_check0","range_check0_selector8","range_check1","range_check1_selector8","ref_from_abi","ref_mut_from_abi","return_abi","rot","rot_selector8","runtime","selector_polynomial","serialize","serialize","serialize","serialize","set_precomputations","shared_precomputations","shift","sid","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from_js_value","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unique_id","vector_from_abi","vector_into_abi","vzip","vzip","vzip","vzip","vzip","vzip","xor","xor_selector8","zk_rows","zk_rows_strict_lower_bound","err","row","DomainConstantEvaluations","borrow","borrow_mut","clone","clone_into","constant_1_d4","constant_1_d8","create","deref","deref_mut","deserialize","drop","fmt","from","init","into","permutation_vanishing_polynomial_l","permutation_vanishing_polynomial_m","poly_x_d1","serialize","to_owned","try_from","try_into","type_id","vanishes_on_zero_knowledge_and_previous_rows","vzip","EvaluationDomains","borrow","borrow_mut","clone","clone_into","create","d1","d2","d4","d8","deref","deref_mut","deserialize","drop","fmt","from","init","into","serialize","to_owned","try_from","try_into","type_id","vzip","Add","Add","Add","Add","Alpha","Atom","Atom","Atom","Beta","Cache","Cache","Cache","Cache","CacheId","Cell","Cell","Challenge","Challenge","ChallengeTerm","Challenges","Column","Column","ColumnEnvironment","ColumnEvaluations","Constant","Constant","Constant","ConstantExpr","ConstantExprInner","ConstantTerm","Constants","D1","D2","D4","D8","Domain","Double","Double","Double","Dup","EmptyStack","EndoCoefficient","Expr","ExprError","ExprInner","F","FailedLinearization","FeatureFlag","ForeignFieldAdd","ForeignFieldMul","FormattedOutput","Gamma","IfFeature","IfFeature","IfFeature","JointCombiner","Linearization","Literal","Literal","Load","LookupPattern","LookupShouldNotBeUsed","LookupTables","LookupsPerRow","Mds","MissingEvaluation","MissingIndexEvaluation","MissingRuntime","Mul","Mul","Mul","Mul","Operations","PolishToken","Pow","Pow","Pow","Pow","RangeCheck0","RangeCheck1","Rot","RowOffset","RuntimeLookupTables","SkipIf","SkipIfNot","Square","Square","Square","Store","Sub","Sub","Sub","Sub","TableWidth","ToPolish","UnnormalizedLagrangeBasis","UnnormalizedLagrangeBasis","VanishesOnZeroKnowledgeAndPreviousRows","VanishesOnZeroKnowledgeAndPreviousRows","Variable","Xor","add","add_assign","alpha","apply_feature_flags","as_literal","as_literal","as_literal","as_literal","as_literal","auto_clone","auto_clone_array","beta","beta","beta","boolean","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","cache","cell","cell","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","coeff","col","column_domain","combine_constraints","combine_constraints","constant","constant","constant","constant_term","constraints","crumb","default","default","degree","degree","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","double","double","double","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","endo_coefficient","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","evaluate","evaluate","evaluate","evaluate","evaluate","evaluate","evaluate_","evaluate_","evaluate_constants","evaluate_constants","evaluate_constants","evaluations","evaluations","evaluations","evaluations","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_u64","from_value","gamma","get_challenges","get_column","get_constants","get_domain","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","index_terms","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_value","is_alpha","is_alpha","is_alpha","is_alpha","is_alpha","is_one","is_zero","joint_combiner","l0_1","l0_1","latex","latex","latex","latex","latex","latex","latex_str","latex_str","linearize","linearize","literal","literal","literal","literal","literal","literal","literal","literal","map","mds","mul","mul","mul_assign","neg","ocaml","ocaml","ocaml","ocaml","ocaml","ocaml","ocaml_binding","ocaml_desc","ocaml_str","ocaml_str","offset","one","partial_cmp","partial_cmp","pow","pow","pows","prologue","row","serialize","serialize","serialize","serialize","serialize","serialize","serialize","square","square","square","sub","text","text","text","text","text","text","text_str","text_str","to_i64","to_literal","to_literal","to_literal","to_literal","to_literal","to_literal_ref","to_literal_ref","to_literal_ref","to_literal_ref","to_literal_ref","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_polish","to_polish","to_polish","to_polish","to_polish","to_polynomial","to_polynomial","to_string","to_string","to_u64","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_pow","two_to_2limb","two_to_3limb","two_to_limb","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unique_id","value","value","vanishes_on_zero_knowledge_and_previous_rows","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","witness","zero","zk_rows","zk_rows","col","row","ExprOps","boolean","boolean","cache","coeff","compact_limb","constant","crumb","crumb","double","literal","pow","square","two_pow","two_to_2limb","two_to_3limb","two_to_limb","witness","E","FeatureFlag","coeff","constant","index","witness","witness_curr","witness_next","CairoClaim","CairoFlags","CairoInstruction","CairoTransition","Circuit","CircuitGate","CircuitGateError","CircuitGateResult","CompleteAdd","Connect","Constraint","CopyConstraint","Curr","CurrOrNext","EndoMul","EndoMulScalar","Err","FailedToGetWitnessForRow","ForeignFieldAdd","ForeignFieldMul","GateType","Generic","InvalidConstraint","InvalidLookupConstraint","KeccakRound","KeccakSponge","Lookup","Next","Ok","Poseidon","RangeCheck0","RangeCheck1","Rot64","VarBaseMul","WireColumn","Xor16","Zero","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","caml","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","coeffs","connect_64bit","connect_cell_pair","connect_ffadd_range_checks","create_cairo_claim","create_cairo_flags","create_cairo_gadget","create_cairo_instruction","create_cairo_transition","create_chain_ffadd","create_compact_multi_range_check","create_endomul","create_foreign_field_mul","create_generic","create_generic_gadget","create_multi_range_check","create_poseidon","create_poseidon_gadget","create_range_check","create_rot","create_rot64","create_single_ffadd","create_vbmul","create_xor_gadget","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","describe","describe","describe_vector","describe_vector","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","endomul","eq","eq","eq","equivalent","equivalent","equivalent","extend_and","extend_chain_ffadd","extend_compact_multi_range_check","extend_foreign_field_mul","extend_generic","extend_high_bounds","extend_keccak","extend_multi_range_check","extend_not_gadget_checked_length","extend_not_gadget_unchecked_length","extend_range_check","extend_rot","extend_single_ffadd","extend_xor_gadget","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_abi","from_abi","from_i64","from_u64","from_value","from_value","gates","generate_asm","get_hash","get_hash","hash","hash","init","init","init","init","init","into","into","into","into","into","into_abi","into_abi","into_value","into_value","is_none","is_none","lookup_kinds","new","new","none","none","ocaml_binding","ocaml_binding","ocaml_desc","ocaml_desc","partial_cmp","partial_cmp","ps","public_input_size","rc","return_abi","return_abi","serialize","serialize","serialize","serialize","shift","to_i64","to_owned","to_owned","to_owned","to_owned","to_string","to_u64","try_from","try_from","try_from","try_from","try_from","try_from_js_value","try_from_js_value","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","unique_id","unique_id","vbmul","vector_from_abi","vector_from_abi","vector_into_abi","vector_into_abi","verify","verify_cairo_gate","verify_complete_add","verify_endomul","verify_endomul_scalar","verify_generic","verify_poseidon","verify_vbmul","verify_witness","vzip","vzip","vzip","vzip","vzip","wires","write","zero","dst","src","typ","CamlCircuitGate","borrow","borrow_mut","coeffs","deref","deref_mut","drop","from","from","from","from_value","init","into","into_value","ocaml_binding","ocaml_desc","try_from","try_into","typ","type_id","unique_id","vzip","wires","constraints","index","lookups","runtime_tables","tables","CONSTRAINTS","LookupConfiguration","aggregation","borrow","borrow_mut","clone","clone_into","constraints","deref","deref_mut","deserialize","drop","dummy_lookup","fmt","from","init","into","lookup_info","new","serialize","sorted","to_owned","try_from","try_into","type_id","verify","vzip","zk_patch","InconsistentTableLength","LookupConstraintSystem","LookupError","LookupSelectors","LookupTableIdCollision","LookupTableTooLong","TableIDZeroMustHaveZeroEntry","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","configuration","create","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","ffmul","fmt","fmt","fmt","fmt","from","from","from","index","index_mut","init","init","init","into","into","into","lookup","lookup_selectors","lookup_table","lookup_table8","map","range_check","runtime_selector","runtime_table_offset","runtime_tables","serialize","serialize","table_ids","table_ids8","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","xor","collision_type","length","maximum_allowed","Constant","ForeignFieldMul","JointLookup","JointLookupSpec","JointLookupValue","LocalPosition","Lookup","LookupFeatures","LookupInfo","LookupPattern","LookupPatternIter","LookupPatterns","LookupTableID","RangeCheck","SingleLookup","WitnessColumn","Xor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_row","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","column","create","create_from_gates","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","describe","describe","describe","describe_vector","describe_vector","describe_vector","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_as","drop","drop","drop","drop","drop","drop","drop","drop","drop","entry","entry","entry","eq","eq","eq","equivalent","equivalent","equivalent","evaluate","evaluate","evaluate","evaluate","features","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","foreign_field_mul","from","from","from","from","from","from","from","from","from","from_abi","from_abi","from_abi","from_gate","from_gates","from_gates","from_value","from_value","from_value","get_hash","hash","index","index_mut","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into_abi","into_abi","into_abi","into_iter","into_iter","into_value","into_value","into_value","is_none","is_none","is_none","iter","joint_lookup_used","joint_lookups_used","len","long_ref_from_abi","long_ref_from_abi","long_ref_from_abi","lookup","lookups","max_joint_size","max_joint_size","max_lookups_per_row","max_per_row","new","new","new","next","next_back","none","none","none","nth","ocaml_binding","ocaml_binding","ocaml_binding","ocaml_desc","ocaml_desc","ocaml_desc","par_bridge","partial_cmp","patterns","range_check","reduce","ref_from_abi","ref_from_abi","ref_from_abi","ref_mut_from_abi","ref_mut_from_abi","ref_mut_from_abi","return_abi","return_abi","return_abi","row","selector_polynomials_and_tables","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize_as","size_hint","table","table_id","table_id","table_id","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_js_value","try_from_js_value","try_from_js_value","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unique_id","unique_id","unique_id","uses_runtime_tables","value","vector_from_abi","vector_from_abi","vector_from_abi","vector_into_abi","vector_into_abi","vector_into_abi","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wasm","xor","RuntimeTable","RuntimeTableCfg","RuntimeTableSpec","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","caml","clone","clone","clone","clone_into","clone_into","clone_into","constraints","data","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","first_column","fmt","fmt","fmt","from","from","from","from","from","from","from","id","id","id","id","init","init","init","into","into","into","is_empty","len","len","serialize","serialize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","CamlRuntimeTable","CamlRuntimeTableCfg","CamlRuntimeTableSpec","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","data","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","first_column","from","from","from","from","from","from","from_value","from_value","from_value","id","id","id","init","init","init","into","into","into","into_value","into_value","into_value","len","ocaml_binding","ocaml_binding","ocaml_binding","ocaml_desc","ocaml_desc","ocaml_desc","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unique_id","unique_id","unique_id","vzip","vzip","vzip","GateLookupTable","GateLookupTables","LookupTable","RANGE_CHECK_TABLE_ID","RangeCheck","XOR_TABLE_ID","Xor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","caml","clone","clone","clone","clone_into","clone_into","clone_into","combine_table","combine_table_entry","data","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","get_hash","get_hash","get_table","has_zero_entry","hash","hash","id","index","index_mut","init","init","init","into","into","into","into_iter","is_empty","len","range_check","range_check","serialize","serialize","table_size","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","width","xor","xor","CamlLookupTable","borrow","borrow_mut","data","deref","deref_mut","drop","from","from","from_value","id","init","into","into_value","ocaml_binding","ocaml_desc","try_from","try_into","type_id","unique_id","vzip","RANGE_CHECK_UPPERBOUND","TABLE_SIZE","range_check_table","TABLE_SIZE","xor_table","COLUMNS","LookupEvals","LookupPolys","LookupShifts","WitnessEvals","WitnessOverDomains","WitnessShifts","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","d4","d8","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","h1","h1","h2","h2","init","init","init","init","init","init","into","into","into","into","into","into","l","l","lw","lw","next","next","this","this","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","w","z","and","complete_add","endomul_scalar","endosclmul","foreign_field_add","foreign_field_common","foreign_field_mul","generic","keccak","not","permutation","poseidon","range_check","rot","turshi","varbasemul","xor","create_and_witness","extend_and_witness","lookup_table","CompleteAdd","argument_type","borrow","borrow_mut","combined_constraints","constraint_checks","constraints","default","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","EndomulScalar","argument_type","borrow","borrow_mut","combined_constraints","constraint_checks","constraints","default","deref","deref_mut","drop","from","gen_witness","init","into","try_from","try_into","type_id","vzip","EndoMulResult","EndosclMul","acc","argument_type","borrow","borrow","borrow_mut","borrow_mut","combined_constraints","constraint_checks","constraints","default","deref","deref","deref_mut","deref_mut","drop","drop","from","from","gen_witness","init","init","into","into","n","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","circuitgates","gadget","witness","ForeignFieldAdd","argument_type","borrow","borrow_mut","combined_constraints","constraint_checks","constraints","default","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","Add","FFOps","Sub","borrow","borrow_mut","clone","clone_into","create_chain","deref","deref_mut","drop","eq","equivalent","extend_witness_bound_addition","fmt","from","init","into","sign","to_owned","try_from","try_into","type_id","vzip","BINARY_MODULUS_EXP","BigUintArrayCompose","BigUintArrayFieldHelpers","BigUintForeignFieldHelpers","FieldArrayBigUintHelpers","FieldArrayCompact","FieldArrayCompose","HI","KimchiForeignElement","LIMB_BITS","LIMB_COUNT","LO","MI","TWO_TO_LIMB","binary_modulus","compose","compose","limbs","max_foreign_field_modulus","negate","to_biguints","to_compact_field_limbs","to_compact_limbs","to_compact_limbs","to_field_limbs","to_field_limbs","to_fields","to_limbs","to_limbs","two","two_to_2limb","two_to_limb","circuitgates","gadget","witness","ForeignFieldMul","argument_type","borrow","borrow_mut","combined_constraints","compose_carry","compute_intermediate_products","compute_native_modulus_values","constraint_checks","constraints","default","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","GATE_COUNT","circuit_gate_constraint_count","circuit_gate_constraints","circuit_gate_selector_index","circuit_gates","combined_constraints","lookup_table","ExternalChecks","add_bound_check","add_compact_multi_range_check","add_high_bound_computation","add_limb_check","add_multi_range_check","borrow","borrow_mut","bounds","compact_multi_ranges","compute_bound","compute_high_bound","create","default","deref","deref_mut","drop","extend_witness_bound_addition","extend_witness_compact_multi_range_checks","extend_witness_high_bounds_computation","extend_witness_limb_checks","extend_witness_multi_range_checks","from","high_bounds","init","into","limb_ranges","multi_ranges","try_from","try_into","type_id","vzip","Add","CONSTRAINTS","Const","DOUBLE_GENERIC_COEFFS","DOUBLE_GENERIC_REGISTERS","GENERIC_COEFFS","GENERIC_REGISTERS","Generic","GenericGateSpec","Mul","Plus","Pub","argument_type","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","combined_constraints","constraint_checks","constraints","default","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","testing","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","left_coeff","mul_coeff","output_coeff","output_coeff","right_coeff","create_circuit","fill_in_witness","Keccak","OFF","RC","borrow","borrow_mut","bytestring","circuitgates","collapse","compose","constants","decompose","deref","deref_mut","drop","expand","expand_state","expand_word","from","gadget","init","into","num_blocks","pad","padded_length","quarters","reset","shift","sparse","try_from","try_into","type_id","vzip","witness","KeccakRound","KeccakSponge","argument_type","argument_type","borrow","borrow","borrow_mut","borrow_mut","combined_constraints","combined_constraints","constraint_checks","constraint_checks","constraints","constraints","default","default","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CAPACITY_IN_BYTES","CHI_SHIFTS_B_LEN","CHI_SHIFTS_B_OFF","CHI_SHIFTS_SUM_LEN","CHI_SHIFTS_SUM_OFF","DIM","IOTA_STATE_G_LEN","IOTA_STATE_G_OFF","KECCAK_COLS","PIRHO_DENSE_E_LEN","PIRHO_DENSE_E_OFF","PIRHO_DENSE_ROT_E_LEN","PIRHO_DENSE_ROT_E_OFF","PIRHO_EXPAND_ROT_E_LEN","PIRHO_EXPAND_ROT_E_OFF","PIRHO_QUOTIENT_E_LEN","PIRHO_QUOTIENT_E_OFF","PIRHO_REMAINDER_E_LEN","PIRHO_REMAINDER_E_OFF","PIRHO_SHIFTS_E_LEN","PIRHO_SHIFTS_E_OFF","QUARTERS","RATE_IN_BYTES","ROUNDS","SHIFTS","SHIFTS_LEN","SPONGE_BYTES_LEN","SPONGE_BYTES_OFF","SPONGE_COLS","SPONGE_NEW_BLOCK_LEN","SPONGE_NEW_BLOCK_OFF","SPONGE_NEW_STATE_LEN","SPONGE_NEW_STATE_OFF","SPONGE_OLD_STATE_LEN","SPONGE_OLD_STATE_OFF","SPONGE_SHIFTS_LEN","SPONGE_SHIFTS_OFF","SPONGE_XOR_STATE_LEN","SPONGE_XOR_STATE_OFF","SPONGE_ZEROS_LEN","SPONGE_ZEROS_OFF","STATE_LEN","THETA_DENSE_C_LEN","THETA_DENSE_C_OFF","THETA_DENSE_ROT_C_LEN","THETA_DENSE_ROT_C_OFF","THETA_EXPAND_ROT_C_LEN","THETA_EXPAND_ROT_C_OFF","THETA_QUOTIENT_C_LEN","THETA_QUOTIENT_C_OFF","THETA_REMAINDER_C_LEN","THETA_REMAINDER_C_OFF","THETA_SHIFTS_C_LEN","THETA_SHIFTS_C_OFF","THETA_STATE_A_LEN","THETA_STATE_A_OFF","Chi","Iota","PiRho","Rotation","Theta","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create","create","create","create","dense_c","dense_e","dense_rot_c","dense_rot_e","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","expand_rot_c","expand_rot_e","extend_keccak_witness","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","quotient_c","quotient_e","remainder_c","remainder_e","round_constants","shifts_b","shifts_c","shifts_e","shifts_sum","state_b","state_e","state_f","state_g","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","extend_not_witness_checked_length","extend_not_witness_unchecked_length","CONSTRAINTS","Shifts","borrow","borrow_mut","deref","deref_mut","drop","eval_permutation_vanishing_polynomial","eval_vanishes_on_last_n_rows","from","init","into","new","permutation_vanishing_polynomial","shifts","try_from","try_into","type_id","vanishes_on_last_n_rows","vzip","zk_w","POS_ROWS_PER_HASH","Poseidon","ROUNDS_PER_HASH","ROUNDS_PER_ROW","SPONGE_WIDTH","STATE_ORDER","argument_type","borrow","borrow_mut","combined_constraints","constraint_checks","constraints","default","deref","deref_mut","drop","from","generate_witness","init","into","round_to_cols","try_from","try_into","type_id","vzip","circuitgates","gadget","witness","RangeCheck0","RangeCheck1","argument_type","argument_type","borrow","borrow","borrow_mut","borrow_mut","combined_constraints","combined_constraints","constraint_checks","constraint_checks","constraints","constraints","default","default","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","GATE_COUNT","circuit_gate_constraint_count","circuit_gate_constraints","circuit_gates","combined_constraints","lookup_table","create","create_multi","create_multi_compact","create_multi_compact_limbs","create_multi_limbs","extend","extend_multi","extend_multi_compact","extend_multi_compact_limbs","extend_multi_from_fe","extend_multi_limbs","extend_single","range_check_0_row","Left","Right","Rot64","RotMode","argument_type","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","combined_constraints","constraint_checks","constraints","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","equivalent","extend_rot","fmt","from","from","init","init","into","into","lookup_table","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CIRCUIT_GATE_COUNT","Claim","Flags","Instruction","Transition","argument_type","argument_type","argument_type","argument_type","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_gate_combined_constraints","combined_constraints","combined_constraints","combined_constraints","combined_constraints","constraint_checks","constraint_checks","constraint_checks","constraint_checks","constraints","constraints","constraints","constraints","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","from","from","from","from","init","init","init","init","into","into","into","into","testing","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","witness","ensure_cairo_gate","cairo_witness","Layout","VarbaseMul","VarbaseMulResult","acc","argument_type","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","combined_constraints","constraint_checks","constraints","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","init","init","init","into","into","into","n","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","witness","Xor16","argument_type","borrow","borrow_mut","combined_constraints","constraint_checks","constraints","create_xor_witness","default","deref","deref_mut","drop","extend_xor_witness","from","init","into","lookup_table","num_xors","try_from","try_into","type_id","vzip","RandomOracles","alpha","alpha_chal","beta","borrow","borrow_mut","caml","clone","clone_into","default","deref","deref_mut","drop","fmt","from","from","gamma","init","into","joint_combiner","to_owned","try_from","try_into","type_id","u","u_chal","v","v_chal","vzip","zeta","zeta_chal","CamlRandomOracles","alpha","alpha_chal","beta","borrow","borrow_mut","deref","deref_mut","drop","from","from","from_value","gamma","init","into","into_value","joint_combiner","ocaml_binding","ocaml_desc","try_from","try_into","type_id","u","u_chal","unique_id","v","v_chal","vzip","zeta","zeta_chal","COLUMNS","GateWires","PERMUTS","WIRES","Wirable","Wire","borrow","borrow_mut","caml","clone","clone_into","col","create","default","deref","deref_mut","describe","describe_vector","deserialize","drop","eq","equivalent","fmt","for_row","from","from","from_abi","init","into","into_abi","is_none","long_ref_from_abi","new","new","new","none","read","ref_from_abi","ref_mut_from_abi","return_abi","row","serialize","to_owned","try_from","try_from_js_value","try_into","type_id","vector_from_abi","vector_into_abi","vzip","wasm","wire","wire","write","CamlWire","borrow","borrow_mut","col","deref","deref_mut","drop","from","from","from_value","init","into","into_value","ocaml_binding","ocaml_desc","row","try_from","try_into","type_id","unique_id","vzip","ConstantCell","CopyBitsCell","CopyCell","CopyShiftCell","IndexCell","VariableBitsCell","VariableCell","Variables","WitnessCell","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create","create","create","create","create","create","create","create","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","index","index_mut","init","init","init","init","init","init","init","init","init","init_cell","init_row","insert","into","into","into","into","into","into","into","into","length","length","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","value","value","value","value","value","variable_map","variables","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","KimchiCurve","NAME","endos","other_curve_endo","other_curve_prime_subgroup_generator","other_curve_sponge_params","sponge_params","ConstraintSystem","DifferentSRS","DomainConstructionFailed","DomainCreation","DomainCreationError","DomainSizeFailed","IncorrectCommitmentLength","IncorrectEvaluationsLength","IncorrectPrevChallengesLength","IncorrectPubicInputLength","IncorrectRuntimeProof","LookupCommitmentMissing","LookupCreation","LookupEvalsMissing","MissingCommitment","MissingEvaluation","MissingPublicInputEvaluation","NoRoomForZkInWitness","NotZeroKnowledge","OpenProof","Permutation","ProofInconsistentLookup","Prover","ProverError","RuntimeTablesInconsistent","SRSHasBeenSet","SRSTooSmall","SetupError","ValueNotInTable","VerifierIndexError","VerifyError","WitnessCsInconsistent","WrongBlinders","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","LagrangeBasisEvaluations","borrow","borrow_mut","deref","deref_mut","drop","evaluate","evaluate_boolean","from","init","into","new","try_from","try_into","type_id","vzip","constraints_expr","expr_linearization","linearization_columns","OraclesResult","all_alphas","borrow","borrow_mut","caml","combined_inner_product","deref","deref_mut","digest","drop","fq_sponge","from","ft_eval0","init","into","oracles","polys","powers_of_eval_points_for_chunks","public_evals","try_from","try_into","type_id","vzip","zeta1","CamlOracles","borrow","borrow_mut","create_caml_oracles","deref","deref_mut","digest_before_evaluations","drop","from","from_value","init","into","into_value","o","ocaml_binding","ocaml_desc","opening_prechallenges","public_evals","try_from","try_into","type_id","unique_id","vzip","FrSponge","absorb","absorb_evaluations","absorb_multiple","challenge","digest","new","SERIALIZED_SRS_SIZE","get_srs","LookupCommitments","PointEvaluations","ProofEvaluations","ProverCommitments","ProverProof","RecursionChallenge","aggreg","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","caml","chals","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coefficients","combine","comm","commitments","complete_add_selector","create","create_recursive","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","dummy_with_witness_evaluations","emul_selector","endomul_scalar_selector","evals","evals","evaluate","fmt","fmt","fmt","fmt","fmt","fmt","foreign_field_add_selector","foreign_field_mul_lookup_selector","foreign_field_mul_selector","from","from","from","from","from","from","from","from","from","from","from_value","ft_eval1","generic_selector","get_column","init","init","init","init","init","init","into","into","into","into","into","into","into_value","lookup","lookup_aggregation","lookup_gate_lookup_selector","lookup_sorted","lookup_table","map","map","map_ref","map_ref","mul_selector","new","ocaml_binding","ocaml_desc","oracles","poseidon_selector","prev_challenges","proof","public","range_check0_selector","range_check1_selector","range_check_lookup_selector","rot_selector","runtime","runtime_lookup_table","runtime_lookup_table_selector","s","serialize","serialize","serialize","serialize","serialize","serialize","sorted","t_comm","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unique_id","vzip","vzip","vzip","vzip","vzip","vzip","w","w_comm","xor_lookup_selector","xor_selector","z","z_comm","zeta","zeta_omega","CamlProofEvaluations","CamlRecursionChallenge","borrow","borrow","borrow_mut","borrow_mut","chals","clone","clone","clone_into","clone_into","coefficients","comm","complete_add_selector","deref","deref","deref_mut","deref_mut","drop","drop","emul_selector","endomul_scalar_selector","foreign_field_add_selector","foreign_field_mul_lookup_selector","foreign_field_mul_selector","from","from","from","from_value","from_value","generic_selector","init","init","into","into","into_value","into_value","lookup_aggregation","lookup_gate_lookup_selector","lookup_sorted","lookup_table","mul_selector","ocaml_binding","ocaml_binding","ocaml_desc","ocaml_desc","poseidon_selector","range_check0_selector","range_check1_selector","range_check_lookup_selector","rot_selector","runtime_lookup_table","runtime_lookup_table_selector","s","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unique_id","unique_id","vzip","vzip","w","xor_lookup_selector","xor_selector","z","caml","internal_traces","CamlLookupCommitments","CamlProofWithPublic","CamlProverCommitments","CamlProverProof","CamlProverTraces","aggreg","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","commitments","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","evals","from","from","from","from","from","from","from","from_value","from_value","from_value","from_value","ft_eval1","init","init","init","init","into","into","into","into","into_value","into_value","into_value","into_value","lookup","ocaml_binding","ocaml_binding","ocaml_binding","ocaml_binding","ocaml_desc","ocaml_desc","ocaml_desc","ocaml_desc","prev_challenges","proof","proof","public","public_evals","runtime","sorted","t_comm","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unique_id","unique_id","unique_id","unique_id","vzip","vzip","vzip","vzip","w_comm","z_comm","TRACES","Traces","borrow","borrow_mut","build_polynomials","caml","chunk_eval_zeta_omega_poly","clone","clone_into","commit_to_witness_columns","compute_ft_poly","compute_index_evals","compute_quotient_poly","create_aggregated_evaluation_proof","create_recursive","create_recursive_done","default","deref","deref_mut","drop","eval_witness_polynomials_over_domains","fmt","fmt","from","ft_eval_zeta_omega","init","into","lagrange_basis_eval_zeta_omega_poly","lagrange_basis_eval_zeta_poly","pad_witness","pasta_fp_plonk_proof_create","pasta_fq_plonk_proof_create","serialize","set_up_fq_sponge","start_tracing","take_traces","to_owned","to_string","try_from","try_into","type_id","use_lookup","vzip","z_permutation_aggregation_polynomial","CamlTraces","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","from","from_value","init","into","into_value","ocaml_binding","ocaml_desc","try_from","try_into","type_id","unique_id","vzip","ProverIndex","borrow","borrow_mut","clone","clone_into","column_evaluations","compute_verifier_index_digest","create","cs","deref","deref_mut","deserialize","drop","fmt","from","init","into","linearization","max_poly_size","perm_aggreg","perm_lnrz","perm_quot","powers_of_alpha","serialize","srs","testing","to_owned","try_from","try_into","type_id","verifier_index","verifier_index","verifier_index_digest","verifier_index_digest","verify","verify_generic","vzip","new_index_for_test","new_index_for_test_with_lookups","new_index_for_test_with_lookups_and_custom_srs","api","asm","boolean","constants","constraint_system","cvar","errors","folding","poseidon","prelude","runner","snarky_type","union_find","CompiledCircuit","Curve","PrivateInput","Proof","ProverIndexWrapper","PublicInput","PublicOutput","SnarkyCircuit","VerifierIndexWrapper","Witness","asm","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit","compile_to_indexes","debug","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","from","from","from","from","gates","init","init","init","init","into","into","into","into","prove","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","vzip","vzip","vzip","vzip","OrderedHashSet","borrow","borrow_mut","default","deref","deref_mut","drop","from","init","insert","into","is_empty","iter","len","pos","try_from","try_into","type_id","vzip","Boolean","all","and","any","borrow","borrow_mut","check","clone","clone_into","constraint_system_auxiliary","create_unsafe","deref","deref_mut","drop","false_","fmt","from","from_cvars_unsafe","init","into","not","or","to_constant","to_cvars","to_field_var","to_owned","true_","try_from","try_into","type_id","value_of_field_elements","value_to_field_elements","vzip","xor","Constants","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","endo","fmt","from","init","into","new","poseidon","to_owned","try_from","try_into","type_id","vzip","Basic","BasicInput","BasicSnarkyConstraint","Boolean","EcAddComplete","EcAddCompleteInput","EcEndoscalar","EcEndoscale","EcEndoscaleInput","EcScale","EndoscaleRound","EndoscaleScalarRound","Equal","Field","KimchiConstraint","Poseidon","Poseidon2","PoseidonInput","R1CS","RangeCheck","ScaleRound","SnarkyConstraintSystem","SnarkyCvar","Square","a0","a8","accs","add_basic_snarky_constraint","add_constraint","b0","b1","b2","b3","b4","b8","base","bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","canonicalize","check_constraint","check_constraint","clone","clone_into","compute_witness","compute_witness_for_ocaml","create","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","digest","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","finalize","finalize_and_get_gates","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_value","from_value","from_value","from_value","from_value","from_value","from_value","from_value","get_prev_challenges","get_primary_input_size","get_rows_len","inf","inf_z","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into_value","into_value","into_value","into_value","into_value","into_value","into_value","into_value","l","last","m","n0","n8","n_acc","n_acc","n_next","n_prev","o","ocaml_binding","ocaml_binding","ocaml_binding","ocaml_binding","ocaml_binding","ocaml_binding","ocaml_binding","ocaml_binding","ocaml_desc","ocaml_desc","ocaml_desc","ocaml_desc","ocaml_desc","ocaml_desc","ocaml_desc","ocaml_desc","p1","p2","p3","r","s1","s3","same_x","set_prev_challenges","set_primary_input_size","set_public_input_size","slope","ss","state","states","to_constant_and_terms","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","x0","x1","x2","x21_inv","x3","x4","x5","x6","x7","xp","xr","xs","xt","yp","yr","ys","yt","Add","Constant","FieldVar","Scale","ScaledCVar","Term","Var","add","add","add","add","assert_equals","borrow","borrow_mut","check","clone","clone_into","constant","constraint_system_auxiliary","deref","deref_mut","drop","equal","eval","fmt","from","from_cvars_unsafe","init","into","linear_combination","mul","neg","neg","scale","seal","sub","sub","sub","sub","sum","to_constant_and_terms","to_constant_and_terms","to_cvars","to_owned","try_from","try_into","type_id","value_of_field_elements","value_to_field_elements","vzip","zero","CircuitReturnVar","CompilationError","ConstantAssertEquals","Err","Err","Err","Ok","Ok","Ok","PubInputMismatch","RealSnarkyError","RuntimeError","SnarkyCompilationError","SnarkyCompileResult","SnarkyError","SnarkyResult","SnarkyRuntimeError","SnarkyRuntimeResult","UnsatisfiedBooleanConstraint","UnsatisfiedEqualConstraint","UnsatisfiedGenericConstraint","UnsatisfiedR1CSConstraint","UnsatisfiedSquareConstraint","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","label_stack","loc","new","new_with_ctx","source","source","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","ForeignElement","FullChallenge","Private","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone_into","clone_into","constraint_system_auxiliary","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","from","from","from","from_cvars_unsafe","init","init","init","into","into","into","to_cvars","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value_of_field_elements","value_to_field_elements","vzip","vzip","vzip","CircuitAbsorb","DuplexState","absorb","absorb","borrow","borrow_mut","default","deref","deref_mut","drop","from","init","into","new","poseidon","squeeze","try_from","try_into","type_id","vzip","FieldVar","RunState","SnarkyResult","loc","BasicSnarkyConstraint","Constraint","KimchiConstraint","RunState","WitnessGeneration","add_constraint","add_label","alloc_var","as_prover","assert_eq","assert_r1cs","borrow","borrow","borrow_mut","borrow_mut","check_constraint","compilation_error","compute","constraints_counter","constraints_counter","constraints_counter","deref","deref","deref_mut","deref_mut","drop","drop","error","eval_constraints","fmt","fmt","from","from","generate_witness","generate_witness_init","get_private_inputs","has_witness","if_","init","init","into","into","new","next_var","num_public_inputs","pop_label","poseidon","public_input","range_check","read_var","read_var","read_var","read_var_idx","runtime_error","store_field_elt","system","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_label","Auxiliary","CircuitAndValue","OutOfCircuit","SIZE_IN_FIELD_ELEMENTS","SnarkyType","check","compute","constraint_system_auxiliary","from_cvars_unsafe","from_value","read","to_cvars","to_value","value_of_field_elements","value_to_field_elements","DisjointSet","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","find","fmt","from","init","into","make_set","new","to_owned","try_from","try_into","type_id","union","vzip","Context","Err","Ok","Result","batch_verify","borrow","borrow_mut","deref","deref_mut","drop","from","get_column","init","into","proof","public_input","try_from","try_into","type_id","verifier_index","verify","vzip","LookupVerifierIndex","VerifierIndex","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","coefficients_comm","complete_add_comm","deref","deref","deref_mut","deref_mut","deserialize","deserialize","digest","domain","drop","drop","emul_comm","endo","endomul_scalar_comm","fmt","fmt","foreign_field_add_comm","foreign_field_mul_comm","from","from","from_file","generic_comm","init","init","into","into","joint_lookup_used","linearization","lookup_index","lookup_info","lookup_selectors","lookup_table","max_poly_size","mul_comm","permutation_vanishing_polynomial_m","permutation_vanishing_polynomial_m","powers_of_alpha","prev_challenges","psm_comm","public","range_check0_comm","range_check1_comm","rot_comm","runtime_tables_selector","serialize","serialize","shift","sigma_comm","srs","srs","table_ids","to_file","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","w","w","xor_comm","zk_rows"],"q":[[0,"kimchi"],[30,"kimchi::alphas"],[86,"kimchi::bench"],[104,"kimchi::circuits"],[118,"kimchi::circuits::argument"],[212,"kimchi::circuits::berkeley_columns"],[317,"kimchi::circuits::constraints"],[494,"kimchi::circuits::constraints::GateError"],[496,"kimchi::circuits::domain_constant_evaluation"],[522,"kimchi::circuits::domains"],[546,"kimchi::circuits::expr"],[1109,"kimchi::circuits::expr::ConstantTerm"],[1111,"kimchi::circuits::expr::constraints"],[1129,"kimchi::circuits::expr::prologue"],[1137,"kimchi::circuits::gate"],[1374,"kimchi::circuits::gate::CircuitGateError"],[1377,"kimchi::circuits::gate::caml"],[1400,"kimchi::circuits::lookup"],[1405,"kimchi::circuits::lookup::constraints"],[1433,"kimchi::circuits::lookup::index"],[1513,"kimchi::circuits::lookup::index::LookupError"],[1516,"kimchi::circuits::lookup::lookups"],[1811,"kimchi::circuits::lookup::runtime_tables"],[1881,"kimchi::circuits::lookup::runtime_tables::caml"],[1944,"kimchi::circuits::lookup::tables"],[2030,"kimchi::circuits::lookup::tables::caml"],[2051,"kimchi::circuits::lookup::tables::range_check"],[2054,"kimchi::circuits::lookup::tables::xor"],[2056,"kimchi::circuits::polynomial"],[2169,"kimchi::circuits::polynomials"],[2186,"kimchi::circuits::polynomials::and"],[2189,"kimchi::circuits::polynomials::complete_add"],[2207,"kimchi::circuits::polynomials::endomul_scalar"],[2226,"kimchi::circuits::polynomials::endosclmul"],[2260,"kimchi::circuits::polynomials::foreign_field_add"],[2263,"kimchi::circuits::polynomials::foreign_field_add::circuitgates"],[2281,"kimchi::circuits::polynomials::foreign_field_add::witness"],[2305,"kimchi::circuits::polynomials::foreign_field_common"],[2337,"kimchi::circuits::polynomials::foreign_field_mul"],[2340,"kimchi::circuits::polynomials::foreign_field_mul::circuitgates"],[2361,"kimchi::circuits::polynomials::foreign_field_mul::gadget"],[2368,"kimchi::circuits::polynomials::foreign_field_mul::witness"],[2400,"kimchi::circuits::polynomials::generic"],[2445,"kimchi::circuits::polynomials::generic::GenericGateSpec"],[2450,"kimchi::circuits::polynomials::generic::testing"],[2452,"kimchi::circuits::polynomials::keccak"],[2485,"kimchi::circuits::polynomials::keccak::circuitgates"],[2521,"kimchi::circuits::polynomials::keccak::constants"],[2577,"kimchi::circuits::polynomials::keccak::witness"],[2666,"kimchi::circuits::polynomials::not"],[2668,"kimchi::circuits::polynomials::permutation"],[2689,"kimchi::circuits::polynomials::poseidon"],[2714,"kimchi::circuits::polynomials::range_check"],[2717,"kimchi::circuits::polynomials::range_check::circuitgates"],[2753,"kimchi::circuits::polynomials::range_check::gadget"],[2759,"kimchi::circuits::polynomials::range_check::witness"],[2772,"kimchi::circuits::polynomials::rot"],[2813,"kimchi::circuits::polynomials::turshi"],[2885,"kimchi::circuits::polynomials::turshi::testing"],[2886,"kimchi::circuits::polynomials::turshi::witness"],[2887,"kimchi::circuits::polynomials::varbasemul"],[2934,"kimchi::circuits::polynomials::xor"],[2956,"kimchi::circuits::scalars"],[2987,"kimchi::circuits::scalars::caml"],[3017,"kimchi::circuits::wires"],[3071,"kimchi::circuits::wires::caml"],[3092,"kimchi::circuits::witness"],[3223,"kimchi::curve"],[3230,"kimchi::error"],[3353,"kimchi::lagrange_basis_evaluations"],[3369,"kimchi::linearization"],[3372,"kimchi::oracles"],[3396,"kimchi::oracles::caml"],[3419,"kimchi::plonk_sponge"],[3426,"kimchi::precomputed_srs"],[3428,"kimchi::proof"],[3608,"kimchi::proof::caml"],[3678,"kimchi::prover"],[3680,"kimchi::prover::caml"],[3777,"kimchi::prover::internal_traces"],[3821,"kimchi::prover::internal_traces::caml"],[3841,"kimchi::prover_index"],[3878,"kimchi::prover_index::testing"],[3881,"kimchi::snarky"],[3894,"kimchi::snarky::api"],[3960,"kimchi::snarky::asm"],[3979,"kimchi::snarky::boolean"],[4013,"kimchi::snarky::constants"],[4034,"kimchi::snarky::constraint_system"],[4301,"kimchi::snarky::cvar"],[4352,"kimchi::snarky::errors"],[4450,"kimchi::snarky::folding"],[4503,"kimchi::snarky::poseidon"],[4523,"kimchi::snarky::prelude"],[4527,"kimchi::snarky::runner"],[4592,"kimchi::snarky::snarky_type"],[4607,"kimchi::snarky::union_find"],[4629,"kimchi::verifier"],[4651,"kimchi::verifier_index"],[4728,"core::clone"],[4729,"core::default"],[4730,"core::result"],[4731,"serde::de"],[4732,"serde::de"],[4733,"core::iter::traits::iterator"],[4734,"core::fmt"],[4735,"core::iter::adapters::skip"],[4736,"core::iter::adapters::take"],[4737,"core::iter::adapters::cloned"],[4738,"ark_ff::fields"],[4739,"core::ops::range"],[4740,"core::option"],[4741,"serde::ser"],[4742,"serde::ser"],[4743,"core::any"],[4744,"mina_curves::pasta::curves::vesta"],[4745,"poly_commitment::evaluation_proof"],[4746,"mina_curves::pasta::fields::fp"],[4747,"alloc::vec"],[4748,"ark_ff::fields"],[4749,"core::marker"],[4750,"core::hash"],[4751,"ark_ff::fields"],[4752,"ark_poly::evaluations::univariate"],[4753,"std::collections::hash::map"],[4754,"ark_ff::fields"],[4755,"ocaml::value"],[4756,"ocaml_interop::runtime"],[4757,"ocaml_gen"],[4758,"alloc::sync"],[4759,"wasm_bindgen"],[4760,"alloc::boxed"],[4761,"num_traits::identities"],[4762,"core::cmp"],[4763,"core::ops::arith"],[4764,"num_traits::identities"],[4765,"core::cmp"],[4766,"core::convert"],[4767,"poly_commitment"],[4768,"std::io::error"],[4769,"std::io"],[4770,"ocaml::value"],[4771,"ark_serialize"],[4772,"ark_serialize"],[4773,"core::convert"],[4774,"poly_commitment::commitment"],[4775,"mina_poseidon::poseidon"],[4776,"o1_utils::foreign_field"],[4777,"turshi::runner"],[4778,"std::io"],[4779,"mina_poseidon::sponge"],[4780,"poly_commitment::srs"],[4781,"ark_ec"],[4782,"mina_poseidon::sponge"],[4783,"rand_core"],[4784,"core::error"],[4785,"core::ops::function"]],"d":["This module implements an abstraction to keep track of the …","Auto clone macro - Helps make constraints more readable by …","","","","This module contains a useful trait for recursion: …","This module implements the <code>ProverError</code> type.","","","","","","This module implements the linearization.","Handy macro to return the filename and line number of a …","","","","This type and logic only exists for the OCaml side. As we …","","","To prover and verify proofs you need a Structured …","This module implements the data structures of a proof.","This module implements prover’s zk-proof primitive.","This module implements the prover index as <code>ProverIndex</code>.","Snarky is the front end to kimchi, allowing users to write …","","Macro to simplify creation of layout map","Macro to simplify mapping of layout variable","This module implements zk-proof batch verifier …","This module implements the verifier index as <code>VerifierIndex</code>.","This type can be used to create a mapping between powers …","Wrapper around an iterator that warns you if not consumed …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","This function allows us to retrieve the powers of alpha, …","Returns a range of exponents, for a given ArgumentType, …","","","Instantiates the ranges with an actual field element <code>alpha</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Registers a new ArgumentType, associating it with a number …","","","","","","","","","","","","","","","","Produces a proof","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","This will create a context that allows for benchmarks of …","","","","","","","An argument is simply a number of constraints, which we …","","This module implements Plonk circuit constraint primitive.","This contains the DomainConstantEvaluations which is used …","","","This module implements Plonk constraint gate primitive.","This module implement the lookup argument. See …","","This module implements Plonk prover polynomials primitive.","","This module implements Plonk prover polynomial evaluations …","This module implements Plonk circuit gate wires primitive.","","The type of constraints that this will produce. This is …","The interface for a minimal argument implementation.","Argument environment data for constraints of field elements","The argument environment is used to specify how the …","A constraint type represents a polynomial that will be …","Witness data for a argument","The number of constraints created by the argument.","","Gates in the PLONK constraint system. As gates are …","The lookup argument","The permutation argument","","","","","","","","","","","","","Coefficient value at index idx","Chunk of consecutive coefficients in an interval [from, to)","Gate coefficients","","Returns constraints safely combined via the passed …","Constant value (see ConstantExpr for supported constants)","Constants","Constraints for this argument","","Returns the set of constraints required to prove this …","Initialize the environment for creating constraints of …","Witness for current row","Initialize the environment for creating Expr constraints …","","","","","","","","","","","","","","Helper to access endomorphism coefficient constant","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Helper to access maximum distance separable matrix …","Witness for next row","","","","","","","","","","","","","","","","","","","Witness cell (row, col)","Witness rows","Witness cell on current row","Witness cells in current row in an interval [from, to)","Witness cell on next row","Witness cells in next row in an interval [from, to)","","","","","A type representing one of the polynomials involved in the …","","An alias for the intended usage of the expression type in …","The collection of polynomials (all in evaluation form) and …","","","","The polynomials specific to the lookup argument.","","","","","","","","","","","","","The lookup aggregation polynomials.","","","","","","","Challenges from the IOP.","","","","","The coefficient column polynomials","","Convenience function to create a constant as Expr.","Constant values required","","","","","","","","The domains used in the PLONK argument.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Handy function to quickly create an expression for a gate.","The index selector polynomials.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The value <code>prod_{j != 1} (1 - omega^j)</code>, used for efficiently","","Lookup specific polynomials","","","The evaluations of the optional runtime selector …","The evaluations of the optional runtime table.","The lookup-type selector polynomials.","","The sorted lookup table polynomials.","The evaluations of the combined lookup table polynomial.","","","","","","","","","","","","","The polynomial that vanishes on the zero-knowledge rows …","","","","Helper function to quickly create an expression for a …","The witness column polynomials","Same as witness but for the current row.","Same as witness but for the next row.","The permutation aggregation polynomial.","","The polynomials representing columns, in evaluation form. …","","A specific gate did not verify correctly","Some connected wires have different values","The polynomials representing evaluated columns, in …","Flags for optional features in the constraint system","Represents an error found when verifying a witness with a …","A public gate was incorrectly connected","","","","","","","","","","","","","Build the ConstraintSystem from a Builder.","","","","","","","","","gate coefficients","coefficients over domain d8","EC point addition selector over domain d4","Initializes the <code>ConstraintSystem&lt;F&gt;</code> on input <code>gates</code> and …","","","","","","","","","","","","","","","","","","","Disable gates checks (for testing; only enables with …","Disable gates checks (for testing; only enables with …","evaluation domains","","","","","","","endoscalar multiplication selector over domain d8","coefficient for the group endomorphism","EC point addition selector over domain d8","evaluate witness polynomials over domains","flags for optional features","","","","","","Foreign field addition gate","Foreign field addition gate selector over domain d8","Foreign field multiplication gate","Foreign field multiplication gate selector over domain d8","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","circuit gates","generic gate selector","generic selector over domain d4","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Set up the lookup tables. If not invoked, it is <code>vec![]</code> by …","lookup constraint system","Lookup features","","scalar multiplication selector over domain d8","","","","","permutation coefficients","permutation coefficients over domain d8","poseidon gate selector","poseidon selector over domain d8","","Set up the number of previous challenges, used for …","number of previous evaluation challenges, for recursive …","Set up the number of public inputs. If not invoked, it …","number of public inputs","RangeCheck0 gate","RangeCheck0 gate selector over domain d8","RangeCheck1 gate","RangeCheck1 gate selector over domain d8","","","","ROT gate","Rot gate selector over domain d8","Set up the runtime tables. If not invoked, it is <code>None</code> by …","Create selector polynomial for a circuit gate","","","","","","Set up the shared precomputations. If not invoked, it is …","wire coordinate shifts","SID polynomial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","XOR gate","Xor gate selector over domain d8","","","","","pre-computed polynomials that depend only on the chosen …","","","","","0-th Lagrange evaluated over domain.d4","0-th Lagrange evaluated over domain.d8","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","zero-knowledge polynomial over domain.d8","","1-st Lagrange evaluated over domain.d8","","","","","","the polynomial that vanishes on the zero-knowledge rows …","","","","","","","Creates 4 evaluation domains <code>d1</code> (of size <code>n</code>), <code>d2</code> (of size <code>2n</code>…","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","A cache","","","","A key for a cached value","","","","","Define challenges the verifier coins during the …","","The generic type of column the environment can use. In …","","","","","","","","","Define the constant terms an expression can use. It can be …","The collection of constants required to evaluate an <code>Expr</code>.","","","","","","","","","","","","An multi-variate polynomial over the base ring <code>C</code> with …","","","","","The feature flags that can be used to enable or disable …","","","","","","","","","A “linearization”, which is linear combination with <code>E</code> …","","","","","","","Enabled if the number of lookups per row is at least the …","","","","","","","","","","For efficiency of evaluation, we compile expressions to …","","","","","","","","","","Skip the given number of tokens if the feature is enabled.","Skip the given number of tokens if the feature is disabled.","","","","","","","","","Enabled if the table width is at least the given number","","UnnormalizedLagrangeBasis(i) is (x^n - 1) / (x - omega^i)","","","","A type representing a variable which can appear in a …","","","","The challenge alpha from the PLONK IOP.","","Obtains the representation of some constants as a literal. …","","","","","Auto clone macro - Helps make constraints more readable by …","","The expression <code>beta</code>.","The expression <code>beta</code>.","The challenge beta from the PLONK IOP.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convenience function for constructing cell variables.","Convenience function for constructing cell variables.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The column of this variable","Defines the domain over which the column is evaluated","Combines multiple constraints <code>[c0, ..., cn]</code> into a single …","Combines multiple constraints <code>[c0, ..., cn]</code> into a single …","Convenience function for constructing constant expressions.","","Convenience function for constructing constant expressions.","","A number of useful constraints","","","","Return the degree of the expression. The degree of a cell …","Return the degree of the expression. The degree of a cell …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The endomorphism coefficient","","","","","","","","","","","","","","","","","","","","","Evaluate an expression as a field element against an …","Evaluate an expression into a field element.","Evaluate an expression as a field element against an …","Evaluate an expression into a field element.","Evaluate an RPN expression to a field element.","Evaluate an expression as a field element against the …","Evaluate an expression as a field element against the …","Evaluate the constant expressions in this expression down …","Evaluate the constant expressions in this expression down …","Evaluate the constants in a linearization with …","Compute the polynomial corresponding to this expression, …","Compute the polynomial corresponding to this expression, …","Compute the polynomial corresponding to this expression, …","Compute the polynomial corresponding to this expression, …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","The challenge gamma from the PLONK IOP.","Return the challenges, coined by the verifier.","Return the evaluation of the given column, over the domain.","Return the constants parameters that the expression might …","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","The challenge joint_combiner which is used to combine …","Computes <code>prod_{j != n} (1 - omega^j)</code> Assure we don’t …","Return the value <code>prod_{j != 1} (1 - omega^j)</code>, used for …","","","","","","","Converts the expression in LaTeX","Converts the expression in LaTeX","There is an optimization in PLONK called “linearization…","There is an optimization in PLONK called “linearization…","","","Convenience function for constructing expressions from …","","","","Convenience function for constructing expressions from …","","Apply a function to all the coefficients in the …","The MDS matrix","","","","","","","","","","","","","Converts the expression in OCaml code","Converts the expression in OCaml code","","","","","","Exponentiate a constant expression.","Compute the powers of <code>x</code>, <code>x^0, ..., x^{n - 1}</code>","You can import this module like …","The row (Curr of Next) of this variable","","","","","","","","","","","","","","","","","","Converts the expression to a text string","Converts the expression to a text string","","","","","","","","","","","","","","","","","","","","","","","","","","Compile an expression to an RPN expression.","","Compile an expression to an RPN expression.","","Given a linearization and an environment, compute the …","Given a linearization and an environment, compute the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluate the given constant expression to a field element.","Evaluate the given constant expression to a field element.","","","","","","","","","","","","","","","","","","","","The number of zero-knowledge rows","","","","This trait defines a common arithmetic operations interface","Creates a constraint to enforce that b is either 0 or 1.","Constrain to boolean","Cache item","Coefficient","lo + mi * 2^{LIMB_BITS}","Create a constant","Crumb constraint for 2-bit value x","Constrain to crumb (i.e. two bits)","Double the value","Create a literal","Raise the value to the given power","Compute the square of this value","2^pow","2^{2 * LIMB_BITS}","2^{3 * LIMB_BITS}","2^{LIMB_BITS}","","","","","","","","","","Cairo","","","","A circuit is specified as a public input size and a list …","A single gate in a circuit.","Gate error","Gate result","Complete EC addition in Affine form","Trait to connect a pair of cells in a circuit","Invalid constraint with number","Disconnected wires","","A row accessible from a given row, corresponds to the fact …","EC variable base scalar multiplication with group …","Gate for computing the scalar corresponding to an …","Contains the error value","Failed to get witness for row","","","The different types of gates the system supports. Note …","Generic arithmetic gate","Invalid constraint","Invalid lookup","","","","","Contains the success value","Poseidon permutation gate","Range check","","","EC variable base scalar multiplication","Invalid wire column","","Zero gate","","","","","","","","","","","","","","","","","","","","","","public selector polynomials that can used as handy …","Connects a generic gate cell with zeros to a given row for …","Connect the pair of cells specified by the cell1 and cell2 …","Connects the wires of the range checks in a single foreign …","This function creates a <code>CairoClaim</code> gate","This function creates a <code>CairoFlags</code> gate","Gadget generator of the whole cairo circuits from an …","This function creates a <code>CairoInstruction</code> gate","This function creates a <code>CairoTransition</code> gate","Create foreign field addition gate chain without range …","Create range check gate for constraining compact limbs. …","","Create foreign field multiplication gate Inputs the …","This allows you to create two generic gates that will fit …","This allows you to create two generic gates by passing the …","Create range check gate for constraining three 88-bit …","","…","Create single range check gate Inputs the starting row …","Create one rotation Right now it only creates a Generic …","Creates a Rot64 gadget to rotate a word It will need:","Create a single foreign field addition gate. This is used …","","Creates a XOR gadget for <code>bits</code> length Includes:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extends an AND gadget for <code>bytes</code> length. The full operation …","Extend a chain of foreign field addition gates. It already …","Create foreign field muti-range-check gadget by extending …","Create foreign field multiplication gate by extending the …","","","Extends a Keccak circuit to hash one message Note: …","Create foreign field muti-range-check gadget by extending …","Extends a NOT gadget for <code>bits</code> length using Xor gates. It …","Extends a bitwise negation gadget with <code>n</code> NOT components of …","Create foreign field range-check gate by extending the …","Extend one rotation Right now it only creates a Generic …","Extend a single foreign field addition gate followed by a …","Extends a XOR gadget for <code>bits</code> length to a circuit Includes:","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Which lookup-patterns should be applied on which rows.","","","","","","","","","","","","","round constant that are relevant for this specific gate","","","","","","","Compute the offset corresponding to the <code>CurrOrNext</code> value.","","","","","","","","","","","","","","","","","","","","type of the gate","","","","","","","","","","","","","This function verifies the consistency of the wire …","verifies that the Cairo gate constraints are solved by the …","Check the correctness of witness values for a complete-add …","Verify the <code>EndoMul</code> gate.","Verify the <code>EndoMulscalar</code> gate.","verifies that the generic gate constraints are solved by …","Checks if a witness verifies a poseidon gate","Verify the <code>GateType::VarBaseMul</code>(TODO)","Verify the witness against the constraints","","","","","","gate wiring (for each cell, what cell it is wired to)","","this function creates “empty” circuit gate","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Runtime tables are tables (or arrays) that can be produced …","","Number of constraints produced by the argument.","Configuration for the lookup constraint. These values are …","Computes the aggregation polynomial for maximum n lookups …","","","","","Specifies the lookup constraints as expressions.","","","","","A placeholder value that is known to appear in the lookup …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Information about the specific lookups used","","","Computes the sorted lookup tables required by the lookup …","","","","","Checks that all the lookup constraints are satisfied.","","Pad with zeroes and then add 3 random elements in the last …","","","Represents an error found when computing the lookup …","Lookup selectors","","","","","","","","","","","","","","","","","Configuration for the lookup constraint.","Create the <code>LookupConstraintSystem</code>.","","","","","","","","","","","","","Foreign field multiplication pattern lookup selector","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Lookup pattern lookup selector","Lookup selectors: For each kind of lookup-pattern, we have …","Lookup tables","","","Range check pattern lookup selector","An optional runtime table selector. It is 0 everywhere, …","The offset of the runtime table within the concatenated …","Optional runtime tables, listed as tuples <code>(length, id)</code>.","","","Table IDs for the lookup values. This may be <code>None</code> if all …","","","","","","","","","","","","","","","","","","XOR pattern lookup selector","","","","Look up the value from the given fixed table ID","","A spec for checking that the given vector belongs to a …","A spec for checking that the given vector belongs to a …","A concrete value or representation of a lookup.","A position in the circuit relative to a given row.","","","Describes the desired lookup configuration.","","An iterator over the variants of LookupPattern","Flags for each of the hard-coded lookup patterns.","The table ID associated with a particular lookup","","Look up a single value in a lookup table. The value may be …","Look up the value in the table with ID given by the value …","","","","","","","","","","","","","","","","","","","","For each row in the circuit, which lookup-constraints …","","","","","","","","","","","","","","","","","","","","","Create the default lookup configuration.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluate the combined value of a joint-lookup.","Evaluate the linear combination specifying the lookup …","Evaluate the combined value of a joint-lookup, resolving …","Evaluate the combined value of a joint-lookup.","The features enabled for this lookup configuration","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the lookup pattern used by a <code>GateType</code> on a given …","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Whether joint lookups are used","Check what kind of lookups, if any, are used by this …","","","","","","Returns the layout of the lookups used by this pattern.","Returns the maximum number of values that are used in any …","The maximum joint size of any joint lookup in a constraint …","Returns the maximum number of lookups per row that are …","The maximum length of an element of <code>kinds</code>. This can be …","","","","","","","","","","","","","","","","","","A single lookup constraint is a vector of lookup …","","Reduce linear combinations in the lookup entries to a …","","","","","","","","","","","Each entry in <code>kinds</code> has a corresponding selector …","","","","","","","","","","","Returns the lookup table used by the pattern, or <code>None</code> if …","The ID for the table associated with this lookup. Positive …","The ID for the table associated with this lookup. Positive …","The ID for the table associated with this lookup. Positive …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","True if runtime lookup tables are used.","Linear combination of local-positions","","","","","","","","","","","","","","","","","","A runtime table. Runtime tables must match the …","Use this type at setup time, to list all the runtime …","The specification of a runtime table.","","","","","","","","","","","","","","Returns the constraints related to the runtime tables.","A single column.","","","","","","","","","","","","The content of the first column of the runtime table.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the ID of the runtime table.","The table ID.","The table ID.","The table id.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the runtime table is empty.","Returns the length of the runtime table.","The number of entries contained in the runtime table.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Enumerates the different ‘fixed’ lookup tables used by …","Enumerates the different ‘fixed’ lookup tables used by …","A table of values that can be used for a lookup, along …","The range check table ID.","","The table ID associated with the XOR lookup table.","","","","","","","","","","","","","","","Same as <code>combine_table_entry</code>, but for an entire table. The …","Let’s say we want to do a lookup in a “vector-valued”…","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the lookup table associated to a <code>GateLookupTable</code>.","Return true if the table has an entry (row) containing all …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the lookup table is empty, <code>false</code> otherwise.","Returns the length of the table.","Range check table","","","","Returns the lookup table associated to a <code>GateLookupTable</code>.","","","","","","","","","","","","","","","","Returns the number of columns, i.e. the width of the table.","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","The range check will be performed on 12-bit values, i.e. …","","A single-column table containing the numbers from 0 to …","","Returns the XOR lookup table","","","","","Evaluations of the wires and permutation","","","","","","","","","","","","","","","","","","","","","","","","","","","evaluations over domain d4","evaluations over domain d8","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","lookup multiset","lookup multiset","lookup multiset","lookup multiset","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","aggregation","aggregation","lookup witness","lookup witness","next wire evaluations","next wire evaluations","this wire evaluations","this wire evaluations","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","wire evaluations","permutation evaluations","This module includes the AND gadget implementation and the …","This module implements a complete EC addition gate.","Implementation of the <code>EndomulScalar</code> gate for the endomul …","This module implements short Weierstrass curve …","Foreign Field Addition module","Common parameters and functions for kimchi’s foreign …","Foreign field multiplication module","This module implements the double generic gate.","Keccak hash module","This module includes the definition of the NOT gadget and …","This module implements permutation constraint polynomials.","This module implements the Poseidon constraint polynomials.","Range check gate module","","This implements the constraints of the Cairo gates","This module implements short Weierstrass curve variable …","This module includes the definition of the XOR gadget for …","Create a And for inputs as field elements starting at row 0","Extends an AND witness to the whole witness Input: first …","Get the AND lookup table","Implementation of the <code>CompleteAdd</code> gate It uses the …","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Generate the <code>witness</code>","","Calls <code>U::from(self)</code>.","","","","","The result of performing an endoscaling: the accumulated …","Implementation of the <code>EndosclMul</code> gate.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Generates the <code>witness_curr</code> values for a series of …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Foreign field addition gate.","This module obtains the gates of a foreign field addition …","This module computes the witness of a foreign field …","Implementation of the foreign field addition gate","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Addition","All foreign field operations allowed","Subtraction","","","","","Creates a FFAdd witness (including <code>ForeignFieldAdd</code> rows, …","","","","","","Create witness for bound computation addition gate","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the sign of the operation as a field element","","","","","","Exponent of binary modulus (i.e. t)","BigUint array compose helper","BigUint array PrimeField helpers","Foreign field helpers","PrimeField array BigUint helpers","PrimeField array compact limbs","PrimeField array compose BigUint","Index of high limb (in 3-limb foreign elements)","","Limb length for foreign field elements","Number of desired limbs for foreign field elements","Index of low limb (in 3-limb foreign elements)","Index of middle limb (in 3-limb foreign elements)","Two to the power of the limb length","2^t","Compose field limbs into BigUint","Compose limbs into BigUint","limbs in little endian order","2^259 (see foreign field multiplication RFC)","Negate: 2^T - self","Alias for to_limbs","Convert to 2 PrimeField limbs of 2 * LIMB_BITS each. The …","Convert to 2 limbs of 2 * LIMB_BITS each. The compressed …","Compose field limbs into BigUint","Convert to 3 PrimeField limbs of LIMB_BITS each","Convert limbs from BigUint to field element","Alias for to_field_limbs","Convert to 3 limbs of LIMB_BITS each","Convert limbs from field elements to BigUint","2","2^{2 * LIMB_BITS}","2^{LIMB_BITS}","Foreign field multiplication","This module obtains the gates of a foreign field addition …","Foreign field multiplication witness computation","This gate operates on the Curr and Next rowsIt uses copy, …","","","","","Composes the 91-bit carry1 value from its parts","Compute non-zero intermediate products","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Number of gates in this gadget","Number of constraints for a given foreign field mul …","Get combined constraints for a given foreign field …","","Get vector of foreign field multiplication circuit gate …","Get the combined constraints for all foreign field …","Get the foreign field multiplication lookup table","Track external check witness data","Track a bound check","Track a compact-multi-range-check","Track a high bound computation","Track a limb-range-check","Track a multi-range-check","","","","","Perform integer bound addition for all limbs x’ = x + f…","Perform integer bound computation for high limb x’2 = x2 …","Create a foreign field multiplication witness Input: …","","","","","Extend the witness with external bound addition as foreign …","Extend the witness with external compact multi range_checks","Extend the witness with external high bounds additions as …","Extend the witness with external compact multi range_checks","Extend the witness with external multi range_checks","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","Add two values.","Number of constraints produced by the gate.","A constant, the constructor contains the constant itself","The double generic gate actually contains two generic …","Number of generic of registers by a double generic gate.","Number of coefficients used by a single generic gate Three …","Number of generic of registers by a single generic gate","Implementation of the <code>Generic</code> gate","The different type of computation that are possible with a …","Multiplication of two values","Sum a value to a constant","A public gate","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Optional coefficient that can be multiplied with the left …","Optional coefficient that can be multiplied with the …","Optional coefficient that can be multiplied with the …","Optional coefficient that can be multiplied with the …","Optional coefficient that can be multiplied with the right …","Create a generic circuit","Fill in a witness created via <code>create_circuit</code>","Naive Keccak structure","Creates the 5x5 table of rotation bits for Keccak modulo 64","Contains the 24 round constants for Keccak","","","On input a vector of 16-bit dense quarters, outputs a …","Keccak gadget","From a canonical expanded state, obtain the corresponding …","Composes a vector of 4 dense quarters into the dense full …","","Takes a dense u64 word and decomposes it into a vector of …","","","","Expands a quarter of a word into the sparse representation …","On input a 200-byte vector, generates a vector of 100 …","Expands a u64 word into a vector of 4 sparse u64 quarters","Returns the argument unchanged.","Keccak gadget","","Calls <code>U::from(self)</code>.","Number of blocks to be absorbed on input a given preimage …","Pads the message with the 10*1 rule until reaching a …","On input a length, returns the smallest multiple of …","Outputs the state into dense quarters of 16-bits each in …","From a vector of shifts, resets the underlying value …","From each quarter in sparse representation, it computes …","Returns the expansion of the 4 dense decomposed quarters …","","","","","Keccak witness computation","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","The number of bytes used as a capacity in the sponge.","","","","","Constants for each witness’ index offsets and lengths …","","","The number of columns the Keccak circuit uses.","","","","","","","","","","","","","An element of the Keccak state is 64 bits. However, we …","The number of bytes that can be processed by the Keccak …","The number of rounds in the Keccak permutation","","","","","The number of columns the Sponge circuit uses.","","","","","","","","","","","","","The number of field elements used to represent the whole …","","","","","","","","","","","","","","","Values involved in Chi permutation step","Values involved in Iota permutation step","Values involved in PiRho permutation step","","Values involved in Theta permutation step","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a witness for the Keccak hash function Input:","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extend a NOT witness for less than 255 bits (native field) …","Extends negation witnesses from generic gate, assuming the …","Number of constraints produced by the argument.","Shifts represent the shifts required in the permutation …","","","","","","Evaluates the polynomial (x - w^{n - zk_rows}) * (x - w^{n …","Evaluates the polynomial (x - w^{n - i}) * (x - w^{n - i + …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Generates the shifts for a given domain","The polynomial (x - w^{n - zk_rows}) * (x - w^{n - zk_rows …","retrieve the shifts","","","","The polynomial (x - w^{n - i}) * (x - w^{n - i + 1}) * … …","","Returns the end of the circuit, which is used for …","Number of PLONK rows required to implement Poseidon","Implementation of the Poseidon gate Poseidon quotient poly …","Number of rounds","Number of rows","Width of the sponge","The order in a row in which we store states before and …","","","","","","","","","","","Returns the argument unchanged.","<code>generate_witness(row, params, witness_cols, input)</code> uses a …","","Calls <code>U::from(self)</code>.","Given a Poseidon round from 0 to 4 (inclusive), returns …","","","","","","Range check gate","Range check witness computation","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Number of constraints for a given range check circuit gate …","Get combined constraints for a given range check circuit …","Get vector of range check circuit gate types","Get the combined constraints for all range check circuit …","Get the range check lookup table","Create a single range check witness Input: 88-bit value v0","Create a multi range check witness from three 88-bit …","Create a multi range check witness from two limbs: v01 …","Create a multi range check witness from compact limbs","Create a multi range check witness from limbs","Extend an existing witness with a single range check …","Extend an existing witness with a multi-range-check gadget …","Extend and existing witness with a multi range check …","Extend an existing witness with a multi-range-check gadget …","Extend an existing witness with a multi-range-check gadget …","Extend an existing witness with a multi-range-check gadget …","Extend an existing witness with a single-range-check gate …","The row layout for <code>RangeCheck0</code>","","","","","","","","","","","","","","","","","","","","","","","","Extends the rot rows to the full witness Input","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the rot lookup table","","","","","","","","","","","","","","","","","","","","","","","","","","","Combines the constraints for the Cairo gates depending on …","","","","","Generates the constraints for the Cairo initial claim and …","Generates the constraints for the Cairo instruction …","Generates the constraints for the Cairo flags Accesses …","Generates the constraints for the Cairo transition …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","verifies that the Cairo gate constraints are solved by the …","Returns the witness of an execution of a Cairo program in …","","Implementation of the <code>VarbaseMul</code> gate","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Apply the <code>witness</code> value.","","","","","","","","Create a Xor for up to the native length starting at row 0 …","","","","","Extends the Xor rows to the full witness Panics if the …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Get the xor lookup table","Returns the number of XOR rows needed for inputs of usize …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Number of registers","<code>GateWires</code> document the wiring of a gate. More …","Number of registers that can be wired (participating in …","index of all registers","Since we don’t have a specific type for the wires of a …","Wire documents the other cell that is wired to this one. …","","","","","","","","","","","","","","","","","","Creates a new set of wires for a given row.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Creates a new set of wires for a given row.","","Creates a new Wire.","","","","","","","","","","","","","","","","","Wire the cell at <code>col</code> to another cell (<code>to</code>).","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Witness cell with constant value","Witness cell copied from bits of another witness cell","Witness cell copied from another witness cell","Witness cell copied from another cell and shifted","Witness cell assigned from an indexable variable See …","Witness cell assigned from bits of a variable See Variables…","Witness cell assigned from a variable See Variables for …","Layout variables mapping - these values are substituted …","Witness cell interface. By default, the witness cell is a …","","","","","","","","","","","","","","","","","Create witness cell with constant value","Create witness cell copied from bits [start, end) of the …","Create a witness cell copied from the witness cell at …","Create witness cell copied from the witness cell at …","Create witness cell assigned from a variable name a length","Create witness cell assigned from the bits [start, end) of …","Create witness cell assigned from a variable name","Create a layout variable map","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Initialize a witness based on layout and computed variables","","","","","","","","","Initialize a witness cell based on layout and computed …","Initialize a witness row based on layout and computed …","Insert a variable and corresponding value into the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Macro to simplify creation of layout map","Macro to simplify mapping of layout variable","","","","","","","","","Represents additional information that a curve needs in …","A human readable name.","Provides the coefficients for the curve endomorphism, …","Provides the coefficient for the curve endomorphism over …","Accessor for the other curve’s prime subgroup generator, …","Provides the sponge params to be used with the other curve.","Provides the sponge params to be used with this curve.","","","","","Errors that can arise when preparing the setup","","","","","","","","","","","","","","","","","","","Errors that can arise when creating a proof","","","","Errors that can arise when preparing the setup","","Errors that can arise when creating a verifier index","Errors that can arise when verifying a proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The evaluations of all normalized lagrange basis …","","","","","","Given the evaluations form of a polynomial, directly …","Given the evaluations form of a polynomial, directly …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Get the expresion of constraints.","Linearize the <code>expr</code>.","Adds the polynomials that are evaluated as part of the …","The result of running the oracle protocol","the computed powers of alpha","","","","Used by the OCaml side","","","the last evaluation of the Fq-Sponge in this protocol","","A sponge that acts on the base field of a curve","Returns the argument unchanged.","The evaluation f(zeta) - t(zeta) * Z_H(zeta)","","Calls <code>U::from(self)</code>.","the challenges produced in the protocol","recursion data","zeta^n and (zeta * omega)^n","public polynomial evaluations","","","","","pre-computed zeta^n","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Abstracts a sponge that operates on the scalar field of an …","Absorbs the field element into the sponge.","Absorbs the given evaluations into the sponge.","Absorbs a slice of field elements into the sponge.","Creates a <code>ScalarChallenge</code> by squeezing the sponge.","Consumes the sponge and returns the current digest, by …","Creates a new Fr-Sponge.","The size of the SRS that we serialize.","Obtains an SRS for a specific curve from disk. Panics if …","Commitments linked to the lookup feature","Evaluations of a polynomial at 2 points","Polynomial evaluations contained in a <code>ProverProof</code>.","All the commitments that the prover creates as part of the …","The proof that the prover creates from a ProverIndex and a …","A struct to store the challenges inside a <code>ProverProof</code>","Commitment to the lookup aggregation polynomial","","","","","","","","","","","","","","Vector of scalar field elements","","","","","","","","","","","","","coefficient polynomials","","Polynomial commitment","All the polynomial commitments required in the proof","evaluation of the elliptic curve addition selector …","This function constructs prover’s zk-proof from the …","This function constructs prover’s recursive zk-proof …","","","","","","","","","","","","","","","","","","","","","","","","","","","evaluation of the endoscalar multiplication selector …","evaluation of the endoscalar multiplication scalar …","","Two evaluations over a number of committed polynomials","","","","","","","","evaluation of the ForeignFieldAdd selector polynomial","evaluation of the ForeignFieldMul range check pattern …","evaluation of the ForeignFieldMul selector polynomial","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Required evaluation for Maller’s optimization","evaluation of the generic selector polynomial","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Commitments related to the lookup argument","evaluation of lookup aggregation polynomial","evaluation of the Lookup range check pattern selector …","evaluation of lookup sorted polynomials","evaluation of lookup table polynomial","","","","","evaluation of the elliptic curve variable base scalar …","","","","This function runs the random oracle argument","evaluation of the poseidon selector polynomial","The challenges underlying the optional polynomials folded …","batched commitment opening proof","public input polynomials","evaluation of the RangeCheck0 selector polynomial","evaluation of the RangeCheck1 selector polynomial","evaluation of the RangeCheck range check pattern selector …","evaluation of the Rot selector polynomial","Optional commitment to concatenated runtime tables","evaluation of runtime lookup table polynomial","evaluation of the runtime lookup table selector polynomial","permutation polynomials (PERMUTS-1 evaluations because the …","","","","","","","Commitments to the sorted lookup table polynomial (may …","The commitment to the quotient polynomial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","witness polynomials","The commitments to the witness (execution trace)","evaluation of the Xor range check pattern selector …","evaluation of the Xor selector polynomial","permutation polynomial","The commitment to the permutation polynomial","Evaluation at the challenge point zeta.","Evaluation at <code>zeta . omega</code>, the product of the challenge …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","Clean up old traces and start fresh.","Take captured traces.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","The index used by the prover","","","","","","Retrieve or compute the digest for the corresponding …","this function compiles the index from constraints","constraints system polynomials","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","The symbolic linearization of our circuit, which can …","maximal size of polynomial section","permutation aggregation polynomial computation","permutation linearization poly contribution computation","permutation quotient poly contribution computation","The mapping between powers of alpha and constraints","","polynomial commitment keys","","","","","","Produces the <code>VerifierIndex</code> from the prover’s <code>ProverIndex</code>.","The verifier index corresponding to this prover index","Retrieve or compute the digest for the corresponding …","The verifier index digest corresponding to this prover …","This function verifies the consistency of the wire …","Function to verify the generic polynomials with a witness.","","","Create new index for lookups.","","The main interface to using Snarky.","An ASM-like language to print a human-friendly version of …","The Boolean type is a snarky type that represents a …","Constants used for poseidon.","The backend used by Snarky, gluing snarky to kimchi. This …","","","","Functions associated to the Poseidon hash function.","A handy module that you can import the content of to …","The circuit-generation and witness-generation logic.","The SnarkyType trait is a useful trait that allows us to …","","A compiled circuit.","A circuit must be defined for a specific field, as it …","The private input used by the circuit.","","A prover index.","The public input used by the circuit.","The public output returned by the circuit.","The main trait. Implement this on your circuit to get …","A verifier index.","A witness represents the execution trace of a circuit.","Produces an assembly-like encoding of the circuit.","","","","","","","","","The circuit. It takes:","Compiles the circuit to a prover index (ProverIndexWrapper…","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The gates obtained after compilation.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Produces a proof for the given public input.","","","","","","","","","","","","","Verify a proof for a given public input and public output.","","","","","Very dumb way to write an ordered hash set.","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","A boolean variable.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","A PLONK constraint (or gate) can be <code>Basic</code>, <code>Poseidon</code>, …","","","","","","","The constraint system. ","","","","","","Applies the basic <code>SnarkyConstraint</code>. Simply, place the …","Applies the <code>KimchiConstraint(s)</code> to the <code>circuit</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute the witness, given the constraint system <code>sys</code> and a …","","","","","","","","","","","","","","","","","","","","","","","Produces a digest of the constraint system.","","","","","","","","","","","Fill the <code>gate</code> values(input and output), and finalize the …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns the number of public inputs.","Returns the number of rows in the constraint system. Note: …","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the number of public-input. It must and can only be …","Sets the number of public-input. It should only be called …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Addition of two <code>FieldVar</code>s.","A constant (a field element).","A circuit variable represents a field element in the …","Multiplication of a <code>FieldVar</code> by a constant.","","","A variable, tracked by a counter.","","","","","","","","","","","Converts a field element <code>c</code> into a <code>FieldVar</code>.","","","","","","Evaluate the field element associated to a variable (used …","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","Seals the value of a variable.","","","","","","","","","","","","","","","","Returns the zero constant.","","","","Contains the error value","Contains the error value","Contains the error value","Contains the success value","Contains the success value","Contains the success value","","","","Errors that can occur during compilation of a circuit.","A result type for Snarky compilation errors.","Snarky errors can come from either a compilation or …","A result type for Snarky errors.","Errors that can occur during runtime (proving).","A result type for Snarky runtime errors.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A stack of labels, where each label represents an …","A location string, usually a file name and line number. …","Creates a new RealSnarkyError.","Creates a new RealSnarkyError.","","The actual error.","","","","","","","","","","","","","","","","","","","","","","","","Represents an element of the other curve’s field. As the …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","A duplex construction allows one to absorb and squeeze …","","Absorb.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creates a new sponge.","","Squeeze.","","","","","","","","Handy macro to return the filename and line number of a …","Old R1CS-like constraints.","An enum that wraps either a <code>BasicSnarkyConstraint</code> or a […","Custom gates in kimchi.","The state used when compiling a circuit in snarky, or used …","A witness generation environment. This is passed to any …","Adds a list of <code>Constraint</code> to the circuit.","This adds a label in the stack of labels. Every error from …","Allocates a new var representing a private input.","Indication that we’re running in prover mode. In this …","Creates a constraint for <code>assert_eq!(x, y)</code>;","Creates a constraint for <code>assert_eq!(a * b, c)</code>.","","","","","In witness generation, this checks if the constraint is …","Crates a compilation error.","Creates a new non-deterministic variable associated to a …","","","","","","","","","","Creates an RealSnarkyError using the current context.","If set, the witness generation will check if the …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the public output generated after running the …","","Getter for the OCaml side.","Indication that we’re running the witness generation. …","Adds a constraint that returns <code>then_</code> if <code>b</code> is <code>true</code>, <code>else_</code> …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>Self</code> based on the size of the public input, …","A counter used to track variables (this includes public …","The size of the public input part. This contains the …","This removes a label from any error that could come up …","","Returns the public input snarky variable.","constrains the 3 provided values to fit in 88 bits","Allows the caller to obtain the value behind a circuit …","","","Used internaly to evaluate variables. Can panic if used …","Creates a runtime error.","Stores a field element as an unconstrained private input.","The constraint system used to build the circuit. If not …","","","","","","","","","A wrapper around code that needs to be labeled (for better …","Some ‘out-of-circuit’ data, which is carried as part …","A trait to convert between a snarky type and its …","The equivalent “out-of-circuit” type. For example, the …","The number of field elements that this type takes.","A snarky type is a type that can be used in a circuit. It …","Checks that the circuit variables behind this type are …","","The “default” value of Self::Auxiliary. This is passed …","Creates a new instance of this type from the given circuit …","","","Returns the circuit variables (and auxiliary data) behind …","","","Converts an out-of-circuit value","Tarjan’s Union-Find Data structure","","","","","","","","","Returns Some(num), num is the tag of subset in which x is. …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Union the subsets to which x and y belong. If it returns …","","","Contains the error value","Contains the success value","The result of a proof verification.","This function verifies the batch of zk-proofs proofs: …","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","The proof to verify","The public input used in the creation of the proof","","","","The VerifierIndex associated to the proof","Verify a proof <code>ProverProof</code> using a <code>VerifierIndex</code> and a …","","","","","","","","","","","","coefficient commitment array","EC addition selector polynomial commitment","","","","","","","Compute the digest of the <code>VerifierIndex</code>, which can be used …","evaluation domain","","","endoscalar multiplication selector polynomial commitment","endoscalar coefficient","endoscalar multiplication scalar computation selector …","","","Foreign field addition gates polynomial commitments","Foreign field multiplication gates polynomial commitments","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes a <code>VerifierIndex</code> from a file, given a pointer …","coefficient commitment array","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Information about the specific lookups used","","","maximal size of polynomial section","EC variable base scalar multiplication selector polynomial …","Gets permutation_vanishing_polynomial_m from <code>VerifierIndex</code> …","zero-knowledge polynomial","The mapping between powers of alpha and constraints","number of previous evaluation challenges, for recursive …","poseidon constraint selector polynomial commitment","number of public inputs","RangeCheck0 polynomial commitments","RangeCheck1 polynomial commitments","Rot commitments","An optional selector polynomial for runtime tables","","","wire coordinate shifts","permutation commitment array","Gets srs from <code>VerifierIndex</code> lazily","polynomial commitment keys","Table IDs for the lookup values. This may be <code>None</code> if all …","Writes a <code>VerifierIndex</code> to a file, potentially appending it …","","","","","","","","","","","Gets w from <code>VerifierIndex</code> lazily","domain offset for zero-knowledge","Xor commitments","the number of randomized rows to achieve zero knowledge"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,1,9,1,1,1,1,9,1,9,1,1,9,9,1,1,9,1,9,1,1,1,9,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,1,1,1,1,9,1,9,1,9,1,9,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,305,0,0,0,0,0,305,0,16,16,16,37,38,109,44,16,38,109,44,16,109,16,16,38,38,109,37,305,38,109,305,37,305,38,44,38,38,109,44,16,38,109,44,16,16,38,109,44,16,38,16,16,16,38,109,44,16,16,16,44,38,109,44,16,38,109,44,16,38,44,16,16,38,109,44,16,38,109,44,16,38,109,44,16,38,109,44,16,38,109,38,38,38,38,41,41,41,54,0,41,0,0,41,54,54,0,54,54,54,54,54,41,54,41,41,41,54,54,306,306,56,54,306,56,54,56,54,54,54,0,56,56,0,56,306,56,54,306,56,54,54,56,306,56,54,54,54,54,306,56,54,56,56,56,56,54,54,0,56,306,56,54,306,56,54,54,56,56,54,56,54,54,306,306,306,54,306,306,54,54,306,56,54,306,56,54,306,56,54,56,56,306,56,54,0,56,0,0,56,0,0,0,75,75,0,0,0,75,64,68,69,70,65,75,64,68,69,70,65,75,64,68,69,70,65,68,69,70,65,69,70,70,65,64,68,69,70,65,75,64,68,69,70,65,75,68,68,68,69,70,65,64,65,65,64,68,69,70,65,75,70,65,70,65,65,68,69,70,65,75,68,70,68,70,64,68,69,70,65,75,68,68,68,68,65,69,70,64,68,69,70,65,75,64,68,69,70,65,75,68,68,68,68,64,65,68,64,70,68,68,68,65,69,70,69,70,65,64,65,64,65,68,70,68,70,68,68,68,68,70,64,0,68,69,70,65,65,64,65,65,68,69,70,65,64,68,69,70,65,75,68,64,68,69,70,65,75,64,68,69,70,65,75,68,68,68,64,68,69,70,65,75,68,70,65,0,307,307,0,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,0,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,43,94,92,106,103,43,94,92,103,0,43,94,92,0,100,106,99,106,0,0,111,112,0,0,99,100,106,0,0,0,0,57,57,57,57,0,43,94,92,106,113,98,0,0,0,93,113,0,104,104,0,103,43,94,92,103,0,0,98,106,104,113,104,104,98,113,113,113,43,94,92,106,0,0,43,94,92,106,104,104,104,0,104,106,106,43,94,92,106,43,94,92,106,104,0,100,106,100,106,0,104,92,94,46,92,93,98,99,92,100,0,0,94,92,46,94,46,113,45,102,103,98,99,92,62,40,104,105,100,106,57,107,46,113,45,102,103,98,99,92,62,40,104,105,100,106,57,107,94,40,94,92,45,102,103,98,99,92,62,104,105,100,106,57,107,45,102,103,98,99,92,62,104,105,100,106,57,107,102,62,94,102,111,94,92,94,94,92,107,0,94,40,107,94,92,46,113,45,102,103,98,99,92,62,40,104,105,100,106,57,107,46,113,45,102,103,98,99,92,62,40,104,105,100,106,57,107,102,103,98,104,105,106,107,94,94,92,46,113,45,102,103,98,99,92,62,40,104,105,100,106,57,107,45,102,103,98,99,92,62,104,105,100,106,57,102,103,98,92,62,104,105,106,112,94,94,92,92,106,94,92,94,92,107,94,94,92,92,94,113,113,102,103,98,99,92,62,104,105,100,106,57,107,46,43,43,43,94,94,94,94,94,113,45,102,103,98,99,99,99,92,92,92,62,40,104,105,100,106,57,107,57,57,104,46,111,111,111,111,102,92,62,104,102,92,62,104,107,46,113,45,102,103,98,99,92,62,40,104,105,100,106,57,107,46,113,45,102,103,98,99,92,62,40,104,105,100,106,57,107,104,114,103,98,99,92,92,92,46,0,111,114,102,103,98,99,92,94,92,94,92,93,94,94,98,99,92,92,100,107,45,94,92,94,92,114,102,103,98,99,92,104,104,94,92,105,92,102,62,94,92,0,0,102,102,103,98,104,105,106,107,94,94,92,92,114,102,103,98,99,92,94,92,57,93,98,99,92,100,93,98,99,92,100,45,102,103,98,99,92,62,104,105,100,106,57,107,123,94,99,92,92,107,107,113,92,57,46,113,45,102,103,98,99,92,62,40,104,105,100,106,57,107,46,113,45,102,103,98,99,92,62,40,104,105,100,106,57,107,94,94,94,94,46,113,45,102,103,98,99,92,62,40,104,105,100,106,57,107,104,43,92,111,46,113,45,102,103,98,99,92,62,40,104,105,100,106,57,107,94,92,45,105,308,308,0,0,39,39,39,0,39,0,39,39,39,39,39,39,39,39,39,39,0,0,0,0,0,0,0,0,61,61,61,61,0,0,0,0,61,0,124,124,53,0,61,61,139,124,61,61,0,61,124,124,61,61,61,53,139,61,61,61,61,61,124,61,61,53,61,124,71,133,53,61,124,71,133,0,53,61,124,71,53,61,124,71,53,61,71,125,125,125,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,61,71,53,61,124,71,133,53,61,124,71,133,53,61,53,61,53,61,71,53,61,124,71,133,71,53,61,124,53,61,124,71,71,71,71,71,71,71,71,71,71,71,71,71,71,53,61,124,124,71,53,61,124,71,71,133,133,53,61,61,61,53,61,133,133,53,61,53,61,53,61,124,71,133,53,61,124,71,133,53,61,53,61,53,61,61,71,133,53,61,53,61,53,61,53,61,71,133,71,53,61,53,61,71,133,53,61,53,61,124,71,124,61,53,61,124,71,133,53,61,53,61,124,71,133,71,53,61,124,71,133,53,61,71,53,61,53,61,71,71,71,71,71,71,71,71,71,53,61,124,71,133,71,71,71,309,309,309,0,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,0,0,0,0,0,0,0,0,147,147,147,147,0,147,147,147,147,147,147,147,147,147,147,147,147,0,147,147,147,147,0,147,0,151,0,0,0,151,151,151,150,151,150,152,151,150,152,151,150,152,151,150,152,152,152,150,151,150,152,151,150,152,150,152,151,150,152,150,151,151,150,152,151,150,152,150,150,151,150,152,151,150,152,150,152,152,152,150,150,152,152,152,150,152,152,152,151,150,152,151,151,150,152,151,150,152,151,150,152,151,150,152,150,310,311,311,157,134,0,0,0,0,134,0,0,0,0,0,0,134,0,157,134,154,76,144,155,156,157,158,159,134,154,76,144,155,156,157,158,159,134,144,154,76,144,155,156,157,158,159,134,154,76,144,155,156,157,158,159,134,134,155,144,144,154,76,154,76,144,155,156,157,158,159,134,154,76,144,155,156,157,158,159,134,154,76,144,154,76,144,154,76,144,155,156,157,158,134,160,154,76,144,155,156,157,158,159,134,153,160,158,154,76,134,154,76,134,160,156,158,158,144,154,76,144,155,157,158,159,134,154,154,76,144,155,156,157,158,159,134,154,76,144,134,154,76,154,76,134,134,134,154,154,154,76,144,155,156,157,158,159,134,154,76,144,155,156,157,158,159,134,154,76,144,154,159,154,76,134,154,76,144,134,76,154,159,154,76,144,154,134,134,144,134,144,154,76,144,159,159,154,76,144,159,154,76,134,154,76,134,159,134,76,154,158,154,76,144,154,76,144,154,76,144,155,144,154,76,144,155,156,157,158,134,160,159,134,153,160,158,154,76,144,155,156,157,158,159,134,154,76,144,155,156,157,158,159,134,154,76,144,154,76,144,155,156,157,158,159,134,154,76,144,155,156,157,158,159,134,154,76,134,76,156,154,76,144,154,76,144,154,76,144,155,156,157,158,159,134,0,154,0,0,0,163,86,164,163,86,164,0,163,86,164,163,86,164,0,164,163,86,164,163,86,164,163,86,163,86,164,86,163,86,164,163,163,163,86,86,164,164,86,163,86,164,163,86,164,163,86,164,86,86,163,163,86,163,86,164,163,86,164,163,86,164,163,86,164,163,86,164,0,0,0,168,165,166,168,165,166,168,168,165,166,168,165,166,168,165,166,166,168,168,165,165,166,166,168,165,166,168,165,166,168,165,166,168,165,166,168,165,166,165,168,165,166,168,165,166,168,165,166,168,165,166,168,165,166,168,165,166,168,165,166,0,0,0,0,162,0,162,162,170,79,162,170,79,0,162,170,79,162,170,79,0,0,79,162,170,79,162,170,79,162,170,162,170,79,162,170,162,170,162,170,79,162,170,79,79,162,170,0,79,162,170,79,170,170,162,170,79,162,170,79,170,79,79,0,170,162,170,162,162,170,79,162,170,79,162,170,79,162,170,79,162,170,79,79,0,170,0,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,0,0,0,0,0,0,0,0,0,0,0,0,175,176,74,177,178,179,175,176,74,177,178,179,175,176,74,177,178,179,175,176,74,177,178,179,74,74,175,176,74,177,178,179,175,176,74,177,178,179,175,176,74,177,178,179,175,176,74,177,178,179,177,179,177,179,175,176,74,177,178,179,175,176,74,177,178,179,177,179,177,179,176,178,176,178,175,176,74,177,178,179,175,176,74,177,178,179,175,176,74,177,178,179,175,176,74,177,178,179,175,176,74,177,178,179,175,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,0,181,181,181,181,181,181,181,181,181,181,181,0,181,181,181,181,181,181,0,0,183,182,183,182,183,182,182,182,182,182,183,182,183,182,183,182,183,182,0,183,182,183,182,183,183,182,183,182,183,182,183,182,0,0,0,0,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,127,0,127,127,127,127,127,0,127,127,127,127,127,0,127,127,127,127,127,127,127,127,127,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,185,186,187,312,185,185,188,185,185,189,185,190,190,185,188,185,185,185,0,0,0,0,191,191,191,191,0,0,0,191,191,191,191,191,191,191,191,191,191,191,191,191,0,0,0,0,0,0,0,0,192,192,192,192,192,192,192,192,192,0,0,0,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,129,0,129,0,0,0,0,0,0,129,129,129,193,193,129,193,129,129,129,193,193,193,193,193,129,193,129,193,129,193,129,193,129,193,129,0,129,193,129,193,129,193,129,193,129,313,314,313,314,313,0,0,0,0,0,315,315,315,0,315,315,0,315,315,315,315,315,315,315,315,0,315,315,315,315,315,315,315,315,315,315,315,315,315,0,0,0,195,196,195,196,195,196,195,196,195,196,195,196,195,196,195,196,195,196,195,196,195,196,195,196,195,196,195,196,195,196,195,196,195,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,197,198,199,200,316,197,198,199,200,197,198,199,200,197,198,197,198,316,197,198,199,200,316,197,198,199,200,316,197,198,199,200,197,198,0,316,197,198,199,200,316,197,198,199,200,316,197,198,199,200,197,198,197,198,200,199,197,198,199,198,197,199,200,316,197,198,199,200,316,197,198,199,200,316,197,198,199,200,316,197,198,199,200,0,0,0,0,201,201,201,201,201,0,0,201,201,201,201,0,201,201,201,201,0,201,0,0,0,0,0,0,0,202,202,202,202,202,202,202,202,202,202,202,0,202,202,0,202,202,202,202,0,0,0,0,0,204,205,204,205,204,205,204,205,204,205,204,205,204,205,204,205,204,205,204,205,204,205,204,205,204,205,204,205,204,205,204,205,204,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,130,0,0,208,130,208,130,208,130,130,208,208,208,208,130,208,130,208,130,208,130,130,0,130,130,208,130,208,130,208,0,130,130,208,130,208,130,208,130,208,0,0,0,0,0,317,318,319,320,317,318,319,320,317,318,319,320,0,317,318,319,320,317,318,319,320,317,318,319,320,317,318,319,320,317,318,319,320,317,318,319,320,317,318,319,320,317,318,319,320,317,318,319,320,0,317,318,319,320,317,318,319,320,317,318,319,320,317,318,319,320,0,0,0,0,0,0,211,210,321,211,210,321,211,210,210,210,210,210,321,211,210,321,211,210,321,211,210,321,211,210,321,211,210,321,211,210,211,321,211,210,321,211,210,321,211,210,321,211,210,0,0,212,212,212,212,212,212,0,212,212,212,212,0,212,212,212,0,0,212,212,212,212,0,213,213,213,213,213,0,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,0,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,0,0,0,0,0,0,215,215,0,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,217,126,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,0,217,126,215,0,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,0,0,0,0,0,0,0,0,0,219,220,221,222,223,224,225,226,219,220,221,222,223,224,225,226,219,220,221,222,223,224,225,226,219,220,221,222,223,224,225,226,219,220,221,222,223,224,225,226,219,220,221,222,223,224,225,226,219,220,221,222,223,224,225,226,226,226,0,219,220,221,222,223,224,225,226,0,0,226,219,220,221,222,223,224,225,226,223,207,219,220,221,222,223,224,225,226,219,220,221,222,223,224,225,226,219,220,221,222,223,224,225,226,207,219,220,221,222,223,224,225,0,0,219,220,221,222,223,224,225,226,0,137,137,137,137,137,137,66,227,91,66,0,91,227,227,227,227,227,227,66,227,227,227,227,145,145,227,145,227,145,0,145,228,227,0,145,0,0,145,145,145,227,91,66,228,145,227,91,66,228,145,227,91,66,228,145,227,91,66,228,145,227,91,66,228,145,227,91,66,228,145,227,91,66,228,145,145,227,227,91,91,66,66,228,228,145,227,91,66,228,145,227,91,66,228,145,227,91,66,228,145,227,91,66,228,145,227,91,66,228,145,227,91,66,228,145,227,91,66,228,145,227,91,66,228,145,227,91,66,228,0,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,0,0,0,0,244,244,244,0,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,0,232,232,0,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,0,233,233,233,233,233,233,0,0,0,0,0,0,0,0,236,82,83,236,238,33,239,82,83,236,238,33,239,0,239,82,83,236,238,33,239,82,83,236,238,33,239,83,83,239,33,83,33,33,82,82,83,236,238,33,239,82,83,236,238,33,239,82,83,236,238,33,239,82,83,236,238,33,239,83,83,83,239,33,83,82,83,236,238,33,239,83,83,83,82,83,83,236,236,238,238,33,239,239,82,33,83,83,82,83,236,238,33,239,82,83,236,238,33,239,82,238,83,83,83,83,82,83,82,83,83,239,82,82,33,83,33,33,83,83,83,83,83,236,83,83,83,82,83,236,238,33,239,236,238,82,83,236,238,33,239,82,83,236,238,33,239,82,83,236,238,33,239,82,83,236,238,33,239,82,82,83,236,238,33,239,83,238,83,83,83,238,82,82,0,0,243,240,243,240,243,243,240,243,240,240,243,240,243,240,243,240,243,240,240,240,240,240,240,243,243,240,243,240,240,243,240,243,240,243,240,240,240,240,240,240,243,240,243,240,240,240,240,240,240,240,240,240,243,240,243,240,243,240,243,240,243,240,243,240,240,240,240,240,0,0,0,0,0,0,0,241,247,248,241,242,247,248,241,242,241,242,241,242,248,247,248,241,242,247,248,241,242,247,248,241,242,248,247,247,248,241,241,242,242,247,248,241,242,248,247,248,241,242,247,248,241,242,247,248,241,242,242,247,248,241,242,247,248,241,242,248,247,248,248,247,241,241,242,241,242,247,248,241,242,247,248,241,242,247,248,241,242,247,248,241,242,247,248,241,242,242,242,0,0,249,249,249,0,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,0,0,249,249,249,249,249,249,249,249,0,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,0,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,0,135,135,135,135,135,135,135,135,135,135,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,255,255,0,0,0,254,254,264,322,265,254,264,322,265,255,255,265,254,264,322,265,254,264,322,265,254,264,322,265,265,254,264,322,265,322,254,264,322,265,254,264,322,265,254,254,264,322,265,254,264,322,265,254,264,322,265,264,254,264,322,265,0,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,0,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,0,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,276,0,0,273,276,0,276,276,0,276,0,0,273,275,0,276,276,0,273,276,0,0,0,273,281,281,279,272,272,281,280,280,280,280,281,279,279,279,280,281,273,282,283,284,285,276,272,279,280,281,273,282,283,284,285,276,272,282,0,273,276,272,272,272,272,272,279,280,281,273,282,283,284,285,276,272,279,280,281,273,282,283,284,285,276,272,272,279,280,281,273,282,283,284,285,276,272,272,272,279,280,281,273,282,283,284,285,276,272,279,280,281,273,282,283,284,285,276,272,279,280,281,282,283,284,285,276,272,272,272,284,284,279,280,281,273,282,283,284,285,276,272,279,280,281,273,282,283,284,285,276,272,279,280,281,282,283,284,285,276,282,283,282,281,281,280,285,279,279,282,279,280,281,282,283,284,285,276,279,280,281,282,283,284,285,276,284,284,284,282,280,280,284,272,272,272,284,279,285,283,275,272,279,280,281,273,282,283,284,285,276,272,279,280,281,273,282,283,284,285,276,272,279,280,281,273,282,283,284,285,276,272,279,280,281,282,283,284,285,276,279,280,281,273,282,283,284,285,276,272,281,281,281,284,281,281,281,281,281,280,280,285,280,280,280,285,280,270,270,0,270,0,0,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,277,288,289,262,297,323,262,297,323,277,0,288,0,0,0,0,0,0,277,277,277,277,277,290,288,289,277,290,288,289,277,288,289,277,288,289,277,290,288,289,277,290,288,289,277,290,288,289,277,290,290,288,288,289,289,277,277,290,288,289,277,290,288,289,277,290,288,289,277,290,290,290,290,290,290,288,289,277,290,288,289,277,290,288,289,277,290,288,289,277,290,288,289,277,290,288,289,277,0,0,0,324,293,292,324,293,292,292,293,292,293,292,292,324,293,292,324,293,292,324,293,292,293,292,324,293,292,292,324,293,292,324,293,292,292,293,292,324,293,292,324,293,292,324,293,292,292,292,324,293,292,0,0,294,295,295,295,295,295,295,295,295,295,295,295,0,295,295,295,295,295,0,0,0,0,296,0,296,0,0,261,261,261,261,261,261,296,261,296,261,296,261,261,278,278,261,296,261,296,261,296,261,261,261,296,261,296,261,261,261,261,261,261,296,261,296,261,261,261,261,261,261,261,261,278,278,261,261,261,261,261,296,261,296,261,296,261,296,261,261,263,0,263,263,0,263,263,263,263,325,263,263,325,263,263,0,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,0,245,245,0,0,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,0,302,0,0,303,231,303,231,303,231,303,231,231,231,303,231,303,231,303,231,231,231,303,231,231,231,231,303,231,231,231,303,231,231,231,303,231,303,231,303,231,231,303,303,303,231,231,231,231,231,231,231,231,231,231,231,303,303,231,231,231,231,231,303,231,303,231,303,231,303,231,303,231,303,231,231,231,231,231],"f":"````````````````````````````````{ce{}{}}000{{{b{c}}}{{b{c}}}d}{{ce}f{}{}}{{}{{b{c}}}h}{jc{}}000{c{{l{{b{e}}}}}nA`}{jf}{{{Ab{ec}}}fAd{{Ah{}{{Af{c}}}}}}1{{{b{c}}Aj}Al{}}{{{b{c}}Aj}AlAn}{{{Ab{ec}}Aj}Al{AdAn}{{Ah{}{{Af{c}}}}An}}{cc{}}0{{{b{c}}B`Bb}{{Ab{{Bj{{Bh{{Bf{{Bd{c}}}}}}}}c}}}Bl}{{{b{c}}B`Bb}{{Ab{{Bn{Bb}}Bb}}}Bl}{{}j}0{{{b{c}}c}fBl}???{c{{C`{egik}}}{}{}{}{}{}}{c{{C`{egi}}}{}{}{}{}}{c{{C`{egikm}}}{}{}{}{}{}{}}{c{{C`{egikmoAaAcAeAgAiAk}}}{}{}{}{}{}{}{}{}{}{}{}{}{}}{c{{C`{e}}}{}{}}{c{{C`{egikmo}}}{}{}{}{}{}{}{}}{c{{C`{eg}}}{}{}{}}{c{{C`{egikmoAaAcAeAg}}}{}{}{}{}{}{}{}{}{}{}{}}{c{{C`{egikmoAaAcAeAgAi}}}{}{}{}{}{}{}{}{}{}{}{}{}}{c{{C`{egikmoAa}}}{}{}{}{}{}{}{}{}}{cf{}}{c{{C`{egikmoAaAc}}}{}{}{}{}{}{}{}{}{}}{c{{C`{egikmoAaAcAe}}}{}{}{}{}{}{}{}{}{}{}}{{{Ab{ec}}}{{Cb{g}}}Ad{{Ah{}{{Af{c}}}}}{}}{{{b{c}}B`Bb}fBl}{{{b{c}}e}lCdCf}{ce{}{}}{cCh{}}{c{{l{e}}}{}{}}000{cCj{}}033`{{Cl{Dh{{C`{{Db{Cn{D`{Cn}}}}{Df{Dd}}}}}}}f}44{Cl{{C`{{Db{Cn{D`{Cn}}}}{Df{Dd}}}}}}{jc{}}0{jf}{cc{}}{{}j}9{BbCl}`{Clj}998;`````````````````````````{DjB`}<<<<<<<<`{B`B`}{{ce}f{}{}}{{{Dl{ce}}j}eBl{{Dn{c}}}}{{{Dl{ce}}jj}{{Df{e}}}Bl{{Dn{c}}}}`{{Dj{b{c}}E`}{{Eb{c}}}Ed}{{{b{c}}E`}{{Eb{c}}}Ed}{{{Dl{ce}}{Ef{c}}}eBl{{Dn{c}}}}`{{{Dl{ce}}E`}{{Df{e}}}Ed{{Dn{c}}}}{{DjE`}{{Df{{Eb{c}}}}}Ed}{E`{{Df{{Eb{c}}}}}Ed}{{{Eh{c}}{Df{c}}{Ej{c}}{El{c}}}{{Dl{ce}}}Bl{{Dn{c}}}}`{{}{{Dl{ce}}}{}{}}{jc{}}0000000{c{{l{B`}}}n}{jf}000{{{Dl{ce}}}eBl{{Dn{c}}}}{{B`B`}En}{{ce}En{}{}}{{B`Aj}Al}{cc{}}000{{ce}F`{FbFd}Ff}{{B`c}fFh}{{{Eh{c}}{C`{Fjj}}}c{}}{{}j}000{ce{}{}}000{{{Dl{ce}}jj}eBl{{Dn{c}}}}`{{B`c}lCf}2{c{{l{e}}}{}{}}0000000{cCj{}}0004444{{{Dl{ce}}Fjj}eBl{{Dn{c}}}}`{{{Dl{ce}}j}eBl{{Dn{c}}}}{{{Dl{ce}}jj}{{Df{e}}}Bl{{Dn{c}}}}10`````````````````````````777777`{FlFl}{{ce}f{}{}}{{FlFl}Fn}{j{{Eb{c}}}{}}`{{{G`{c}}e}GbGd{}}{c{{Eb{c}}}{}}`{jc{}}00000{c{{l{Fl}}}n}`{jf}00{{FlFl}En}{{ce}En{}{}}{{FlAj}Al}{cc{}}00{{{G`{c}}}{{El{c}}}Gd}{{{G`{c}}e}{{Cb{{Gh{c{Gf{c}}}}}}}Gd{}}{{{G`{c}}}{{Ej{c}}}Gd}{{{G`{c}}Gb}{{Gf{c}}}Gd}{{ce}F`{FbFd}Ff}{{Flc}fFh}{Gj{{Eb{c}}}{}}`{{}j}00{ce{}{}}00{FlEn}{{{G`{c}}}cGd}`{{Fl{Gn{GlFl}}}Ch}`0{{FlFl}{{Cb{Fn}}}}```{{Flc}lCf}``25{c{{l{e}}}{}{}}00000{cCj{}}00{{{G`{c}}}{{Gh{c{Gf{c}}}}}Gd}`888{{jFj}{{Eb{c}}}{}}`{j{{Eb{c}}}{}}0``````````::::::::::::{{{H`{c}}}{{l{{Hb{c}}Hd}}}{EdHf}}{HhHh}{{{Hj{c}}}{{Hj{c}}}{dEd}}{{{Hl{c}}}{{Hl{c}}}{dEd}}{{{Hb{c}}}{{Hb{c}}}{dEd}}{{ce}f{}{}}000```{{{Df{{Hn{c}}}}}{{H`{c}}}Ed}{jc{}}00000000000{{}f}0{c{{l{Hh}}}n}{c{{l{{Hj{e}}}}}nEd}{c{{l{{Hl{e}}}}}n{hEd}}{c{{l{{Hb{e}}}}}n{hEd}}{{{H`{c}}En}{{H`{c}}}{EdHf}}``{jf}00000```{{{Hb{c}}{Ib{{I`{c}}}}{I`{c}}}{{Id{c}}}{EdHf}}`{{HhAj}Al}{{{Hj{c}}Aj}Al{AnEd}}{{{Hl{c}}Aj}Al{AnEd}}{{{Hb{c}}Aj}Al{AnEd}}{{IfAj}Al}````{cc{}}00000{BbHh}{{{Dh{{Hn{c}}}}En}HhEd}{{{Dh{{Hn{c}}}}Ih}HhEd}{IjHh}```{{}j}00000{ce{}{}}00000{HhBb}{{HhIl}Ij}{cEn{}}3{{{H`{c}}{Df{{In{c}}}}}{{H`{c}}}{EdHf}}``{{{H`{c}}{Cb{j}}}{{H`{c}}}{EdHf}}`{{}c{}}{{J`{Cb{Jb}}En}Ch}{{J`{Dh{Jb}}}Ch}{{{Jf{{Jd{c}}}}ccec}cEd{{Ah{}{{Af{c}}}}}}````{{{Hb{c}}}{{Jj{{Jh{c}}}}}Ed}{{{H`{c}}j}{{H`{c}}}{EdHf}}`0`````;;{c{}{}}``{{{H`{c}}{Cb{{Df{{Jl{c}}}}}}}{{H`{c}}}{EdHf}}{{Gj{Dh{{Hn{c}}}}{Jn{c}}{Gf{c}}En}{{Gh{c{Gf{c}}}}}Ed}{{Hhc}lCf}{{{Hj{c}}e}lEdCf}{{{Hl{c}}e}lEdCf}{{{Hb{c}}e}lEdCf}{{{Hb{c}}{Jj{{Jh{c}}}}}fEd}{{{H`{c}}{Jj{{Jh{c}}}}}{{H`{c}}}{EdHf}}``{ce{}{}}000{c{{l{e}}}{}{}}00000{K`{{l{Hhc}}}{}}111111{cCj{}}00000{{}Kb}{c{{Kd{{Dh{Hh}}}}}{}}{{{Kd{{Dh{Hh}}}}}c{}}666666```{jj}```77{{{Jh{c}}}{{Jh{c}}}{dGd}}{{ce}f{}{}}``{{{Jn{c}}F`}{{Cb{{Jh{c}}}}}Gd}{jc{}}0{c{{l{{Jh{e}}}}}nGd}{jf}{{{Jh{c}}Aj}Al{AnGd}}{cc{}}{{}j}{ce{}{}}```{{{Jh{c}}e}lGdCf}1{c{{l{e}}}{}{}}0{cCj{}}`3`33{{{Jn{c}}}{{Jn{c}}}{dGd}}<{j{{l{{Jn{c}}Kf}}}Gd}````;;{c{{l{{Jn{e}}}}}nGd}:{{{Jn{c}}Aj}Al{AnGd}}987{{{Jn{c}}e}lGdCf}86658`````````````````````````````````````````````````````````````````````````````````````````````````````{{{Kh{c}}{Kh{c}}}{{Kh{c}}}Kj}{{{Kl{ce}}{Kl{ce}}}f{Knd}d}`{{{Kh{c}}Hh}{{Kh{c}}}{KjL`}}{{{Kj{}{{Lb{c}}}}{Ej{c}}}{{Kj{}{{Lb{c}}}}}{}}{{{Ld{c}}{Ej{e}}}{{Ld{c}}}d{}}{{{Lf{c}}{Ej{e}}}{{Lf{c}}}d{}}{{{Kh{c}}{Ej{e}}}{{Kh{c}}}{Kjd}{}}{{{Lh{ce}}{Ej{g}}}{{Lh{ce}}}Kjd{}}``{{}{{Kl{{Ef{c}}e}}}GdLj}{{}{{Kh{{Lh{{Kh{{Lf{c}}}}e}}}}}GdLj}`{{{Kl{{Ef{c}}Fl}}}{{Kl{{Ef{c}}Fl}}}Ed}{ce{}{}}0000000000000000000000000000000{{{Kl{{Ef{c}}Fl}}E`}{{Kl{{Ef{c}}Fl}}}Ed}{{E`e}eBl{{Dn{c}}}}{{cFj}{{Kl{ec}}}{}{}}0{{{Ej{c}}}{{Ej{c}}}d}{{{Ll{c}}}{{Ll{c}}}d}{LnLn}{{{Ld{c}}}{{Ld{c}}}d}{{{Lf{c}}}{{Lf{c}}}d}{{{Kh{c}}}{{Kh{c}}}d}{GlGl}{M`M`}{MbMb}{{{Lh{ce}}}{{Lh{ce}}}dd}{{{Md{ce}}}{{Md{ce}}}dd}{GbGb}{{{Mf{ce}}}{{Mf{ce}}}dd}{{ce}f{}{}}000000000000{{{Ll{c}}{Ll{c}}}FnMh}{{GlGl}Fn}{{j{Cb{{Mj{c}}}}}{{Kl{{Ef{c}}Fl}}}Ed}`{{{Mn{}{{Ml{c}}}}c}Gb{}}{{c{Df{{Kl{{Ef{e}}g}}}}}{{Kl{{Ef{e}}g}}}{{Ah{}{{Af{Bb}}}}}Bl{L`Lj}}{{c{Df{{Kh{{Lh{{Kh{{Lf{e}}}}g}}}}}}}{{Kh{{Lh{{Kh{{Lf{e}}}}g}}}}}{{Ah{}{{Af{Bb}}}}}Bl{L`Lj}}{c{{Kl{ce}}}{}{}}{{{Ef{c}}{Cb{{Mj{c}}}}}{{Kl{{Ef{c}}Fl}}}Ed}1``{{{Kl{{Ef{c}}Fl}}}{{Kl{{Ef{c}}Fl}}}Ed}{{}E`}{{}{{Mf{ce}}}h{}}{{{Kl{ce}}F`F`}F`{}{}}{{{Kh{{Lh{ce}}}}F`F`}F`{}{}}{jc{}}0000000000000000000000000000000{c{{l{{Ll{e}}}}}nA`}{c{{l{Ln}}}n}{c{{l{{Ld{e}}}}}nA`}{c{{l{M`}}}n}{c{{l{Mb}}}n}{c{{l{{Md{eg}}}}}nA`A`}{c{{l{{Mf{eg}}}}}nA`A`}<{{{Kl{ce}}}{{Kl{ce}}}{}{}}{{{Kh{{Lh{ce}}}}}{{Kh{{Lh{ce}}}}}{}{}}{jf}000000000000000`{{{Ll{c}}{Ll{c}}}EnL`}{{LnLn}En}{{{Ld{c}}{Ld{c}}}EnL`}{{{Lf{c}}{Lf{c}}}EnL`}{{{Kh{c}}{Kh{c}}}EnL`}{{GlGl}En}{{M`M`}En}{{MbMb}En}{{{Lh{ce}}{Lh{ce}}}EnL`L`}{{{Md{ce}}{Md{ce}}}EnL`L`}{{GbGb}En}{{ce}En{}{}}0000000{{{N`{}{{Ml{c}}}}c}{{l{{Jd{e}}{Nb{c}}}}}{}{}}{{{Kl{{Ef{c}}e}}{Gf{c}}cgi}{{l{c{Nb{e}}}}}Gd{L`Lj}{{N`{c}{{Ml{e}}}}}{{Mn{c}{{Ml{e}}}}}}{{{Kl{ce}}{Gf{c}}cF`g}{{l{c{Nb{e}}}}}GdLj{{N`{c}{{Ml{e}}}}}}{{{Kh{{Lh{{Kh{{Lf{c}}}}e}}}}{Gf{c}}cgi}{{l{c{Nb{e}}}}}Gd{L`Lj}{{N`{c}{{Ml{e}}}}}{{Mn{c}{{Ml{e}}}}}}{{{Kh{{Lh{ce}}}}{Gf{c}}cF`g}{{l{c{Nb{e}}}}}GdLj{{N`{c}{{Ml{e}}}}}}{{{Dh{{Md{ce}}}}{Gf{c}}cg{Ej{c}}{El{c}}}{{l{c{Nb{e}}}}}GdLj{{N`{c}{{Ml{e}}}}}}{{{Kl{{Ef{c}}e}}{Gf{c}}cg{Ej{c}}{El{c}}}{{l{c{Nb{e}}}}}Gd{L`Lj}{{N`{c}{{Ml{e}}}}}}{{{Kh{{Lh{{Kh{{Lf{c}}}}e}}}}{Gf{c}}cg{Ej{c}}{El{c}}}{{l{c{Nb{e}}}}}Gd{L`Lj}{{N`{c}{{Ml{e}}}}}}{{{Kl{{Ef{c}}e}}g}{{Kl{ce}}}Gd{L`Lj}{{Mn{c}{{Ml{e}}}}}}{{{Kh{{Lh{{Kh{{Lf{c}}}}e}}}}g}{{Kl{ce}}}Gd{L`Lj}{{Mn{c}{{Ml{e}}}}}}{{{Mf{{Kl{{Ef{c}}e}}e}}g}{{Mf{{Kl{ce}}e}}}Gd{L`Lj}{{Mn{c}{{Ml{e}}}}}}{{{Kl{{Ef{c}}e}}g}{{Gh{c{Gf{c}}}}}Gd{L`Lj}{{Mn{c}{{Ml{e}}}}}}{{{Kl{ce}}g}{{Gh{c{Gf{c}}}}}GdLj{{Mn{c}{{Ml{e}}}}}}{{{Kh{{Lh{ce}}}}g}{{Gh{c{Gf{c}}}}}GdLj{{Mn{c}{{Ml{e}}}}}}{{{Kh{{Lh{{Kh{{Lf{c}}}}e}}}}g}{{Gh{c{Gf{c}}}}}Gd{L`Lj}{{Mn{c}{{Ml{e}}}}}}{{{Kl{{Ef{c}}e}}Aj}AlEd{NdAnd}}{{{Nb{c}}Aj}AlAn}0{{{Ll{c}}Aj}AlAn}{{LnAj}Al}{{{Ld{c}}Aj}AlAn}{{{Lf{c}}Aj}AlAn}{{{Kh{c}}Aj}AlAn}{{GlAj}Al}{{M`Aj}Al}{{MbAj}Al}{{{Lh{ce}}Aj}AlAnAn}{{{Md{ce}}Aj}AlAnAn}{{GbAj}Al}{{{Mf{ce}}Aj}AlAnAn}{cc{}}{{{Ld{c}}}{{Ef{c}}}{}}{F`{{Ef{c}}}Bl}{Ln{{Ef{c}}}{}}{Ln{{Kl{{Ef{c}}e}}}{}{}}{{{Ld{c}}}{{Kl{{Ef{c}}e}}}{}{}}{{{Ef{c}}}{{Kl{{Ef{c}}e}}}{}{}}{F`{{Kl{{Ef{c}}e}}}Bl{}}{F`{{Kl{ce}}}Bl{}}88888{Ln{{Lf{c}}}{}}{{{Ld{c}}}{{Lf{c}}}{}}:{Nfc{}}{c{{Kh{c}}}{}}<<<<<<<<<{Nh{{Cb{Gb}}}}{F`{{Cb{Gb}}}}{IjM`}`{{{Mn{}{{Ml{c}}}}}{{El{e}}}{}Gd}{{{Mn{}{{Ml{c}}}}c}{{Cb{{Gh{e{Gf{e}}}}}}}{}Gd}{{{Mn{}{{Ml{c}}}}}{{Ej{e}}}{}Gd}{{{Mn{}{{Ml{c}}}}Gb}{{Gf{e}}}{}Gd}{{ce}F`{FbFd}Ff}000{{{Ll{c}}e}fFbFh}{{{Kh{c}}e}fFbFh}{{Glc}fFh}{{M`c}fFh}`{{}j}000000000000000{ce{}{}}000000000000000{{M`Il}Ij}{NdEn}{LnEn}{{{Ld{c}}}EnEd}{{{Lf{c}}}EnEd}{{{Kh{c}}}En{Ndd}}{{{Kh{c}}}En{KjL`}}{{{Kh{c}}}EnKj}`{{{Gf{c}}}cGd}{{{Mn{}{{Ml{c}}}}}e{}Gd}{{Nd{Gn{GlNd}}}Ch}{{{Ll{c}}}Ch{NdAn}}{{Ln{Gn{GlLn}}}Ch}{{{Ld{c}}{Gn{Gl{Ld{c}}}}}ChEd}{{{Lf{c}}{Gn{Gl{Lf{c}}}}}ChEd}{{{Kh{c}}{Gn{Gl{Kh{c}}}}}Ch{Ndd}}{{{Kl{{Ef{c}}e}}}{{Df{Ch}}}Ed{NdAnd}}{{{Kh{{Lh{{Kh{{Lf{c}}}}e}}}}}{{Df{Ch}}}Ed{NdAnd}}{{{Kl{ce}}{Nj{e}}}{{l{{Mf{{Kl{ce}}e}}{Nb{e}}}}}{{Nn{}{{Nl{}}}}dO`KnL`}{MhLjFb}}{{{Kh{{Lh{ce}}}}{Nj{e}}}{{l{{Mf{{Kl{ce}}e}}{Nb{e}}}}}{{Nn{}{{Nl{}}}}dO`KnL`}{MhLjFb}}{c{{Kj{}{{Lb{c}}}}}{}}{c{{Kl{{Ef{c}}Fl}}}Ed}{c{{Kl{{Ef{c}}e}}}Bl{L`Lj}}{c{{Ld{e}}}{}d}{c{{Lf{e}}}{}d}{c{{Kh{e}}}{}{Kjd}}{c{{Kh{{Lh{{Kh{{Lf{c}}}}e}}}}}Bl{L`Lj}}{c{{Lh{eg}}}{}Kjd}{{{Mf{ce}}i}{{Mf{ge}}}{}Lj{}{{Ob{c}{{Nl{g}}}}}}`{{{Kl{{Ef{c}}e}}c}gBl{L`Lj}{}}{{{Kh{c}}{Kh{c}}}{{Kh{c}}}{KjL`}}{{{Kl{ce}}{Kl{ce}}}f{KnO`L`d}{L`d}}{{{Kh{c}}}{{Kh{c}}}Kj}{{Nd{Gn{GlNd}}}Ch}{{{Ll{c}}}Ch{NdAn}}{{Ln{Gn{GlLn}}}Ch}{{{Ld{c}}{Gn{Gl{Ld{c}}}}}ChEd}{{{Lf{c}}{Gn{Gl{Lf{c}}}}}ChEd}{{{Kh{c}}{Gn{Gl{Kh{c}}}}}Ch{Ndd}}{{J`{Cb{Jb}}En}Ch}{{J`{Dh{Jb}}}Ch}{{{Kl{{Ef{c}}e}}}ChEd{NdAnd}}{{{Kh{{Lh{{Kh{{Lf{c}}}}e}}}}}ChEd{NdAnd}}`{{}{{Kh{c}}}{KjL`}}{{{Ll{c}}{Ll{c}}}{{Cb{Fn}}}Od}{{GlGl}{{Cb{Fn}}}}{{{Kl{{Ef{c}}Fl}}F`}{{Kl{{Ef{c}}Fl}}}Ed}{{{Kh{c}}F`}{{Kh{c}}}Kj}{{cj}{{Df{c}}}Bl}``{{{Ll{c}}e}lCdCf}{{Lnc}lCf}{{{Ld{c}}e}lCdCf}{{M`c}lCf}{{Mbc}lCf}{{{Md{ce}}g}lCdCdCf}{{{Mf{ce}}g}lCdCdCf}{{{Kl{ce}}}{{Kl{ce}}}{}{}}{{{Kl{{Ef{c}}Fl}}}{{Kl{{Ef{c}}Fl}}}Ed}{{{Kh{{Lh{ce}}}}}{{Kh{{Lh{ce}}}}}{}{}}{{{Kh{c}}{Kh{c}}}{{Kh{c}}}Kj}{{Nd{Gn{GlNd}}}Ch}{{{Ll{c}}}Ch{NdAn}}{{Ln{Gn{GlLn}}}Ch}{{{Ld{c}}{Gn{Gl{Ld{c}}}}}ChEd}{{{Lf{c}}{Gn{Gl{Lf{c}}}}}ChEd}{{{Kh{c}}{Gn{Gl{Kh{c}}}}}Ch{Ndd}}{{{Kl{{Ef{c}}e}}}ChEd{NdAnd}}{{{Kh{{Lh{{Kh{{Lf{c}}}}e}}}}}ChEd{NdAnd}}{Gb{{Cb{Nh}}}}{{{Kj{}{{Lb{c}}}}}{{l{c{Kj{}{{Lb{c}}}}}}}{}}{{{Ld{c}}}{{l{e{Ld{c}}}}}d{}}{{{Lf{c}}}{{l{e{Lf{c}}}}}d{}}{{{Kh{c}}}{{l{e{Kh{c}}}}}{Kjd}{}}{{{Lh{ce}}}{{l{g{Lh{ce}}}}}Kjd{}}{{{Kj{}{{Lb{c}}}}}{{Cb{c}}}{}}{{{Ld{c}}}{{Cb{e}}}d{}}{{{Lf{c}}}{{Cb{e}}}d{}}{{{Kh{c}}}{{Cb{e}}}{Kjd}{}}{{{Lh{ce}}}{{Cb{g}}}Kjd{}}{ce{}{}}000000000000{{Of{Gn{Glj}}{Df{{Md{ce}}}}}f{}{}}{{{Kl{{Ef{c}}e}}}{{Df{{Md{ce}}}}}GdLj}{{{Lf{c}}{Gn{Glj}}{Df{{Md{ce}}}}}fLj{}}{{{Kh{{Lh{{Kh{{Lf{c}}}}e}}}}}{{Df{{Md{ce}}}}}GdLj}{{{Kh{g}}{Gn{Glj}}{Df{{Md{ce}}}}}f{}{}{{Of{ce}}}}{{{Mf{{Kl{{Ef{c}}e}}e}}gci}{{C`{c{I`{c}}}}}Gd{AnL`Lj}{{Mn{c}{{Ml{e}}}}}{{N`{c}{{Ml{e}}}}}}{{{Mf{{Df{{Md{ce}}}}e}}gci}{{C`{c{Gh{c{Gf{c}}}}}}}Gd{LjAn}{{Mn{c}{{Ml{e}}}}}{{N`{c}{{Ml{e}}}}}}{cCh{}}0{Gb{{Cb{F`}}}}{c{{l{e}}}{}{}}0000000000000000000000000000000{F`{{Kl{{Ef{c}}Fl}}}Ed}{{}{{Kl{{Ef{c}}Fl}}}Ed}00{cCj{}}000000000000000{{}Kb}{{{Ef{c}}{Ej{c}}{El{c}}}cBl}{{{Kh{{Lf{c}}}}{Ej{c}}{El{c}}}cBl}{{{Mn{}{{Ml{c}}}}}{{Gh{e{Gf{e}}}}}{}Gd}{ce{}{}}000000000000000{{Fjj{Cb{{Mj{c}}}}}{{Kl{{Ef{c}}Fl}}}Ed}{{}{{Kh{c}}}Kj}`````{eeBl{{Dn{c}}}}{DnDn}{{DnE`}Dn}{{j{Cb{{Mj{c}}}}}Dn{}}{{ee}eBl{{Dn{c}}}}{{{Ef{c}}{Cb{{Mj{c}}}}}Dn{}}544{cDn{}}{{DnF`}Dn}6{F`Dn}{{}Dn}00{{Fjj{Cb{{Mj{c}}}}}Dn{}}`````````````````````````````````````````````==========`{FjFj}{GjGj}{OhOh}{{{Hn{c}}}{{Hn{c}}}{dEd}}{{ce}f{}{}}000{{FjFj}Fn}{{GjGj}Fn}`{{Ojjj}f}{{Oj{C`{jj}}{C`{jj}}}f}{{Ojj{Cb{j}}{Cb{j}}j}f}{Ol{{Hn{c}}}{EdHf}}0{{jj}{{C`{{Df{{Hn{c}}}}j}}}{EdHf}}11{{j{Dh{On}}A`}{{C`{j{Df{{Hn{c}}}}}}}{EdHf}}{j{{C`{j{Df{{Hn{c}}}}}}}{EdHf}}{Ol{{Hn{c}}}Ed}{{jA`}{{C`{j{Df{{Hn{c}}}}}}}{EdHf}}{{Ol{Ib{c}}}{{Hn{c}}}Ed}{{Ol{Ab{c}}{Cb{{Ab{c}}}}}{{Hn{c}}}Ed}4{{Ol{Ib{{Ib{c}}}}}{{Hn{c}}}{EdHf}}{{j{Ib{Ol}}{Dh{{Df{c}}}}}{{C`{{Df{{Hn{c}}}}j}}}{EdHf}}6{{jBbAd}{{C`{j{Df{{Hn{c}}}}}}}{EdHf}}{{jBb}{{Df{{Hn{c}}}}}{EdHf}}{{jOnA`}{{C`{j{Df{{Hn{c}}}}}}}{EdHf}}{{{Ib{Ol}}}{{Df{{Hn{c}}}}}Ed}{{jj}{{C`{j{Df{{Hn{c}}}}}}}{EdHf}}{{}Gj}{{}{{Hn{c}}}{hEd}}{jc{}}000000000{{}f}000{c{{l{Fj}}}n}{c{{l{Gj}}}n}{c{{l{{Hn{e}}}}}nEd}{jf}0000{{{Hn{c}}}cEd}{{FjFj}En}{{GjGj}En}{{OhOh}En}{{ce}En{}{}}00{{{Df{{Hn{c}}}}j}j{EdHf}}{{{Df{{Hn{c}}}}jj{Dh{On}}A`}f{EdHf}}{{{Df{{Hn{c}}}}j}f{EdHf}}{{{Df{{Hn{c}}}}jA`}f{EdHf}}{{{Df{{Hn{c}}}}jOl{Ab{c}}{Cb{{Ab{c}}}}}fEd}142{{{Df{{Hn{c}}}}jj}jEd}03{{{Df{{Hn{c}}}}BbAdj}j{EdHf}}{{{Df{{Hn{c}}}}jOnA`}f{EdHf}}7{{FjAj}Al}{{GjAj}Al}{{OhAj}Al}0{{{Hn{c}}Aj}Al{AnEd}}{cc{}}000{{{Af{c}}}{{Hn{e}}}{}{{Ah{c}}Ed}}{{{Hb{c}}}{{Aj{c}}}Ed}2{BbFj}{BbGj}{Nh{{Cb{Gj}}}}{F`{{Cb{Gj}}}}{IjFj}{IjGj}`{{{Aj{c}}}ChEd}{{ce}F`{FbFd}Ff}0{{Fjc}fFh}{{Gjc}fFh}{{}j}0000{ce{}{}}0000{FjBb}{GjBb}{{FjIl}Ij}{{GjIl}Ij}{BbEn}0{{}{{Df{Al}}}}{{GjOl{Df{c}}}{{Hn{c}}}Ed}{{j{Dh{{Hn{c}}}}}{{Aj{c}}}Ed}{{}c{}}0{{J`{Cb{Jb}}En}Ch}0{{J`{Dh{Jb}}}Ch}0{{FjFj}{{Cb{Fn}}}}{{GjGj}{{Cb{Fn}}}}{{{Hn{c}}}c{EdHf}}`{{{Hn{c}}}{{Ib{{Ib{c}}}}}{EdHf}}{c{}{}}0{{Fjc}lCf}{{Gjc}lCf}{{{Hn{c}}e}lEdCf}{{{Aj{c}}e}lEdCf}{Fjj}{Gj{{Cb{Nh}}}}{ce{}{}}000{cCh{}}{Gj{{Cb{F`}}}}{c{{l{e}}}{}{}}0000{K`{{l{Fj}}}}{K`{{l{Gj}}}}22222`{cCj{}}0000{{}Kb}0{{{Hn{c}}}cEd}{c{{Kd{{Dh{Fj}}}}}{}}{c{{Kd{{Dh{Gj}}}}}{}}{{{Kd{{Dh{Fj}}}}}c{}}{{{Kd{{Dh{Gj}}}}}c{}}{{{Hn{c}}j{Ib{{Df{c}}}}{An{eg}}{Dh{c}}}{{l{fCh}}}{EdHf}{{AAb{}{{AA`{c}}}}}{{AAd{e}}}}{{{Hn{c}}j{Ib{{Df{c}}}}{Hb{c}}}{{l{fCh}}}{EdHf}}{{{Hn{c}}j{Ib{{Df{c}}}}}{{l{fCh}}}Ed}{{{Hn{c}}j{Ib{{Df{c}}}}{Hb{c}}}{{l{fCh}}}Ed}0{{{Hn{c}}j{Ib{{Df{c}}}}{Dh{c}}}{{l{fCh}}}Ed}{{{Hn{c}}j{Ib{{Df{c}}}}}{{l{fCh}}}{EdHf}}3{{{Hn{c}}j{Ib{{Df{c}}}}{Hb{c}}{Dh{c}}}{{AAf{f}}}{EdHf}}{ce{}{}}0000`{{{Hn{c}}e}{{AAh{f}}}EdAAj}{Ol{{Hn{c}}}{EdHf}}````22`{jc{}}0{jf}{{{Hn{c}}}{{Af{e}}}Ed{{Ah{c}}}}0{cc{}}{Ij{{Af{c}}}AAl}{{}j}8{{{Af{c}}Il}IjAAn}{{J`{Cb{Jb}}En}Ch}{{J`{Dh{Jb}}}Ch}{c{{l{e}}}{}{}}0`{cCj{}}{{}Kb}>````````{{c{Gh{c{Gf{c}}}}{Gf{c}}{Dh{{Hn{c}}}}{Ib{{Df{c}}}}cccc{Dh{{Gh{c{Gf{c}}}}}}eAB`j}{{l{{Gh{c{Gf{c}}}}ABb}}}Ed{ABdFd}}??{{{ABf{c}}}{{ABf{c}}}d}{{ce}f{}{}}{{{ABf{c}}En}{{Df{{Eb{c}}}}}Gd}??{c{{l{{ABf{e}}}}}n{ABhABj}}?`{{{ABf{c}}Aj}AlAn}><{ce{}{}}`{AB`{{ABf{c}}}Kn}{{{ABf{c}}e}l{ABhABj}Cf}{{c{Gh{c{Gf{c}}}}{Gf{c}}{Dh{{Hn{c}}}}{Ib{{Df{c}}}}ccAB`j}{{l{{Df{{Df{c}}}}ABb}}}Ed}3<<;{{cgj{Gf{c}}{Dh{{Hn{c}}}}{Ib{{Df{c}}}}cc{Dh{{Gh{c{Gf{c}}}}}}AB`j}fEd{{Ah{}{{Af{c}}}}}{{Ob{}{{Nl{e}}}}}}4{{{Df{c}}{Gf{c}}je}{{Gh{c{Gf{c}}}}}Gd{ABdFd}}```````{{{ABl{c}}}{{ABl{c}}}{}}666666{ABnABn}{{{ABl{c}}}{{ABl{c}}}d}{{{AC`{c}}}{{AC`{c}}}{dGd}}===`{{{Dh{{Hn{c}}}}{Df{{In{c}}}}{Cb{{Df{{Jl{c}}}}}}{Jn{c}}j}{{l{{Cb{{AC`{c}}}}ABn}}}{EdHf}}{{}{{ABl{c}}}h}{jc{}}00000{c{{l{{ABl{e}}}}}nA`}{c{{l{{AC`{e}}}}}n{hGd}}{jf}00`{{ABnAj}Al}0{{{ABl{c}}Aj}AlAn}{{{AC`{c}}Aj}Al{AnGd}}{cc{}}00{{{ABl{c}}Al}e{}{}}0{{}j}00{ce{}{}}00````{{{ABl{c}}g}{{ABl{e}}}{}{}{{Ob{c}{{Nl{e}}}}}}````{{{ABl{c}}e}lCdCf}{{{AC`{c}}e}lGdCf}``333{cCh{}}{c{{l{e}}}{}{}}00000{cCj{}}00666`````````````````````666666666666666666{{AB`{Dh{{Hn{c}}}}}{{Df{{Df{{ACb{c}}}}}}}Ed}{ACdACd}{IhIh}{AB`AB`}{ACfACf}{{{ACh{c}}}{{ACh{c}}}d}{ACjACj}{{{ACl{ce}}}{{ACl{ce}}}dd}{ACnACn}{AlAl}{{ce}f{}{}}00000000{{AlAl}Fn}`{IhAB`}{{{Dh{{Hn{c}}}}En}{{Cb{AB`}}}Ed}{{}ACd}{{}Ih}{jc{}}00000000000000000{{}f}00000{c{{l{ACd}}}n}{c{{l{Ih}}}n}{c{{l{AB`}}}n}{c{{l{ACf}}}n}{c{{l{{ACh{e}}}}}nA`}{c{{l{ACj}}}n}{c{{l{{ACl{eg}}}}}nA`A`}{c{{l{Al}}}n}{c{{l{{AD`{e}}}}}n{}}{jf}00000000```{{ACdACd}En}{{IhIh}En}{{AlAl}En}{{ce}En{}{}}00{{{AD`{c}}cc}c{KnO`d{Nn{}{{Nl{}}}}{Ah{F`}}}}{{{ACh{c}}g}eLj{}{{Ob{ACf}{{Nl{e}}}}}}{{{ACl{{ACh{c}}ACj}}eeg}eLj{}{{Ob{ACf}{{Nl{e}}}}}}{{{ACl{cc}}cc}c{KnO`d{Nn{}{{Nl{}}}}{Ah{F`}}}}`{{ACdAj}Al}{{IhAj}Al}{{AB`Aj}Al}{{ACfAj}Al}{{ACjAj}Al}{{{ACl{ce}}Aj}AlAnAn}{{ACnAj}Al}{{AlAj}Al}`{cc{}}00000000{BbACd}{BbIh}{BbAB`}{{GjFj}{{Cb{Al}}}}{{{Dh{{Hn{c}}}}}ACdEd}{{{Dh{{Hn{c}}}}En}IhEd}{IjACd}{IjIh}{IjAl}{{ce}F`{FbFd}Ff}{{Alc}fFh}{{ACdAl}c{}}0{{}j}00000000{ce{}{}}00000000{ACdBb}{IhBb}{AB`Bb}{ACdc{}}4{{ACdIl}Ij}{{IhIl}Ij}{{AlIl}Ij}{cEn{}}00{{}ACn}`{ACdEn}{ACnj};;;`{Al{{Df{{ACb{c}}}}}Bl}{AlBb}`{Alj}`{{EnEnEnEn}ACd}{{ACdEnEn}Ih}{{jBbIh}AB`}{ACn{{Cb{c}}}{}}0{{}c{}}00{{ACnj}{{Cb{c}}}{}}{{J`{Cb{Jb}}En}Ch}00{{J`{Dh{Jb}}}Ch}00{c{{ADb{e}}}{}{}}{{AlAl}{{Cb{Fn}}}}``{{{ACl{{ACh{c}}ACj}}g}{{AD`{e}}}Lj{}{{Ob{ACf}{{Nl{e}}}}}}{ce{}{}}00000{c{}{}}00`{{AB`{Jn{c}}{Dh{{Hn{c}}}}}{{C`{{ABl{{Gh{c{Gf{c}}}}}}{Df{{In{c}}}}}}}Ed}{{ACdc}lCf}{{Ihc}lCf}{{AB`c}lCf}{{ACfc}lCf}{{{ACh{c}}e}lCdCf}{{ACjc}lCf}{{{ACl{ce}}g}lCdCdCf}{{Alc}lCf}{{{AD`{c}}e}l{}Cf}{ACn{{C`{j{Cb{j}}}}}}{Al{{Cb{ADd}}}}```========={c{{l{e}}}{}{}}00000000{K`{{l{ACdc}}}{}}{K`{{l{Ihc}}}{}}{K`{{l{AB`c}}}{}}333333333{cCj{}}00000000{{}Kb}00``{c{{Kd{{Dh{ACd}}}}}{}}{c{{Kd{{Dh{Ih}}}}}{}}{c{{Kd{{Dh{AB`}}}}}{}}{{{Kd{{Dh{ACd}}}}}c{}}{{{Kd{{Dh{Ih}}}}}c{}}{{{Kd{{Dh{AB`}}}}}c{}}{ce{}{}}00000000`````000000`{ADfADf}{{{Jl{c}}}{{Jl{c}}}d}{{{ADh{c}}}{{ADh{c}}}d}{{ce}f{}{}}00{{}{{Df{{Eb{c}}}}}Bl}`{jc{}}00000{c{{l{ADf}}}n}{c{{l{{Jl{e}}}}}nA`}{jf}00`{{ADfAj}Al}{{{Jl{c}}Aj}AlAn}{{{ADh{c}}Aj}AlAn}{cc{}}{ADjADf}{{{Jl{c}}}ADf{}}{{{ADl{e}}}{{Jl{c}}}Ed{{ADn{c}}}}33{{{AE`{e}}}{{ADh{c}}}Ed{{ADn{c}}}}{{{Jl{c}}}AEb{}}```{{}j}00{ce{}{}}00{{{Jl{c}}}En{}}{{{Jl{c}}}j{}}`{{ADfc}lCf}{{{Jl{c}}e}lCdCf}444{c{{l{e}}}{}{}}00000{cCj{}}00666```666666`{jc{}}00000{jf}00`{{{ADh{c}}}{{AE`{e}}}Ed{{Ah{c}}}}{cc{}}0{ADfADj}{{{Jl{c}}}{{ADl{e}}}Ed{{Ah{c}}}}2{Ij{{AE`{c}}}AAl}{IjADj}{Ij{{ADl{c}}}AAl}```{{}j}00{ce{}{}}00{{{AE`{c}}Il}IjAAn}{{ADjIl}Ij}{{{ADl{c}}Il}IjAAn}`{{J`{Cb{Jb}}En}Ch}00{{J`{Dh{Jb}}}Ch}00{c{{l{e}}}{}{}}00000{cCj{}}00{{}Kb}00888```````888888`{ADdADd}{AEdAEd}{{{In{c}}}{{In{c}}}d}{{ce}f{}{}}00{{{Dh{{AEf{c}}}}{Cb{{AEf{c}}}}{Cb{{AEf{c}}}}}{{AEf{c}}}AEh}{{ccec}c{KnO`d}{{AEj{}{{Af{c}}}}}}`{jc{}}00000{c{{l{ADd}}}n}{c{{l{AEd}}}n}{jf}00{{ADdADd}En}{{AEdAEd}En}{{ce}En{}{}}0{{ADdAj}Al}{{AEdAj}Al}{{{In{c}}Aj}AlAn}{cc{}}0{{{AEl{e}}}{{In{c}}}Ed{{ADn{c}}}}1{{ce}F`{FbFd}Ff}0{ADd{{In{c}}}Gd}{{{In{c}}}EnGd}{{ADdc}fFh}{{AEdc}fFh}`{{AEdADd}c{}}0{{}j}00{ce{}{}}00{AEdc{}}6{{{In{c}}}jGd}``{{ADdc}lCf}{{AEdc}lCf}{ADdj}555{c{{l{e}}}{}{}}00000{cCj{}}007775```77`{jc{}}0{jf}{cc{}}{{{In{c}}}{{AEl{e}}}Ed{{Ah{c}}}}{Ij{{AEl{c}}}AAl}`=<{{{AEl{c}}Il}IjAAn}{{J`{Cb{Jb}}En}Ch}{{J`{Dh{Jb}}}Ch}998{{}Kb}{ce{}{}}``{{}{{In{c}}}Bl}`0```````111111111111{{{AEn{c}}}{{AEn{c}}}{dGd}}{{{AF`{c}}}{{AF`{c}}}{dGd}}{{{Id{c}}}{{Id{c}}}{dGd}}{{{AFb{c}}}{{AFb{c}}}{dGd}}{{{AFd{c}}}{{AFd{c}}}{dGd}}{{{AFf{c}}}{{AFf{c}}}{dGd}}{{ce}f{}{}}00000``{jc{}}00000000000{jf}00000{cc{}}00000````{{}j}00000<<<<<<````````<<<<<<{c{{l{e}}}{}{}}00000000000{cCj{}}00000>>>>>>```````````````````{{ccj}{{Ib{{Df{c}}}}}Ed}{{{Ib{{Df{c}}}}ccj}fEd}{{}{{In{c}}}Ed}`{cB`{}}{ce{}{}}0{{c{b{e}}E`}{{Kh{{Lh{{Kh{{Lf{e}}}}Fl}}}}}{}{}}{{{Dl{ce}}E`}{{Df{e}}}Ed{{Dn{c}}}}{{cE`}{{Df{{Kh{{Lh{{Kh{{Lf{e}}}}Fl}}}}}}}{}{}}{{}{{AFh{c}}}h}>>=<;4::94`544321{{}{{AFj{c}}}h}??>={{{Ib{{Df{c}}}}ccj}c{EdAd}}=6<<;6```76666543{{}{{AFl{c}}}h}{jc{}}000{jf}0{cc{}}0{{{Ib{{Df{c}}}}jc{C`{cc}}{Dh{En}}{C`{cc}}}{{AFn{c}}}{BlAd}}{{}j}0<<`{c{{l{e}}}{}{}}000{cCj{}}0>>````?>>=<;{{}{{AG`{c}}}h}77653?221?```??{OnOn}{{ce}f{}{}}{{{Df{A`}}{Dh{On}}A`}{{Ib{{Df{c}}}}}Ed}::9{{OnOn}En}{{ce}En{}{}}{{{Ib{{Df{c}}}}{Ib{c}}{Ib{c}}}fEd}{{OnAj}Al}<:{ce{}{}}{OncEd}1;;:1``````````````{{}AGb}{AGdA`}{AGfA`}`2{AGbA`}{AGh{{Ib{A`}}}}{AGb{{Ib{c}}}Bl}{AGb{{Ib{A`}}}}{AGj{{Ib{c}}}Ed}2{AGl{{Ib{c}}}Bl}024888````{cB`{}};;{{c{b{e}}E`}{{Kh{{Lh{{Kh{{Lf{e}}}}Fl}}}}}{}{}}{{{Ib{e}}}eEd{{Dn{c}}}}{{{Ib{e}}{Ib{e}}{Ib{e}}{Ib{e}}}{{Ib{e}}}Ed{{Dn{c}}}}{{{Ib{e}}{Ib{e}}{Ib{e}}{Ib{e}}{Ib{e}}}{{Ib{e}}}Ed{{Dn{c}}}}{{{Dl{ce}}E`}{{Df{e}}}Ed{{Dn{c}}}}{{cE`}{{Df{{Kh{{Lh{{Kh{{Lf{e}}}}Fl}}}}}}}{}{}}{{}{{AGn{c}}}h}{jc{}}0{jf}{cc{}}{{}j}{ce{}{}}{c{{l{e}}}{}{}}0{cCj{}}2`{GjBb}{{Gj{b{c}}E`}{{Eb{c}}}Ed}{Gjj}{{}{{Ib{Gj}}}}{{{b{c}}E`}{{Eb{c}}}Ed}{{}{{In{c}}}Ed}`{{{AH`{c}}{Ib{c}}}fEd}0{{{AH`{c}}c}fEd}01::``{{A`A`}A`}0{{A`A`A`}{{C`{{Ib{{Df{c}}}}{AH`{c}}}}}Ed}{{}{{AH`{c}}}{hEd}}{jc{}}0{jf}{{{AH`{c}}{Ib{{Df{c}}}}{Ib{c}}}fEd}{{{AH`{c}}{Ib{{Df{c}}}}}fEd}{{{AH`{c}}{Ib{{Df{c}}}}A`}fEd}11{cc{}}`{{}j}{ce{}{}}``{c{{l{e}}}{}{}}0{cCj{}}2````````````{cB`{}}3333{{{Ab{c}}}{{Ab{c}}}d}{{ce}f{}{}}{{c{b{e}}E`}{{Kh{{Lh{{Kh{{Lf{e}}}}Fl}}}}}{}{}}{{{Dl{ce}}E`}{{Df{e}}}Ed{{Dn{c}}}}{{cE`}{{Df{{Kh{{Lh{{Kh{{Lf{e}}}}Fl}}}}}}}{}{}}{{}{{AHb{c}}}h}{jc{}}000{jf}0==<<;;`;::::99;;`````{{jj}{{Df{{Hn{c}}}}}Ed}{{j{Ib{{Df{c}}}}{Dh{c}}}fGd}```=={{{Dh{F`}}}{{Df{F`}}}}`0{{{Dh{F`}}}F`}`{F`{{Df{F`}}}}665{F`F`}{{{Dh{AHd}}}{{Df{F`}}}}{F`{{Df{e}}}Ed{{Dn{c}}}}{cc{}}`{{}j}{ce{}{}}{jj}{{{Dh{AHd}}}{{Df{AHd}}}}16::8{c{{l{e}}}{}{}}0{cCj{}}4```{cB`{}}05555{{c{b{e}}E`}{{Kh{{Lh{{Kh{{Lf{e}}}}Fl}}}}}{}{}}0{{{Dl{ce}}E`}{{Df{e}}}Ed{{Dn{c}}}}0{{cE`}{{Df{{Kh{{Lh{{Kh{{Lf{e}}}}Fl}}}}}}}{}{}}0{{}{{AHf{c}}}h}{{}{{AHh{c}}}h}{jc{}}000{jf}0>>==<<999988<<`````````````````````````````````````````````````````````````<<<<<<<<<<{{{Dh{F`}}}AHj}{{{Dh{F`}}}AHl}{{{Dh{F`}}}AHn}{{{Dh{F`}}j}AI`}{{AHjjj}F`}{{AHljjj}F`}1077777777776666610{{{Ib{{Df{c}}}}A`}fEd}{cc{}}0000{{}j}0000{ce{}{}}0000{{AHjj}F`}565{{AI`j}F`}{{AHnjjjj}F`}{{AHjjjj}F`}{{AHljjjj}F`}2{AHl{{Df{F`}}}}{AHj{{Df{F`}}}}{AHn{{Df{F`}}}}{AI`{{Df{F`}}}}{c{{l{e}}}{}{}}000000000{cCj{}}0000;;;;;{{{Ib{{Df{c}}}}c{Cb{j}}}fEd}{{{Ib{{Df{c}}}}{Dh{c}}j}{{l{fCh}}}Ed}``=={jc{}}0{jf}{{{Gf{c}}F`c}cGd}0{cc{}}{{}j}{ce{}{}}{{{Gf{c}}}{{AIb{c}}}{GdHf}}{{{Gf{c}}F`}{{I`{c}}}Gd}{{{AIb{c}}}{{Ib{c}}}{GdHf}}<<;13{{{Gf{c}}F`}cGd}``````{cB`{}}55{{c{b{e}}E`}{{Kh{{Lh{{Kh{{Lf{e}}}}Fl}}}}}{}{}}{{{Dl{ce}}E`}{{Df{e}}}Ed{{Dn{c}}}}{{cE`}{{Df{{Kh{{Lh{{Kh{{Lf{e}}}}Fl}}}}}}}{}{}}{{}{{AId{c}}}h}>>=;{{j{AIf{c}}{Ib{{Df{c}}}}{Ib{c}}}fBl};:{j{{Bn{j}}}}{c{{l{e}}}{}{}}0{cCj{}}=`````88====776655{{}{{AIh{c}}}h}{{}{{AIj{c}}}h}{jc{}}000{jf}0{cc{}}0{{}j}0{ce{}{}}088887700`{GjBb}{{Gj{b{c}}E`}{{Eb{c}}}Ed}{{}{{Ib{Gj}}}}{{{b{c}}E`}{{Eb{c}}}Ed}{{}{{In{c}}}Gd}{c{{Ib{{Df{c}}}}}Ed}{{ccc}{{Ib{{Df{c}}}}}Ed}{{cc}{{Ib{{Df{c}}}}}Ed}{{{Ib{c}}}{{Ib{{Df{c}}}}}Ed}0{{{Ib{{Df{c}}}}c}fEd}{{{Ib{{Df{c}}}}ccc}fEd}{{{Ib{{Df{c}}}}cc}fEd}{{{Ib{{Df{c}}}}{Ib{c}}}fEd}{{{Ib{{Df{c}}}}{AIl{c}}}fEd}14{{Jbj}{{Df{{Kd{AIn}}}}}}````{cB`{}}{ce{}{}}000{AdAd}{{ce}f{}{}}{{c{b{e}}E`}{{Kh{{Lh{{Kh{{Lf{e}}}}Fl}}}}}{}{}}{{{Dl{ce}}E`}{{Df{e}}}Ed{{Dn{c}}}}{{cE`}{{Df{{Kh{{Lh{{Kh{{Lf{e}}}}Fl}}}}}}}{}{}}{{}{{AJ`{c}}}h}{jc{}}000{jf}0{{AdAd}En}{{ce}En{}{}}{{{Ib{{Df{c}}}}F`BbAd}fEd}{{AdAj}Al}{cc{}}0{{}j}0>>{{}{{In{c}}}Ed}?{c{{l{e}}}{}{}}000{cCj{}}0{ce{}{}}0`````{cB`{}}00011111111{{Gj{b{c}}E`}{{Eb{c}}}Ed}{{c{b{e}}E`}{{Kh{{Lh{{Kh{{Lf{e}}}}Fl}}}}}{}{}}000{{{Dl{ce}}E`}{{Df{e}}}Ed{{Dn{c}}}}000{{cE`}{{Df{{Kh{{Lh{{Kh{{Lf{e}}}}Fl}}}}}}}{}{}}000{jc{}}0000000{jf}000<<<<;;;;7777`9999999988887777`{{{Hn{c}}j{Ib{{Df{c}}}}}{{l{fCh}}}Ed}{{{AJb{c}}}{{Ib{{Df{c}}}}}Bl}````8999999654{{}{{AJd{c}}}h}444444333???>>>:::`<<<<<<;;;:::{{{Ib{{Df{c}}}}j{C`{cc}}{Dh{En}}{C`{cc}}}{{AJf{c}}}{GdAd}}`:;;876{{ccj}{{Ib{{Df{c}}}}}Ed}{{}{{AJh{c}}}h}776{{{Ib{{Df{c}}}}ccj}fEd}{cc{}}{{}j}{ce{}{}}{{}{{In{c}}}Ed}{jj}{c{{l{e}}}{}{}}0{cCj{}}4````44`{{{AJj{c}}}{{AJj{c}}}{dBl}}{{ce}f{}{}}{{}{{AJj{c}}}Bl}{jc{}}0{jf}{{{AJj{c}}Aj}Al{AnBl}}{{{AJl{e}}}{{AJj{c}}}Bl{{ADn{c}}}}=`<;`;887````;``````;;332={{{AJj{c}}}{{AJl{e}}}Bl{{Ah{c}}}}{Ij{{AJl{c}}}AAl}`>={{{AJl{c}}Il}IjAAn}`{{J`{Cb{Jb}}En}Ch}{{J`{Dh{Jb}}}Ch}==<``{{}Kb}``{ce{}{}}````````00`{AJnAJn}=`{{AEbAEb}AJn}{{}AJn}=={{}f}0{c{{l{AJn}}}n}>{{AJnAJn}En}{{ce}En{}{}}{{AJnAj}Al}{j{{Ib{AJn}}}}{AK`AJn}{cc{}}{BbAJn}{{}j}={AJnBb}{cEn{}}?{jAKb}{jOl}{{jj}AJn}{{}c{}}{c{{AAh{AJn}}}AKd}{ce{}{}}0{c{}{}}`{{AJnc}lCf}2{c{{l{e}}}{}{}}{K`{{l{AJnc}}}{}}1{cCj{}}{c{{Kd{{Dh{AJn}}}}}{}}{{{Kd{{Dh{AJn}}}}}c{}}7`{{AKbjAJn}AKb}{{OljAJn}Ol}{{AJnc}{{AAh{f}}}AAj}`::`{jc{}}0{jf}{AJnAK`}{cc{}}{IjAK`}{{}j}{ce{}{}}{{AK`Il}Ij}{{J`{Cb{Jb}}En}Ch}{{J`{Dh{Jb}}}Ch}`{c{{l{e}}}{}{}}0{cCj{}}{{}Kb}6`````````6666666666666666{c{{Kd{{AKf{c}}}}}Bl}{{jjjj}{{Kd{AKh}}}}{{jj}{{Kd{AKj}}}}{{jjF`}{{Kd{AKl}}}}{{Jbjj}{{Kd{AKn}}}}{{Jbj{Cb{j}}}{{Kd{AL`}}}}{Jb{{Kd{ALb}}}}{{}{{ALd{c}}}{}}{jc{}}000000000000000{jf}0000000{cc{}}0000000{{{ALd{c}}Jb}e{}{}}0{{{Ib{{Df{c}}}}j{Dh{{Df{{Kd{AIn}}}}}}{ALd{e}}}fEd{}}{{}j}0000000{{{Ib{{Df{c}}}}jjjjj{Dh{{Df{{Kd{AIn}}}}}}{ALd{e}}}fEd{}}{{{Ib{{Df{c}}}}jj{Dh{{Df{{Kd{AIn}}}}}}{ALd{e}}}fEd{}}{{{ALd{c}}Jbc}f{}}{ce{}{}}0000000{AKnj}{AInj}{c{{l{e}}}{}{}}000000000000000{cCj{}}0000000{{AIn{Ib{{Df{c}}}}{ALd{e}}j}cBl{}}{{{AKf{c}}{Ib{{Df{c}}}}{ALd{c}}j}cBl}{{AKh{Ib{{Df{c}}}}{ALd{c}}j}cBl}{{AKj{Ib{{Df{c}}}}{ALd{c}}j}cBl}{{AKl{Ib{{Df{c}}}}{ALd{c}}j}cBl}{{AKn{Ib{{Df{c}}}}{ALd{{Df{c}}}}j}cBl}{{AL`{Ib{{Df{c}}}}{ALd{c}}j}cBl}{{ALb{Ib{{Df{c}}}}{ALd{c}}j}cBl}``<<<<<<<<``{{}{{C`{ce}}}{}{}}{{}c{}}{{}{{C`{cc}}}{}}{{}{{AIf{c}}}{}}0`````````````````````````````````{ce{}{}}000000000{ABbABb}{ALfALf}{KfKf}{HdHd}{ALhALh}{{ce}f{}{}}0000{jc{}}000000000{jf}0000{{ABbAj}Al}0{{ALfAj}Al}0{{KfAj}Al}0{{HdAj}Al}0{{ALhAj}Al}0{cc{}}0000{{}j}0000??????????{cCh{}}0000{c{{l{e}}}{}{}}000000000{cCj{}}0000{ce{}{}}0000`00<<;{{{ALj{c}}{Gh{ce}}}{{Df{c}}}Gd{{ALl{c}}}}0651{{j{Gf{c}}c}{{ALj{c}}}Gd}4432{{{Cb{Hh}}En}{{C`{{Kl{{Ef{c}}Fl}}{b{c}}}}}{EdHf}}{{{Cb{Hh}}En}{{C`{{Mf{{Df{{Md{cFl}}}}Fl}}{b{c}}}}}{EdHf}}{{{Cb{Hh}}}{{Nj{Fl}}}}``55``{jc{}}0`{jf}`<`;7````9987``77{{{Df{{AEf{c}}}}{ALn{c{D`{c}}}}{Db{c{D`{c}}}}Dh}{{l{{AM`{e}}ALf}}}AAbAh}22`1={Ij{{AM`{c}}}AAl}=9{{{AM`{c}}Il}IjAAn}`{{J`{Cb{Jb}}En}Ch}{{J`{Dh{Jb}}}Ch}``>>={{}Kb}=`{{AMbc}fBl}{{AMb{Jf{{Jd{{Df{c}}}}}}}fBl}{{AMb{Dh{c}}}fBl}{AMb{{AMd{c}}}Bl}{AMbcBl}{{{AIf{c}}}AMbBl}`{{}{{AMf{c}}}AAb}```````{ce{}{}}00000000000``{{{Jd{c}}}{{Jd{c}}}d}{{{Jf{c}}}{{Jf{c}}}d}{{{AMh{c}}}{{AMh{c}}}{dAMj}}{{{AMl{c}}}{{AMl{c}}}{dAMj}}{{{Db{ce}}}{{Db{ce}}}{dAMj}d}{{{AMn{c}}}{{AMn{c}}}{AMjd}}{{ce}f{}{}}00000`{{{Jf{{Jd{{Df{c}}}}}}{Jd{c}}}{{Jf{{Jd{c}}}}}Gd}```{{{Ib{Df}}{Dh{ADh}}{An{ce}}}{{l{{Db{ce}}ABb}}}AAb{{AAd{c}}}}{{{Ib{Df}}{Dh{ADh}}{An{ce}}{Df{{AMn{c}}}}{Cb{{Ib{{Cb{AEf}}}}}}}{{l{{Db{ce}}ABb}}}AAb{{AAd{c}}}}{{}{{Jd{c}}}h}{jc{}}00000000000{c{{l{{Jd{e}}}}}n{}}{c{{l{{Jf{e}}}}}nA`}{c{{l{{AMh{e}}}}}n{ABjABhAMj}}{c{{l{{AMl{e}}}}}n{ABjABhAMj}}{c{{l{{Db{eg}}}}}n{ABjABhAMj}A`}{c{{l{{AMn{e}}}}}n{AMjABjABh}}{jf}00000{{{Ib{c}}{Ib{c}}}{{Jf{{Jd{c}}}}}{KnLj}}``{{{AMn{c}}jDhDh}{{Df{Df}}}AMj}`{{{Jf{{Jd{c}}}}e}{{l{{Jd{c}}{Nb{e}}}}}Lj{}}{{{Jd{c}}Aj}AlAn}{{{Jf{c}}Aj}AlAn}{{{AMh{c}}Aj}Al{AnAMj}}{{{AMl{c}}Aj}Al{AnAMj}}{{{Db{ce}}Aj}Al{AnAMj}An}{{{AMn{c}}Aj}Al{AMjAn}}```{cc{}}0{{{C`{{Cb{{Jd{{Df{c}}}}}}{AN`{c}}}}}{{Jf{{Jd{{Df{e}}}}}}}d{d{Ah{c}}}}{{{ANb{c}}}{{AMh{e}}}{}AMj}2{{{ANd{c}}}{{AMl{e}}}{}AMj}333{{{ANf{ce}}}{{AMn{g}}}{}{}{AMj{Ah{c}}}}{Ij{{Jd{c}}}AAl}``{{{Jf{c}}Fl}{{Cb{c}}}{}}{{}j}00000{ce{}{}}00000{{{Jd{c}}Il}IjAAn}`````{{{Jd{c}}g}{{Jd{e}}}{}{}{{Ob{c}{{Nl{e}}}}}}{{{Jf{c}}g}{{Jf{e}}}{}{}{{Ob{c}{{Nl{e}}}}}}10`{{Df{AEf{c}}}{{AMn{c}}}AMj}{{J`{Cb{Jb}}En}Ch}{{J`{Dh{Jb}}}Ch}{{{Db{ce}}{ALn{ce}}{AEf{c}}{Cb{Dh}}}{{ANj{{ANh{cg}}}}}AAb{{AAd{c}}}{d{ANl{c}}}}````````````{{{Jd{c}}e}l{}Cf}{{{Jf{c}}e}lCdCf}{{{AMh{c}}e}l{ABjABhAMj}Cf}{{{AMl{c}}e}l{ABjABhAMj}Cf}{{{Db{ce}}g}l{ABjABhAMj}CdCf}{{{AMn{c}}e}l{AMjABjABh}Cf}``======{c{{l{e}}}{}{}}00000000000{cCj{}}00000{{}Kb}{ce{}{}}00000``````````0000`{{{ANf{ce}}}{{ANf{ce}}}dd}{{{AN`{c}}}{{AN`{c}}}d}{{ce}f{}{}}0```{jc{}}000{jf}0`````{cc{}}{{{AMn{c}}}{{ANf{eg}}}AMj{{Ah{c}}}Ah}1{Ij{{ANf{ce}}}AAlAAl}{Ij{{AN`{c}}}AAl}`{{}j}0::{{{ANf{ce}}Il}IjAAnAAn}{{{AN`{c}}Il}IjAAn}`````{{J`{Cb{Jb}}En}Ch}0{{J`{Dh{Jb}}}Ch}0````````>>{c{{l{e}}}{}{}}000{cCj{}}0{{}Kb}0{ce{}{}}0````````````00000000{{{ANb{c}}}{{ANb{c}}}d}{{{ANd{c}}}{{ANd{c}}}d}{{ce}f{}{}}0`{jc{}}0000000{jf}000`{cc{}}{{{C`{{Db{c{D`{c}}}}Df}}}{{ANn{eg}}}AMj{{Ah{c}}}Ah}11{{{AMh{c}}}{{ANb{e}}}AMj{}}{{{AMl{c}}}{{ANd{e}}}AMj{}}3{Ij{{ANn{ce}}}AAlAAl}{Ij{{AO`{ce}}}AAlAAl}{Ij{{ANb{c}}}AAl}{Ij{{ANd{c}}}AAl}`{{}j}000>>>>{{{ANn{ce}}Il}IjAAnAAn}{{{AO`{ce}}Il}IjAAnAAn}{{{ANb{c}}Il}IjAAn}{{{ANd{c}}Il}IjAAn}`{{J`{Cb{Jb}}En}Ch}000{{J`{Dh{Jb}}}Ch}000````````{ce{}{}}0{c{{l{e}}}{}{}}0000000{cCj{}}000{{}Kb}0003333````33```{AObAOb}{{ce}f{}{}}```````{{}AOb}{jc{}}0{jf}`{{AObAj}Al}0{cc{}}`{{}j};`````{{AObc}lCf}`{{}f}7={cCh{}}==<`>``>>776{{AOdAj}Al}{AObAOd}6{IjAOd}6{ce{}{}}{{AOdIl}Ij}{{J`{Cb{Jb}}En}Ch}{{J`{Dh{Jb}}}Ch}{c{{l{e}}}{}{}}0{cCj{}}{{}Kb}6`66{{{An{ce}}}{{An{ce}}}{dAAb}{d{AAd{c}}}}{{ce}f{}{}}`{{{An{ce}}}{}AAb{{AAd{c}}}}{{HbJj}{{An{ce}}}AAb{{AAd{c}}}}`{jc{}}0{c{{l{{An{eg}}}}}n{hAAb}{h{AAd{e}}}}{jf}{{{An{ce}}Aj}Al{AnAAb}{An{AAd{c}}}}{cc{}}{{}j}{ce{}{}}``{{{An{eg}}{Ib{{Df{c}}}}cci}{{l{{I`{c}}ABb}}}Ed{{AAb{}{{AA`{c}}}}}{{AAd{e}}}{AOfAOh}}{{{An{eg}}{Jf{{Jd{c}}}}ccci}{{Gh{c{Gf{c}}}}}Ed{{AAb{}{{AA`{c}}}}}{{AAd{e}}}{{Ah{}{{Af{c}}}}}}{{{An{eg}}{Id{c}}cc{I`{c}}i}{{l{{C`{{Gh{c{Gf{c}}}}{I`{c}}}}ABb}}}Ed{{AAb{}{{AA`{c}}}}}{{AAd{e}}}{{Ah{}{{Af{c}}}}}}`{{{An{ce}}g}lAAb{{AAd{c}}}Cf}``4{c{{l{e}}}{}{}}0{cCj{}}{{{An{ce}}}{{ALn{ce}}}AAb{{AAd{c}}}}`?`{{{An{eg}}{Ib{{Df{c}}}}{Dh{c}}}{{l{fIf}}}{EdHf}{{AAb{}{{AA`{c}}}}}{{AAd{e}}}}{{{An{eg}}{Ib{{I`{c}}}}{I`{c}}}EnEd{{AAb{}{{AA`{c}}}}}{{AAd{e}}}}9{{{Df{Hn}}j}{{An{c{D`{c}}}}}AAb}{{{Df{Hn}}jj{Df{In}}{Cb{{Df{Jl}}}}En{Cb{j}}}{{An{c{D`{c}}}}}AAb}{{{Df{Hn}}jj{Df{In}}{Cb{{Df{Jl}}}}En{Cb{j}}c}{{An{eg}}}{{AOj{Gfj}{{Nl{}}}}}AAb{{AAd{e}}}}```````````````````````{{{AOl{c}}}ChAOn}========{{{AOn{}{{B`{c}}{Bb{e}}{Bd{g}}{Bf{i}}{Bh{k}}}}Bji{Cb{g}}}{{Bl{k}}}AAb{{AAd{c}}}{}BnBn}{{{AOn{}{{B`{c}}{Bb{e}}{Bd{g}}{Bf{i}}{Bh{k}}}}}{{Bl{{C`{{AOl{{AOn{}{{B`{c}}{Bb{e}}{Bd{g}}{Bf{i}}{Bh{k}}}}}}{BA`{{AOn{}{{B`{c}}{Bb{e}}{Bd{g}}{Bf{i}}{Bh{k}}}}}}}}}}}AAb{{AAd{c}}}{}BnBn}{{{BAb{c}}}fEd}{jc{}}0000000{jf}000{{{BAb{c}}Aj}AlAn}{cc{}}000`{{}j}000{ce{}{}}000{{{AOl{c}}En}{{Bl{{C`{DbKd}}}}}AOn}{c{{l{e}}}{}{}}0000000{cCj{}}000{{{BA`{c}}Db}fAOn}4444`44{{}{{BAd{c}}}h}::976{{{BAd{c}}c}En{BAfFbd}}6{{{BAd{c}}}En{BAfFbd}}{{{BAd{c}}}{{`{{Ah{}{{Af{c}}}}}}}{BAfFbd}}{{{BAd{c}}}j{BAfFbd}}{{{BAd{c}}c}j{BAfFbd}}887:`{{{Dh{{BAh{c}}}}{Bj{c}}{BAj{Jb}}}{{Bl{{BAh{c}}}}}Ed}{{{BAh{c}}{BAh{c}}{Bj{c}}{BAj{Jb}}}{{BAh{c}}}Ed}1<<{{{BAh{c}}{Bj{c}}{BAj{Jb}}}{{Bl{f}}}Ed}{{{BAh{c}}}{{BAh{c}}}{dEd}}{{ce}f{}{}}{{}c{}}{{{BAl{c}}}{{BAh{c}}}Ed}{jc{}}0{jf}{{}{{BAh{c}}}Ed}{{{BAh{c}}Aj}Al{AnEd}}{cc{}}{{{Df{{BAl{c}}}}e}{{BAh{c}}}Ed{}}{{}j}{ce{}{}}{{{BAh{c}}}{{BAh{c}}}Ed}{{{BAh{c}}{BAh{c}}{BAj{Jb}}{Bj{c}}}{{BAh{c}}}Ed}{{{BAh{c}}}{{Cb{En}}}Ed}{{{BAh{c}}}{{C`{{Df{{BAl{c}}}}e}}}Ed{}}{{{BAh{c}}}{{BAl{c}}}Ed}5:{c{{l{e}}}{}{}}0{cCj{}}{{{Df{c}}e}gEd{}{}}{c{{C`{{Df{e}}g}}}{}Ed{}}9{{{BAh{c}}{BAh{c}}{Bj{c}}{BAj{Jb}}}{{Bl{{BAh{c}}}}}Ed}``::{{{BAn{c}}}{{BAn{c}}}{dBl}}{{ce}f{}{}}{jc{}}0{jf}`{{{BAn{c}}Aj}Al{AnBl}}{cc{}}{{}j}{ce{}{}}{{}{{BAn{c}}}Bl}`1==<1```````````````````````````{{{BB`{c}}{Dh{{BAj{Jb}}}}{BAj{Jb}}{BBb{e}}}fEd{{BBf{}{{BBd{c}}}}}}{{{BB`{c}}{Dh{{BAj{Jb}}}}{BAj{Jb}}{BBh{ec}}}fEd{{BBf{}{{BBd{c}}}}}}````````33333333333333333333`{c{{Cb{{C`{{Df{{C`{j}}}}jEn}}}}}BBf}{{{BBb{{BAl{c}}}}e}{{l{f{Kd{BBj}}}}}Ed{{BBl{c}}}}{{{BBh{{BAl{c}}c}}e}{{l{f{Kd{BBj}}}}}Ed{{BBl{c}}}}{{{BB`{c}}}{{BB`{c}}}{Edd}}={{{BB`{c}}e}{{Ib{{Df{c}}}}}Ed{{Ob{j}{{Nl{c}}}}}}{{{BB`{c}}{Dh{c}}{Dh{c}}}{{Ib{{Df{c}}}}}Ed}{{{BAn{c}}}{{BB`{c}}}Ed}????????????????????{{{BB`{c}}}{{Ib{AHd}}}Ed}??????????{{{BB`{c}}}fEd}{{{BB`{c}}}{{Df{{Hn{c}}}}}Ed}{{{BBn{c}}Aj}AlAn}{{{BC`{c}}Aj}AlAn}{{{BCb{c}}Aj}AlAn}{{{BBb{c}}Aj}AlAn}{{{BCd{ce}}Aj}AlAnAn}{{{BCf{c}}Aj}AlAn}{{{BCh{c}}Aj}AlAn}{{{BCj{c}}Aj}AlAn}{{{BBh{ce}}Aj}AlAnAn}{{{BB`{c}}Aj}Al{EdAn}}{cc{}}000000000{Ij{{BBn{c}}}AAl}{Ij{{BC`{c}}}AAl}{Ij{{BCb{c}}}AAl}{Ij{{BCd{ce}}}AAlAAl}{Ij{{BCf{c}}}AAl}{Ij{{BCh{c}}}AAl}{Ij{{BCj{c}}}AAl}{Ij{{BBh{ce}}}AAlAAl}{{{BB`{c}}}{{Cb{j}}}Ed}{{{BB`{c}}}jEd}0``{{}j}000000000{ce{}{}}000000000{{{BBn{c}}Il}IjAAn}{{{BC`{c}}Il}IjAAn}{{{BCb{c}}Il}IjAAn}{{{BCd{ce}}Il}IjAAnAAn}{{{BCf{c}}Il}IjAAn}{{{BCh{c}}Il}IjAAn}{{{BCj{c}}Il}IjAAn}{{{BBh{ce}}Il}IjAAnAAn}``````````{{J`{Cb{Jb}}En}Ch}0000000{{J`{Dh{Jb}}}Ch}0000000```````{{{BB`{c}}j}fEd}00````{{{BBf{}{{BBd{c}}}}}{{C`{{Cb{c}}{Df{{C`{cj}}}}}}}{}}<{c{{l{e}}}{}{}}0000000000000000000{cCj{}}000000000{{}Kb}0000000??????????````````````````````````{{{BAl{c}}{BAl{c}}}eEd{}}000{{{BAl{c}}{Bj{c}}{BAj{Jb}}{BAl{c}}}{{Bl{f}}}Ed}{ce{}{}}0{{{BAl{c}}{Bj{c}}{BAj{Jb}}}{{Bl{f}}}Ed}{{{BAl{c}}}{{BAl{c}}}{Edd}}{{ce}f{}{}}{c{{BAl{c}}}Ed}{{}c{}}{jc{}}0{jf}{{{BAl{c}}{Bj{c}}{BAj{Jb}}{BAl{c}}}{{Bl{{BAh{c}}}}}Ed}{{{BAl{c}}{Bj{c}}}cEd}{{{BAl{c}}Aj}Al{EdAn}}{cc{}}{{{Df{{BAl{c}}}}e}{{BAl{c}}}Ed{}}{{}j}={{{Dh{{BCl{c}}}}}{{BAl{c}}}Ed}{{{BAl{c}}{BAl{c}}{Cb{{BAj{Jb}}}}{BAj{Jb}}{Bj{c}}}{{Bl{{BAl{c}}}}}Ed}{{{BAl{c}}}eEd{}}0{{{BAl{c}}c}{{BAl{c}}}Ed}{{{BAl{c}}{Bj{c}}{BAj{Jb}}}{{Bl{{BAl{c}}}}}Ed}{{{BAl{c}}{BAl{c}}}eEd{}}000{{{Dh{{BAl{c}}}}}{{BAl{c}}}Ed}{{{BAl{c}}}{{C`{{Cb{c}}{Df{{BCn{c}}}}}}}Ed}{{{BAl{c}}}{{C`{{Cb{e}}{Df{{C`{ej}}}}}}}Ed{}}{{{BAl{c}}}{{C`{{Df{{BAl{c}}}}e}}}Ed{}}{ce{}{}}{c{{l{e}}}{}{}}0{cCj{}}{{{Df{c}}e}gEd{}{}}{c{{C`{{Df{e}}g}}}{}Ed{}}4{{}{{BAl{c}}}Ed}```````````````````````55555555{BD`BD`}{BDbBDb}{BBjBBj}{{ce}f{}{}}00{jc{}}0000000{jf}000{{BDdAj}Al}0{{BD`Aj}Al}0{{BDbAj}Al}0{{BBjAj}Al}0{cc{}}000{{}j}000{ce{}{}}000``{BD`BDd}{{BD`{BAj{Jb}}{Df{{BAj{Jb}}}}}BDd}{BDd{{Cb{BDf}}}}`333{cCh{}}000{c{{l{e}}}{}{}}0000000{cCj{}}0006666```666666{{{BDh{{BAl{c}}}}{Bj{c}}{BAj{Jb}}}{{Bl{f}}}Ed}{{{BDj{c}}}{{BDj{c}}}d}{{{BDh{c}}}{{BDh{c}}}d}{{ce}f{}{}}0{{}c{}}{jc{}}00000{jf}00{{{BDj{c}}Aj}AlAn}{{{BDh{c}}Aj}AlAn}{cc{}}00{{{Df{{BAl{c}}}}e}{{BDh{{BAl{c}}}}}Ed{}}{{}j}00{ce{}{}}00{{{BDh{{BAl{c}}}}}{{C`{{Df{{BAl{c}}}}e}}}Ed{}}11??????>>>{{{Df{c}}e}gEd{}{}}{c{{C`{{Df{e}}g}}}{}Ed{}}333``{{BDl{BDn{c}}{Bj{c}}}fEd}{{{BDn{c}}{Bj{c}}{BAj{Jb}}{Dh{{BAl{c}}}}}fEd}55{{}{{BDn{c}}}{Edh}}==<976{{}{{BDn{c}}}Ed}{{{Bj{c}}{BAj{Jb}}{C`{{BAl{c}}{BAl{c}}}}}{{C`{{BAl{c}}{BAl{c}}}}}Ed}{{{BDn{c}}{Bj{c}}{BAj{Jb}}}{{BAl{c}}}Ed}{c{{l{e}}}{}{}}0{cCj{}};`````````{{{Bj{c}}{BE`{c}}{Cb{{BAj{Jb}}}}{BAj{Jb}}}{{Bl{f}}}Ed}{{{Bj{c}}{BAj{Jb}}}fEd}{{{Bj{c}}}{{BAl{c}}}Ed}`{{{Bj{c}}{Cb{{BAj{Jb}}}}{BAj{Jb}}{BAl{c}}{BAl{c}}}{{Bl{f}}}Ed}{{{Bj{c}}{Cb{{BAj{Jb}}}}{BAj{Jb}}{BAl{c}}{BAl{c}}{BAl{c}}}{{Bl{f}}}Ed}{ce{}{}}000{{{BE`{c}}e}{{BEb{f}}}Ed{{BBl{c}}}}{{{Bj{c}}BDb}{{Kd{BDd}}}Ed}{{{Bj{c}}{BAj{Jb}}e}{{Bl{g}}}Ed{{BEd{BBl}{{Nl{}}}}}{{Bn{c}}}}{BBlj}0{{{Bj{c}}}jEd}{jc{}}000{jf}0{{{Bj{c}}BD`}BDdEd}`{{{BE`{c}}Aj}Al{AnEd}}{{{Bj{c}}Aj}Al{EdAn}}{cc{}}0{{{Bj{c}}}{{BAb{c}}}Ed}{{{Bj{c}}{Df{c}}}{{Bl{f}}}Ed}{{{Bj{c}}}{{Df{c}}}Ed}`{{{Bj{c}}{BAj{Jb}}{BAh{c}}{BAl{c}}{BAl{c}}}{{Bl{{BAl{c}}}}}Ed}{{}j}0{ce{}{}}0{{jjEn}{{Bj{c}}}Ed}``{{{Bj{c}}}fEd}{{{Bj{c}}{BAj{Jb}}{C`{{BAl{c}}{BAl{c}}}}}{{C`{{BAl{c}}{BAl{c}}}}}Ed}{{{Bj{c}}}eEd{{Bn{c}}}}{{{Bj{c}}{BAj{Jb}}{BAl{c}}{BAl{c}}{BAl{c}}}{{Bl{f}}}Ed}{{BBl{BAl{c}}}cEd}0{{{Bj{c}}{BAl{c}}}cEd}{{{Bj{c}}j}cEd}{{{Bj{c}}BBj}{{Kd{BDd}}}Ed}{{{Bj{c}}c}{{BAl{c}}}Ed}`{c{{l{e}}}{}{}}000{cCj{}}0<<{{{Bj{c}}{Cb{{BAj{Jb}}}}g}eEd{}{{BEd{{Bj{c}}}{{Nl{e}}}}}}`````{{{Bn{}{{BEf{c}}{BEh{e}}}}{Bj{g}}{BAj{Jb}}}{{Bl{f}}}{}{}Ed}{{{Bj{c}}{BAj{Jb}}g}{{Bl{{Bn{}{{BEf{i}}{BEh{e}}}}}}}Ed{}{{Ob{BBl}{{Nl{e}}}}}{}}{{}c{}}{{{Df{{BAl{c}}}}e}{{Bn{}{{BEf{e}}{BEh{g}}}}}Ed{}{}}{c{{C`{{Df{e}}g}}}{}Ed{}}{{{Bn{}{{BEf{c}}{BEh{e}}}}i}e{}{}Ed{{BBl{g}}}}{{{Bn{}{{BEf{c}}{BEh{e}}}}}{{C`{{Df{{BAl{g}}}}c}}}{}{}Ed}{{{Df{c}}e}gEd{}{}}03`{ce{}{}}0{{{BEj{c}}}{{BEj{c}}}d}{{ce}f{}{}}{{}{{BEj{c}}}h}{jc{}}0{jf}{{{BEj{c}}c}{{Cb{j}}}{dFbBAf}}{{{BEj{c}}Aj}AlAn}{cc{}}{{}j}9{{{BEj{c}}c}f{dFbBAf}}{{}{{BEj{c}}}{dFbBAf}};{c{{l{e}}}{}{}}0{cCj{}}{{{BEj{c}}cc}{{Cb{j}}}{dFbBAf}}>````{{{Dh{{BEl{ce}}}}}{{ANj{f}}}AAb{{AAd{c}}}}??;;:7{{{BEl{ce}}Fl}{{Cb{{AEf{c}}}}}AAb{{AAd{c}}}}7{ce{}{}}``554`{{{ALn{ce}}{Db{ce}}Dh}{{ANj{f}}}AAb{{AAd{c}}}}1``1111{{{BEn{c}}}{{BEn{c}}}{dAEh}}{{{ALn{ce}}}{{ALn{ce}}}{dAAb}{d{AAd{c}}}}{{ce}f{}{}}0``{jc{}}000{c{{l{{BEn{e}}}}}nAEh}{c{{l{{ALn{eg}}}}}nAAb{{AAd{e}}}}{{{ALn{ce}}}{}AAb{{AAd{c}}}}`{jf}0```{{{BEn{c}}Aj}Al{AnAEh}}{{{ALn{ce}}Aj}Al{AnAAb}{An{AAd{c}}}}``{cc{}}0{{JjBF`{Cb{F`}}}{{l{{ALn{ce}}Ch}}}AAb{{AAd{c}}}}`{{}j}0>>````````{{{ALn{ce}}}I`AAb{{AAd{c}}}}`````````{{{BEn{c}}e}lAEhCf}{{{ALn{ce}}g}lAAb{{AAd{c}}}Cf}``{{{ALn{ce}}}JjAAb{{AAd{c}}}}``{{{ALn{ce}}BF`{Cb{En}}}{{l{fCh}}}AAb{{AAd{c}}}}{ce{}{}}0{c{{l{e}}}{}{}}000{cCj{}}022>```","c":[],"p":[[5,"Alphas",30],[10,"Clone",4728],[1,"unit"],[10,"Default",4729],[1,"usize"],[6,"Result",4730],[10,"Deserializer",4731],[10,"Deserialize",4731],[5,"MustConsumeIterator",30],[10,"Display",4732],[17,"Item"],[10,"Iterator",4733],[5,"Formatter",4732],[8,"Result",4732],[10,"Debug",4732],[6,"ArgumentType",118],[1,"u32"],[5,"Iter",4734],[5,"Skip",4735],[5,"Take",4736],[5,"Cloned",4737],[10,"Field",4738],[5,"Range",4739],[1,"tuple"],[6,"Option",4740],[10,"Serialize",4741],[10,"Serializer",4741],[5,"String",4742],[5,"TypeId",4743],[5,"BenchmarkCtx",86],[8,"Vesta",4744],[5,"OpeningProof",4745],[5,"ProverProof",3428],[8,"Fp",4746],[5,"Vec",4747],[1,"slice"],[10,"DynArgument",118],[5,"ArgumentEnv",118],[10,"ExprOps",1111],[5,"Cache",546],[8,"E",212],[10,"PrimeField",4738],[8,"ConstantExpr",546],[5,"ArgumentWitness",118],[5,"Constants",546],[5,"Challenges",546],[1,"bool"],[1,"u64"],[10,"Hash",4748],[10,"Sized",4749],[10,"BuildHasher",4748],[10,"Hasher",4748],[6,"CurrOrNext",1137],[6,"Column",212],[6,"Ordering",4750],[5,"Environment",212],[6,"Domain",546],[10,"FftField",4738],[5,"Radix2EvaluationDomain",4751],[5,"Evaluations",4752],[6,"GateType",1137],[5,"CacheId",546],[5,"HashMap",4753],[5,"Builder",317],[5,"ConstraintSystem",317],[6,"SetupError",3230],[10,"SquareRootField",4738],[5,"FeatureFlags",317],[5,"EvaluatedColumnCoefficients",317],[5,"ColumnEvaluations",317],[5,"CircuitGate",1137],[5,"DensePolynomial",4754],[1,"array"],[5,"WitnessOverDomains",2056],[6,"GateError",317],[5,"LookupFeatures",1516],[6,"Value",4755],[5,"OCamlRuntime",4756],[5,"LookupTable",1944],[5,"Env",4757],[1,"str"],[5,"PointEvaluations",3428],[5,"ProofEvaluations",3428],[5,"DomainConstantEvaluations",496],[5,"Arc",4758],[5,"RuntimeTableCfg",1811],[5,"EvaluationDomains",522],[5,"JsValue",4759],[1,"u128"],[5,"Box",4760],[6,"DomainCreationError",3230],[6,"Operations",546],[10,"Literal",546],[8,"Expr",546],[10,"Zero",4761],[10,"PartialEq",4750],[17,"F"],[6,"ConstantTerm",546],[6,"ConstantExprInner",546],[6,"ExprInner",546],[10,"Copy",4749],[5,"Variable",546],[6,"ChallengeTerm",546],[6,"FeatureFlag",546],[5,"RowOffset",546],[6,"PolishToken",546],[5,"Linearization",546],[10,"Ord",4750],[5,"ArgumentData",118],[17,"Column"],[10,"ColumnEnvironment",546],[10,"ColumnEvaluations",546],[6,"ExprError",546],[10,"FormattedOutput",546],[1,"never"],[1,"i64"],[5,"HashSet",4762],[17,"Output"],[10,"Neg",4763],[10,"One",4761],[10,"Fn",4764],[10,"PartialOrd",4750],[10,"ToPolish",546],[6,"CircuitGateError",1137],[10,"Connect",1137],[8,"GateWires",3017],[6,"FFOps",2281],[5,"BigUint",4765],[6,"GenericGateSpec",2400],[6,"RotMode",2772],[5,"CamlCircuitGate",1377],[10,"From",4766],[5,"Circuit",1137],[6,"LookupPattern",1516],[5,"ProverIndex",3841],[17,"ScalarField"],[10,"KimchiCurve",3223],[10,"OpenProof",4767],[8,"CircuitGateResult",1137],[8,"Result",4768],[10,"Write",4769],[10,"FromValue",4755],[10,"IntoValue",4755],[5,"LookupInfo",1516],[6,"ProverError",3230],[10,"Rng",4770],[5,"LookupConfiguration",1405],[10,"CanonicalSerialize",4771],[10,"CanonicalDeserialize",4771],[5,"LookupSelectors",1433],[6,"LookupError",1433],[5,"LookupConstraintSystem",1433],[8,"JointLookupSpec",1516],[5,"LookupPatterns",1516],[5,"LocalPosition",1516],[5,"SingleLookup",1516],[6,"LookupTableID",1516],[5,"JointLookup",1516],[5,"LookupPatternIter",1516],[8,"JointLookupValue",1516],[5,"IterBridge",4772],[6,"GateLookupTable",1944],[5,"RuntimeTableSpec",1811],[5,"RuntimeTable",1811],[5,"CamlRuntimeTableSpec",1881],[5,"CamlRuntimeTableCfg",1881],[10,"Into",4766],[5,"CamlRuntimeTable",1881],[1,"i32"],[5,"GateLookupTables",1944],[5,"PolyComm",4773],[10,"CommitmentCurve",4773],[10,"DoubleEndedIterator",4774],[5,"CamlLookupTable",2030],[5,"WitnessEvals",2056],[5,"WitnessShifts",2056],[5,"LookupEvals",2056],[5,"LookupShifts",2056],[5,"LookupPolys",2056],[5,"CompleteAdd",2189],[5,"EndomulScalar",2207],[5,"EndosclMul",2226],[5,"EndoMulResult",2226],[5,"ForeignFieldAdd",2263],[10,"BigUintForeignFieldHelpers",2305],[10,"FieldArrayCompose",2305],[10,"BigUintArrayCompose",2305],[10,"FieldArrayBigUintHelpers",2305],[10,"FieldArrayCompact",2305],[10,"BigUintArrayFieldHelpers",2305],[5,"ForeignFieldMul",2340],[5,"ExternalChecks",2368],[5,"Generic",2400],[1,"u8"],[5,"KeccakRound",2485],[5,"KeccakSponge",2485],[5,"Theta",2577],[5,"PiRho",2577],[5,"Chi",2577],[5,"Iota",2577],[5,"Shifts",2668],[5,"Poseidon",2689],[5,"ArithmeticSpongeParams",4775],[5,"RangeCheck0",2717],[5,"RangeCheck1",2717],[5,"ForeignElement",4776],[10,"WitnessCell",3092],[5,"Rot64",2772],[5,"CairoProgram",4777],[5,"VarbaseMul",2887],[5,"VarbaseMulResult",2887],[5,"Xor16",2934],[5,"RandomOracles",2956],[5,"CamlRandomOracles",2987],[5,"Wire",3017],[5,"CamlWire",3071],[10,"Wirable",3017],[10,"Read",4769],[5,"ConstantCell",3092],[5,"CopyBitsCell",3092],[5,"CopyCell",3092],[5,"CopyShiftCell",3092],[5,"IndexCell",3092],[5,"VariableBitsCell",3092],[5,"VariableCell",3092],[5,"Variables",3092],[6,"VerifyError",3230],[6,"VerifierIndexError",3230],[5,"LagrangeBasisEvaluations",3353],[10,"EvaluationDomain",4778],[5,"VerifierIndex",4651],[5,"CamlOracles",3396],[10,"FrSponge",3419],[5,"ScalarChallenge",4779],[5,"SRS",4780],[5,"LookupCommitments",3428],[10,"AffineCurve",4781],[5,"ProverCommitments",3428],[5,"RecursionChallenge",3428],[5,"CamlProofEvaluations",3608],[5,"CamlLookupCommitments",3680],[5,"CamlProverCommitments",3680],[5,"CamlRecursionChallenge",3608],[5,"OraclesResult",3372],[8,"Result",4629],[10,"FqSponge",4779],[5,"CamlProofWithPublic",3680],[5,"CamlProverProof",3680],[5,"Traces",3777],[5,"CamlTraces",3821],[10,"RngCore",4782],[10,"CryptoRng",4782],[10,"FnMut",4764],[5,"ProverIndexWrapper",3894],[10,"SnarkyCircuit",3894],[17,"Curve"],[17,"Proof"],[17,"PrivateInput"],[17,"PublicInput"],[17,"PublicOutput"],[5,"RunState",4527],[8,"SnarkyResult",4352],[10,"SnarkyType",4592],[5,"VerifierIndexWrapper",3894],[5,"Witness",3894],[5,"OrderedHashSet",3960],[10,"Eq",4750],[5,"Boolean",3979],[6,"Cow",4783],[6,"FieldVar",4301],[5,"Constants",4013],[5,"SnarkyConstraintSystem",4034],[6,"BasicSnarkyConstraint",4034],[17,"Field"],[10,"SnarkyCvar",4034],[6,"KimchiConstraint",4034],[6,"SnarkyRuntimeError",4352],[10,"WitnessGeneration",4527],[5,"ScaleRound",4034],[5,"EndoscaleRound",4034],[5,"EndoscaleScalarRound",4034],[5,"BasicInput",4034],[5,"PoseidonInput",4034],[5,"EcAddCompleteInput",4034],[5,"EcEndoscaleInput",4034],[8,"ScaledCVar",4301],[8,"Term",4301],[6,"SnarkyError",4352],[6,"SnarkyCompilationError",4352],[5,"RealSnarkyError",4352],[10,"Error",4784],[5,"FullChallenge",4450],[5,"ForeignElement",4450],[10,"CircuitAbsorb",4503],[5,"DuplexState",4503],[6,"Constraint",4527],[8,"SnarkyRuntimeResult",4352],[10,"FnOnce",4764],[17,"Auxiliary"],[17,"OutOfCircuit"],[5,"DisjointSet",4607],[5,"Context",4629],[5,"LookupVerifierIndex",4651],[5,"Path",4785],[10,"Argument",118],[5,"LookupEnvironment",212],[15,"Custom",494],[15,"Mds",1109],[15,"CopyConstraint",1374],[15,"LookupTableIdCollision",1513],[15,"LookupTableTooLong",1513],[8,"KimchiForeignElement",2305],[15,"Add",2445],[15,"Mul",2445],[5,"Keccak",2452],[5,"Rotation",2577],[5,"Claim",2813],[5,"Instruction",2813],[5,"Flags",2813],[5,"Transition",2813],[5,"Layout",2887],[5,"CompiledCircuit",3894],[8,"SnarkyCompileResult",4352],[5,"Private",4450],[10,"CircuitAndValue",4592]],"b":[[47,"impl-Display-for-Alphas%3CT%3E"],[48,"impl-Debug-for-Alphas%3CF%3E"],[731,"impl-Operations%3CExprInner%3CC,+Column%3E%3E"],[732,"impl-ExprOps%3CF%3E-for-Operations%3CExprInner%3COperations%3CConstantExprInner%3CF%3E%3E,+Column%3E%3E"],[780,"impl-ExprOps%3CF%3E-for-Operations%3CExprInner%3COperations%3CConstantExprInner%3CF%3E%3E,+Column%3E%3E"],[781,"impl-Operations%3CExprInner%3CC,+Column%3E%3E"],[820,"impl-Operations%3CExprInner%3COperations%3CConstantExprInner%3CF%3E%3E,+Column%3E%3E"],[821,"impl-Operations%3CExprInner%3CF,+Column%3E%3E"],[822,"impl-Operations%3CExprInner%3COperations%3CConstantExprInner%3CF%3E%3E,+Column%3E%3E"],[823,"impl-Operations%3CExprInner%3CF,+Column%3E%3E"],[830,"impl-Operations%3CExprInner%3COperations%3CConstantExprInner%3CF%3E%3E,+Column%3E%3E"],[831,"impl-Operations%3CExprInner%3CF,+Column%3E%3E"],[832,"impl-Operations%3CExprInner%3CF,+Column%3E%3E"],[833,"impl-Operations%3CExprInner%3COperations%3CConstantExprInner%3CF%3E%3E,+Column%3E%3E"],[835,"impl-Debug-for-ExprError%3CColumn%3E"],[836,"impl-Display-for-ExprError%3CColumn%3E"],[850,"impl-From%3CConstantTerm%3CF%3E%3E-for-Operations%3CConstantExprInner%3CF%3E%3E"],[851,"impl-From%3Cu64%3E-for-Operations%3CConstantExprInner%3CF%3E%3E"],[852,"impl-From%3CChallengeTerm%3E-for-Operations%3CConstantExprInner%3CF%3E%3E"],[853,"impl-From%3CChallengeTerm%3E-for-Operations%3CExprInner%3COperations%3CConstantExprInner%3CF%3E%3E,+Column%3E%3E"],[854,"impl-From%3CConstantTerm%3CF%3E%3E-for-Operations%3CExprInner%3COperations%3CConstantExprInner%3CF%3E%3E,+Column%3E%3E"],[855,"impl-From%3COperations%3CConstantExprInner%3CF%3E%3E%3E-for-Operations%3CExprInner%3COperations%3CConstantExprInner%3CF%3E%3E,+Column%3E%3E"],[856,"impl-From%3Cu64%3E-for-Operations%3CExprInner%3COperations%3CConstantExprInner%3CF%3E%3E,+Column%3E%3E"],[857,"impl-From%3Cu64%3E-for-Operations%3CExprInner%3CF,+Column%3E%3E"],[863,"impl-From%3CChallengeTerm%3E-for-ConstantExprInner%3CF%3E"],[864,"impl-From%3CConstantTerm%3CF%3E%3E-for-ConstantExprInner%3CF%3E"],[948,"impl-ExprOps%3CF%3E-for-Operations%3CExprInner%3COperations%3CConstantExprInner%3CF%3E%3E,+Column%3E%3E"],[949,"impl-Operations%3CExprInner%3COperations%3CConstantExprInner%3CF%3E%3E,+Column%3E%3E"],[952,"impl-Literal-for-Operations%3CT%3E"],[953,"impl-Operations%3CExprInner%3COperations%3CConstantExprInner%3CF%3E%3E,+Column%3E%3E"],[987,"impl-Operations%3CExprInner%3CC,+Column%3E%3E"],[988,"impl-ExprOps%3CF%3E-for-Operations%3CExprInner%3COperations%3CConstantExprInner%3CF%3E%3E,+Column%3E%3E"],[1026,"impl-Operations%3CExprInner%3COperations%3CConstantExprInner%3CF%3E%3E,+Column%3E%3E"],[1027,"impl-ToPolish%3CF,+Column%3E-for-Operations%3CT%3E"],[1028,"impl-Linearization%3COperations%3CExprInner%3COperations%3CConstantExprInner%3CF%3E%3E,+Column%3E%3E,+Column%3E"],[1029,"impl-Linearization%3CVec%3CPolishToken%3CF,+Column%3E%3E,+Column%3E"],[1266,"impl-Debug-for-CircuitGateError"],[1267,"impl-Display-for-CircuitGateError"],[1384,"impl-From%3CCircuitGate%3CF%3E%3E-for-CamlCircuitGate%3CCamlF%3E"],[1385,"impl-From%3C%26CircuitGate%3CF%3E%3E-for-CamlCircuitGate%3CCamlF%3E"],[1468,"impl-Display-for-LookupError"],[1469,"impl-Debug-for-LookupError"],[1629,"impl-JointLookup%3CSingleLookup%3CF%3E,+LookupTableID%3E"],[1630,"impl-JointLookup%3CF,+F%3E"],[1845,"impl-From%3CCamlRuntimeTableSpec%3E-for-RuntimeTableSpec"],[1846,"impl-From%3CRuntimeTableCfg%3CF%3E%3E-for-RuntimeTableSpec"],[3298,"impl-Display-for-ProverError"],[3299,"impl-Debug-for-ProverError"],[3300,"impl-Display-for-VerifyError"],[3301,"impl-Debug-for-VerifyError"],[3302,"impl-Debug-for-DomainCreationError"],[3303,"impl-Display-for-DomainCreationError"],[3304,"impl-Debug-for-SetupError"],[3305,"impl-Display-for-SetupError"],[3306,"impl-Debug-for-VerifierIndexError"],[3307,"impl-Display-for-VerifierIndexError"],[3798,"impl-Display-for-Traces"],[3799,"impl-Debug-for-Traces"],[4308,"impl-Add-for-%26FieldVar%3CF%3E"],[4309,"impl-Add%3CFieldVar%3CF%3E%3E-for-%26FieldVar%3CF%3E"],[4310,"impl-Add-for-FieldVar%3CF%3E"],[4311,"impl-Add%3C%26FieldVar%3CF%3E%3E-for-FieldVar%3CF%3E"],[4332,"impl-Neg-for-%26FieldVar%3CF%3E"],[4333,"impl-Neg-for-FieldVar%3CF%3E"],[4336,"impl-Sub%3CFieldVar%3CF%3E%3E-for-%26FieldVar%3CF%3E"],[4337,"impl-Sub-for-%26FieldVar%3CF%3E"],[4338,"impl-Sub%3C%26FieldVar%3CF%3E%3E-for-FieldVar%3CF%3E"],[4339,"impl-Sub-for-FieldVar%3CF%3E"],[4341,"impl-FieldVar%3CF%3E"],[4342,"impl-SnarkyCvar-for-FieldVar%3CF%3E"],[4401,"impl-Debug-for-RealSnarkyError"],[4402,"impl-Display-for-RealSnarkyError"],[4403,"impl-Display-for-SnarkyError"],[4404,"impl-Debug-for-SnarkyError"],[4405,"impl-Display-for-SnarkyCompilationError"],[4406,"impl-Debug-for-SnarkyCompilationError"],[4407,"impl-Debug-for-SnarkyRuntimeError"],[4408,"impl-Display-for-SnarkyRuntimeError"]]}],\
["kimchi_msm",{"doc":"","t":"IIIISIIISEEEEEESIIIOCCCCCCOOCCCCCOCOOCCCEEEEEEEEECCCCKKKKRMMMMMHMHHHFKRFFRNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNNNNNNNNNNNNNFNNNNNOONNNNNNNNNNNNONNNNNFNNNNNNNNNNNNNNNNOONNNNNNONNFNNONONNONNNNNNNNNOONNNNNOTGKPPPPPPNNNNNNNNNNNNNNNNNNNNMNNNNNPPPPIPPPPPHHCCCPPPPGSPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNHHHIGFPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCCCPGSSPPPPPNNNNNNNNNNNNNNNNNNHHHGFPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFKNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNONNNNNNNNNNNNMNNNNNNNNNMMMNCNONNNNNNMNNNNNNNNNNNNNNNNFFONNNNNNNNNNNOOOONNNNNNOOOOOOOOOOOOONNNNNNNNPGPFIGFIPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNPPPGNNNNNNNNNNNNHNNNNNNSCCCPPPPPPPPSGNNNNNNNNNNNNNKSSSSHMHHHHHHHHHIGFPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCCHPPPPSGNNNNNNNNNNNNNNNNNNHHHHHFNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["BN254","BN254G1Affine","BN254G2Affine","BaseSponge","DOMAIN_SIZE","Ff1","Ff2","Fp","LIMB_BITSIZE","Logup","LogupProof","LogupTable","LogupTableID","LogupWitness","LookupTableID","N_LIMBS","OpeningProof","ScalarSponge","SpongeParams","blinding","circuit_design","column_env","columns","expr","fec","ffa","last_squeezed","last_squeezed","logup","lookups","precomputed_srs","proof","prover","quotient","serialization","sponge","sponge","test","verifier","witness","ColAccessCap","ColWriteCap","ConstraintBuilderEnv","HybridCopyCap","LookupCap","MPrism","SubEnvColumn","SubEnvLookup","WitnessBuilderEnv","capabilities","composition","constraints","witness","ColAccessCap","ColWriteCap","HybridCopyCap","LookupCap","Variable","assert_zero","constant","hcopy","lookup","read_column","read_column_array","write_column","write_column_array","write_column_array_const","write_column_const","ComposedMPrism","MPrism","Source","SubEnvColumn","SubEnvLookup","Target","assert_zero","assert_zero","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","compose","constant","constant","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","hcopy","hcopy","init","init","init","into","into","into","lookup","lookup","new","new","re_get","re_get","read_column","read_column","traverse","traverse","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","write_column","write_column","ConstraintBuilderEnv","assert_zero","bitmask_be","borrow","borrow_mut","constant","constrain_index","constraints","create","deref","deref_mut","drop","from","get_constraints","get_lookup_constraints","get_relation_constraints","hcopy","init","into","lookup","lookups","read_column","try_from","try_into","type_id","vzip","WitnessBuilderEnv","assert_zero","bitmask_be","borrow","borrow_mut","constant","create","deref","deref_mut","drop","from","get_lookup_multiplicities","get_proof_inputs","hcopy","init","into","lookup","lookup_multiplicities","lookups","next_row","read_column","try_from","try_into","type_id","vzip","witness","write_column","write_column","ColumnEnvironment","borrow","borrow_mut","challenges","column_domain","constants","deref","deref_mut","domain","drop","from","get_challenges","get_column","get_constants","get_domain","init","into","l0_1","l0_1","lookup","try_from","try_into","type_id","vanishes_on_zero_knowledge_and_previous_rows","vzip","witness","COL_N","Column","ColumnIndexer","DynamicSelector","LookupAggregation","LookupFixedTable","LookupMultiplicity","LookupPartialSum","Relation","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","fmt","from","get_hash","hash","init","into","is_alpha","is_witness","latex","ocaml","text","to_column","to_owned","try_from","try_into","type_id","vzip","Add","Atom","Cache","Double","E","IfFeature","Mul","Pow","Square","Sub","curr_cell","next_cell","columns","interpreter","lookups","Carry1","Carry2","Carry3","F","FECColumn","FEC_N_COLUMNS","Q1","Q1Sign","Q2","Q2Sign","Q3","Q3Sign","S","XP","XQ","XR","YP","YQ","YR","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","init","into","to_column","to_owned","try_from","try_into","type_id","vzip","constrain_ec_addition","ec_add_circuit","limbs_to_bigints","Lookup","LookupTable","LookupTableIter","RangeCheck14Abs","RangeCheck15","RangeCheck1Abs","RangeCheck9Abs","RangeCheckFfHighest","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","drop","drop","entries","eq","equivalent","fmt","fmt","from","from","from_u32","get_hash","hash","init","init","into","into","into_iter","is_fixed","is_member","iter","ix_by_value","len","length","next","next_back","nth","partial_cmp","size_hint","to_owned","to_owned","to_u32","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","columns","interpreter","lookups","Carry","FFAColumn","FFA_NPUB_COLUMNS","FFA_N_COLUMNS","InputA","InputB","ModulusF","Quotient","Remainder","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","init","into","to_column","to_owned","try_from","try_into","type_id","vzip","constrain_ff_addition","constrain_ff_addition_row","ff_addition_circuit","LookupTable","LookupTableIter","RangeCheck15","RangeCheck1BitSigned","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","drop","drop","entries","eq","equivalent","fmt","fmt","from","from","from_u32","get_hash","hash","init","init","into","into","into_iter","is_fixed","is_member","iter","ix_by_value","len","length","next","next_back","nth","par_bridge","partial_cmp","size_hint","to_owned","to_owned","to_u32","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Logup","LogupWitness","LookupProof","LookupTable","LookupTableID","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","combine_lookups","constraint_lookups","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","entries","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_u32","init","init","init","init","into","into","into","into","into_iter","is_fixed","ix_by_value","length","new","prover","random","table_id","to_constraint","to_field","to_owned","to_owned","to_owned","to_owned","to_u32","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Env","QuotientPolynomialEnvironment","beta","borrow","borrow","borrow_mut","borrow_mut","create","deref","deref","deref_mut","deref_mut","drop","drop","fixed_lookup_tables_comms_d1","fixed_lookup_tables_evals_d8","fixed_lookup_tables_poly_d1","fixed_tables_evals_d8","from","from","init","init","into","into","joint_combiner","lookup_aggregation_comm_d1","lookup_aggregation_evals_d8","lookup_aggregation_evals_d8","lookup_aggregation_poly_d1","lookup_counters_comm_d1","lookup_counters_evals_d8","lookup_counters_evals_d8","lookup_counters_poly_d1","lookup_terms_comms_d1","lookup_terms_evals_d8","lookup_terms_evals_d8","lookup_terms_poly_d1","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Custom","DummyLookupTable","DummyLookupTable","DummyLookupTableIter","Lookup","LookupTableIDs","LookupTableIDsIter","LookupWitness","RangeCheck16","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","entries","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_u32","from_u32","get_hash","get_hash","hash","hash","init","init","init","init","into","into","into","into","into_iter","into_iter","is_fixed","is_fixed","iter","iter","ix_by_value","ix_by_value","len","len","length","length","next","next","next_back","next_back","nth","nth","par_bridge","par_bridge","partial_cmp","partial_cmp","random","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_u32","to_u32","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","get_bn254_srs","Proof","ProofCommitments","ProofEvaluations","ProofInputs","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","equivalent","evaluate","evaluations","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","logups","random","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","ConstraintDegreeTooHigh","ConstraintNotSatisfied","Generic","ProverError","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","fmt","from","init","into","prove","to_owned","to_string","try_from","try_into","type_id","vzip","N_INTERMEDIATE_LIMBS","column","interpreter","lookups","Carry","ChalConverted","ChalIntermediate","ChalKimchi","CoeffInput","CoeffResult","FFieldModulus","Quotient","SER_N_COLUMNS","SerializationColumn","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","to_column","try_from","try_into","type_id","vzip","HybridSerHelpers","LIMB_BITSIZE_LARGE","LIMB_BITSIZE_SMALL","N_LIMBS_LARGE","N_LIMBS_SMALL","bigint_to_biguint_f","bitmask_be","combine_carry","combine_small_to_large","constrain_multiplication","deserialize_field_element","ff_modulus_highest_limb","fold_choice2","limb_decompose_biguint","limb_decompose_ff","multiplication_circuit","Lookup","LookupTable","LookupTableIter","RangeCheck14Abs","RangeCheck15","RangeCheck4","RangeCheck9Abs","RangeCheckFfHighest","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","drop","drop","entries","eq","equivalent","fmt","fmt","from","from","from_u32","get_hash","hash","init","init","into","into","into_iter","is_fixed","is_member","iter","ix_by_value","len","length","next","next_back","nth","partial_cmp","size_hint","to_owned","to_owned","to_u32","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","columns","interpreter","test_completeness_generic","A","B","C","D","TEST_N_COLUMNS","TestColumn","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","init","into","to_column","to_owned","try_from","try_into","type_id","vzip","constrain_addition","constrain_multiplication","test_addition","test_multiplication","verify","Witness","borrow","borrow_mut","clone","clone_into","cols","default","deref","deref_mut","drop","eq","equivalent","fmt","from","from_par_iter","get_hash","hash","index","init","into","into_iter","into_iter","into_par_iter","into_par_iter","into_par_iter","is_empty","len","par_iter","par_iter_mut","to_owned","to_pub_columns","try_from","try_into","type_id","vzip","zero_vec"],"q":[[0,"kimchi_msm"],[40,"kimchi_msm::circuit_design"],[53,"kimchi_msm::circuit_design::capabilities"],[68,"kimchi_msm::circuit_design::composition"],[129,"kimchi_msm::circuit_design::constraints"],[155,"kimchi_msm::circuit_design::witness"],[183,"kimchi_msm::column_env"],[209,"kimchi_msm::columns"],[244,"kimchi_msm::expr"],[256,"kimchi_msm::fec"],[259,"kimchi_msm::fec::columns"],[296,"kimchi_msm::fec::interpreter"],[299,"kimchi_msm::fec::lookups"],[359,"kimchi_msm::ffa"],[362,"kimchi_msm::ffa::columns"],[389,"kimchi_msm::ffa::interpreter"],[392,"kimchi_msm::ffa::lookups"],[449,"kimchi_msm::logup"],[537,"kimchi_msm::logup::prover"],[582,"kimchi_msm::lookups"],[695,"kimchi_msm::precomputed_srs"],[696,"kimchi_msm::proof"],[771,"kimchi_msm::prover"],[794,"kimchi_msm::serialization"],[798,"kimchi_msm::serialization::column"],[821,"kimchi_msm::serialization::interpreter"],[837,"kimchi_msm::serialization::lookups"],[897,"kimchi_msm::test"],[900,"kimchi_msm::test::columns"],[924,"kimchi_msm::test::interpreter"],[928,"kimchi_msm::verifier"],[929,"kimchi_msm::witness"],[965,"core::clone"],[966,"core::ops::arith"],[967,"core::ops::arith"],[968,"core::fmt"],[969,"ark_ff::fields"],[970,"core::ops::function"],[971,"core::option"],[972,"core::result"],[973,"core::any"],[974,"strum"],[975,"alloc::vec"],[976,"kimchi::circuits::domains"],[977,"alloc::collections::btree::map"],[978,"kimchi::circuits::expr"],[979,"ark_ff::fields"],[980,"ark_poly::evaluations::univariate"],[981,"kimchi::circuits::expr"],[982,"core::marker"],[983,"core::hash"],[984,"alloc::string"],[985,"ark_ff::fields"],[986,"core::cmp"],[987,"core::cmp"],[988,"kimchi::curve"],[989,"mina_poseidon::sponge"],[990,"poly_commitment::pairing_proof"],[991,"poly_commitment"],[992,"kimchi::proof"],[993,"kimchi::circuits::expr"],[994,"rand_core"],[995,"num_traits::identities"],[996,"core::marker"]],"d":["","","","","Domain size for the MSM project, equal to the BN254 SRS …","The foreign field we are emulating (one of the two)","","The native field we are working with.","Bitsize of the foreign field limb representation.","","","","","","","Number of limbs representing one foreign field element …","","","","","","","","","","","","","Implement a variant of the logarithmic derivative lookups …","Instantiations of Logups for the MSM project Instantiate …","Clone of kimchi/precomputed_srs.rs but for MSM project …","","","","","","","","","","","","","","","","","","","","","","","Environment capability for accessing and reading columns. …","Environment capability similar to <code>ColAccessCap</code> but for …","Capability for computing arithmetic functions and enforcing","Capability for invoking table lookups.","","Asserts that the value is zero.","Turns a constant value into a variable.","Given variable <code>x</code> and position <code>ix</code>, it (hybrid) writes <code>x</code> …","","Reads value from a column position.","Write an array of values simultaneously.","","Write an array of values simultaneously.","Write an array of /field/ values simultaneously.","Write a field element directly as a constant.","","<code>MPrism</code> allows one to Something like a Prism, but for Maybe …","The lens source type, i.e., the object containing the …","Sub environment with a lens that is mapping columns.","Sub environment with a lens that is mapping lookup tables.","The lens target type, i.e., the field to be accessed or …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An indexed set of constraints. The index can be used to …","","","","","Returns the argument unchanged.","Get all relevant constraints generated by the constraint …","Get constraints related to the lookup argument.","Get constraints related to the application logic itself.","","","Calls <code>U::from(self)</code>.","","","","","","","","Witness builder environment. Operates","","","","","","Create a new empty-state witness builder.","","","","Returns the argument unchanged.","Getting multiplicities for range check tables less or …","Generates proof inputs, repacking/collecting internal …","","","Calls <code>U::from(self)</code>.","","Lookup multiplicities, a vector of values <code>m_i</code> per lookup …","Lookup requests. Each vector element represents one row, …","Progress to the computations on the next row.","","","","","","The witness columns that the environment is working with. …","","","The collection of polynomials (all in evaluation form) and …","","","Challenges from the IOP.","","Constant values required","","","The domains used in the PLONK argument.","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","The value <code>prod_{j != 1} (1 - omega^j)</code>, used for efficiently","Lookup specific polynomials","","","","","","The witness column polynomials","Total number of columns in this index.","Describe a generic indexed variable X_{i}.","A datatype expressing a generalized column, but with …","Columns related to dynamic selectors to indicate gate type","The lookup aggregation, i.e. <code>phi</code>","The fixed tables. The parameter is considered to the …","Multiplicities, indexed. This corresponds to the <code>m_i</code>","Partial sums. This corresponds to the <code>h_i</code>. It is first …","Columns related to the relation encoded in the circuit","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","Flatten the column “alias” into the integer-like …","","","","","","","","","","An expression over /generic/ (not circuit-specific) columns","","","","","","","","","","","","","","","Columns used by the serialization subcircuit.","Number of columns in the FEC circuits.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","When P = (xP,yP) and Q = (xQ,yQ) are not negative of each …","Creates a witness for adding two points, p and q, each …","Convenience function for printing.","","Enumeration of concrete lookup tables used in FEC circuit.","An iterator over the variants of LookupTable","x ∈ [-2^14, 2^14-1]","x ∈ [0, 2^15]","x ∈ [-1, 1]","x ∈ [-2^9, 2^9-1]","x ∈ [0, ff_highest] where ff_highest is the highest …","","","","","","","","","","","","","","","","Provides a full list of entries for the given table.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","All tables are fixed tables.","Checks if a value is in a given table.","","Converts a value to its index in the fixed table.","","","","","","","","","","","","","","","","","","","","","","","Column indexer for MSM columns.","","Number of columns in the FFA circuits.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Constraint for one row of FF addition:","","Enumeration of concrete lookup tables used in lookups …","An iterator over the variants of LookupTable","x ∈ [0, 2^15]","x ∈ [-1, 0, 1]","","","","","","","","","","","","","","","","Provides a full list of entries for the given table.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","All tables are fixed tables.","Checks if a value is in a given table.","","Converts a value to its index in the fixed table.","","","","","","","","","","","","","","","","","","","","Generic structure to represent a (vector) lookup the table …","Represents a witness of one instance of the lookup argument","Represents the proof of the lookup argument It is …","A table of values that can be used for a lookup, along …","Trait for lookup table variants","","","","","","","","","","","","","","","","","Compute the following constraint:","Build the constraints for the lookup protocol. The …","","","","","","","","","","","","","Vector of values inside each entry of the table","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Build a value from a u32","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Identify fixed and RAMLookups with a boolean. This can be …","Given a value, returns an index of this value in the table.","Returns the length of each table.","Creates a new Logup","","Generate a random number of correct lookups in the table …","Table ID corresponding to this table","Assign a unique ID to the lookup tables, as an expression.","Assign a unique ID to the lookup tables.","","","","","Assign a unique ID, as a u32 value","","","","","","","","","","","","","","","","","Represents the environment for the logup argument.","The structure used by the prover the compute the quotient …","The evaluation point used for the lookup polynomials.","","","","","Create an environment for the prover to create a proof for …","","","","","","","","","","The evaluations of the fixed tables, over d8, indexed by …","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The combiner used for vector lookups","The commitment to the aggregation polynomial.","The evaluations of the aggregation, over d8.","","The aggregation polynomial.","The commitments to the multiplicities, indexed by the …","The evaluations of the multiplicities, over d8, indexed by …","","The polynomial of the multiplicities, indexed by the table …","The commitments of the inner sums.","The evaluations of the partial sums, over d8.","","The polynomials of the inner sums.","","","","","","","","","Custom lookup table The index of the table is used as the …","Dummy lookup table. For the cases when you don’t need …","","An iterator over the variants of DummyLookupTable","Additive lookups used in the MSM project based on Logup","Lookup tables used in the MSM project","An iterator over the variants of LookupTableIDs","Represents a witness of one instance of the lookup …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Provides a full list of entries for the given table.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","All tables are fixed tables.","All tables are fixed tables.","","","","","","","","","","","","","","","","","","","Generate a random number of correct lookups in the table …","","","","","","","","","","","","","","","","","","","","","","","","","Obtains an SRS for a specific curve from disk, or …","","","","","","","","","","","","","","","","","","","","","Creates a default proof instance. Note that such an empty …","","","","","","","","","","","","","","","","Actual values w_i of the witness columns. “Evaluations”…","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Errors that can arise when creating a proof","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","The number of intermediate limbs of 4 bits required for …","","","","Carry limbs","N_LIMBS values, representing the converted IPA challenge.","N_INTERMEDIATE_LIMBS intermediate values, 4 bits long. …","3 88-bit inputs. For the row #i this represents the IPA …","Previous coefficient C_j, this one is looked up. For the …","The resulting coefficient C_i = (C_i &gt;&gt; 1) * xi_{log(i)}. …","Trusted (for range) foreign field modulus, in 4 big limbs.","Quotient limbs","Total number of columns in the serialization circuit","Columns used by the serialization subcircuit.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","In FEC addition we use bigger limbs, of 75 bits, that are …","Alias for LIMB_BITSIZE, used for convenience.","","Alias for N_LIMBS, used for convenience.","Interprets bigint <code>input</code> as an element of a field modulo …","Returns the bits between [highest_bit, lowest_bit] of the …","Helper function for limb recombination for carry …","Helper function for limb recombination.","This constarins the multiplication part of the circuit.","Deserialize a field element of the scalar field of Vesta …","Returns the highest limb of the foreign field modulus. Is …","A convenience helper: given a <code>list_len</code> and <code>n</code> (arguments of …","Decompose biguint into <code>N</code> limbs of bit size <code>B</code>.","Decomposes a foreign field element into <code>N</code> limbs of bit …","Multiplication sub-circuit of the serialization/bootstrap …","","Enumeration of concrete lookup tables used in …","An iterator over the variants of LookupTable","x ∈ [-2^14, 2^14-1]","x ∈ [0, 2^15]","x ∈ [0, 2^4]","x ∈ [-2^4, 2^4-1]","x ∈ [0, ff_highest] where ff_highest is the highest …","","","","","","","","","","","","","","","","Provides a full list of entries for the given table.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","All tables are fixed tables.","Checks if a value is in a given table.","","Converts a value to its index in the fixed table.","","","","","","","","","","","","","","","","","","","","","","","","","","Number of columns in the test circuits.","Column indexer for MSM columns.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","A consraint function for A + B - C that reads values from …","A consraint function for A * B - D that reads values from …","Circuit generator function for A + B - C, with D = 0.","Circuit generator function for A + B - C, with D = 0.","","The witness columns used by a gate of the MSM circuits. It …","","","","","A witness row is represented by an array of N witness …","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Iterate over the columns in the circuit.","","Iterate over the columns in the circuit, in parallel.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,109,110,0,0,0,0,0,108,0,109,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,14,16,2,0,21,0,0,0,0,0,25,0,0,25,22,26,27,22,26,27,22,26,27,22,26,27,22,26,27,22,26,27,22,26,27,22,26,22,26,27,22,26,27,22,26,22,26,22,26,25,27,22,26,25,27,27,22,26,27,22,26,27,22,26,27,22,26,22,26,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,15,0,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,15,40,40,40,40,40,34,34,34,34,0,34,34,34,34,34,0,0,0,0,0,59,59,59,59,0,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,0,0,0,0,0,60,60,60,60,60,60,62,60,62,60,62,60,62,60,60,62,60,62,60,62,60,60,60,60,62,60,62,60,60,60,60,62,60,62,62,60,60,60,60,62,60,62,62,62,60,62,60,62,60,60,62,60,62,60,62,60,62,0,0,0,68,0,0,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,0,0,0,0,69,69,69,70,69,70,69,70,69,70,69,69,70,69,70,69,70,69,69,69,69,70,69,70,69,69,69,69,70,69,70,70,69,69,69,69,70,69,70,70,70,70,69,70,69,70,69,69,70,69,70,69,70,69,70,0,0,0,0,0,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,0,0,72,73,74,75,72,73,74,75,72,73,74,75,73,72,74,72,74,72,73,74,75,72,73,74,75,17,72,73,74,75,72,73,74,75,75,17,17,17,72,0,74,73,17,17,72,73,74,75,17,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,0,0,78,111,78,111,78,78,111,78,111,78,111,78,78,78,78,111,111,78,111,78,111,78,78,78,111,78,78,78,111,78,78,78,111,78,78,111,78,111,78,111,78,111,78,77,0,81,0,0,0,0,0,77,81,82,77,83,81,82,77,83,81,82,77,83,81,82,77,83,81,77,81,82,77,83,81,82,77,83,81,82,77,83,81,81,77,81,77,81,82,77,83,81,82,77,83,81,77,81,77,81,77,81,82,77,83,81,82,77,83,82,83,81,77,81,77,81,77,82,83,81,77,82,83,82,83,82,83,82,83,81,77,84,82,83,81,82,77,83,81,77,81,82,77,83,81,82,77,83,81,82,77,83,81,82,77,83,0,0,0,0,0,39,88,89,90,39,88,89,90,39,88,89,90,39,88,89,90,39,39,88,89,90,39,88,89,90,39,88,89,90,39,39,88,39,39,88,89,90,39,88,89,90,39,88,89,90,39,88,89,90,39,39,39,88,89,90,39,88,89,90,39,88,89,90,39,88,89,90,39,88,89,90,94,94,94,0,94,94,94,94,94,94,94,94,94,94,94,94,0,94,94,94,94,94,94,0,0,0,0,97,97,97,97,97,97,97,97,0,0,97,97,97,97,97,97,97,97,97,97,97,97,97,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,100,100,100,100,100,100,101,100,101,100,101,100,101,100,100,101,100,101,100,101,100,100,100,100,101,100,101,100,100,100,100,101,100,101,101,100,100,100,100,101,100,101,101,101,100,101,100,101,100,100,101,100,101,100,101,100,101,0,0,0,103,103,103,103,0,0,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,0,0,0,0,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102],"f":"``````````````````````````````````````````````````````````{{{d{}{{b{c}}}}c}f{h{l{c}{{j{c}}}}{n{c}{{j{c}}}}{A`{c}{{j{c}}}}{Ab{}{{j{c}}}}{Af{Ad}}Ah}}{ceAj{}}{{Alce}c{}An}{{B`ce}fBb{}}{{{d{}{{b{c}}}}e}c{h{l{c}{{j{c}}}}{n{c}{{j{c}}}}{A`{c}{{j{c}}}}{Ab{}{{j{c}}}}{Af{Ad}}Ah}An}{{gi}BdAjAn{{d{ce}}}{{Bh{Bf}{{j{e}}}}}}{{Bjce}fAn{}}{{gBdi}fAjAn{{Bj{ce}}}{{Bh{Bf}{{j{e}}}}}}{{g{Bd{c}}i}fAjAn{{Bj{ce}}}{{Bh{Bf}{{j{e}}}}}}{{gec}fAjAn{{Bj{ce}}}}``````{{{Bl{cegk}}m}fAjAn{{d{ce}}}An{{Cb{}{{Bn{e}}{C`{i}}}}}{}}{{{Cd{cegi}}k}fAjAn{{d{ce}}}{}{}}{ce{}{}}00000{{ce}{{Cf{ce}}}Cb{{Cb{}{{Bn{}}}}}}<<{Bfc{}}00000{Bff}00{cc{}}00{{{Bl{cegk}}mi}mAjAn{{Al{ce}}}An{{Cb{}{{Bn{e}}{C`{i}}}}}{}}{{{Cd{cegi}}ke}kAjAn{{Al{ce}}}{}{}}{{}Bf}00777{{{Bl{ceim}}go}fAjAnBb{{B`{ceg}}}An{{Cb{}{{Bn{e}}{C`{k}}}}}{}}{{{Cd{ceim}}ko}fAjAnBb{{B`{ceg}}}Bb{{Cb{}{{Bn{g}}{C`{k}}}}}{}}{{gi}{{Bl{cegi}}}AjAn{{d{ce}}}{}}{{gi}{{Cd{cegi}}}AjAn{{d{ce}}}{}}{{{Cb{}{{Bn{c}}{C`{e}}}}e}c{}{}}{{{Cf{ce}}g}iCb{{Cb{}{{Bn{}}}}}{}{}}{{{Bl{cegk}}i}mAjAn{{d{ce}}}An{{Cb{}{{Bn{e}}{C`{i}}}}}{}}{{{Cd{cegi}}e}kAjAn{{d{ce}}}{}{}}{{{Cb{}{{Bn{c}}{C`{e}}}}c}{{Ch{e}}}{}{}}{{{Cf{ce}}g}{{Ch{i}}}Cb{{Cb{}{{Bn{}}}}}{}{}}{c{{Cj{e}}}{}{}}00000{cCl{}}00{ce{}{}}00{{{Bl{cegk}}im}fAjAn{{Bj{ce}}}An{{Cb{}{{Bn{e}}{C`{i}}}}}{}}{{{Cd{cegi}}ek}fAjAn{{Bj{ce}}}{}{}}`{{{Cn{ce}}g}fAjBb{}}{{{Cn{ce}}gD`D`i}gAj{BbDb}{}An}44{ceAj{}}``{{}{{Cn{ce}}}AjBb}{Bfc{}}0{Bff}{cc{}}{{{Cn{ce}}}{{Df{{Dd{c}}}}}AjBb}00{{{Cn{ce}}gi}gAjBb{}An}{{}Bf}<{{{Cn{ce}}eg}fAjBb{}}`{{{Cn{ce}}g}iAjBbAn{}}{c{{Cj{e}}}{}{}}0{cCl{}}{ce{}{}}`{{{Dh{ce}}g}fAj{BbDb}{}}{{{Dh{ce}}gD`D`i}gAj{BbDb}{}An}22>{{}{{Dh{ce}}}Aj{BbDb}}==<;{{{Dh{ce}}{Dj{c}}e}{{Df{c}}}Aj{BbDb}}{{{Dh{ce}}{Dj{c}}{Dl{e{Df{c}}}}}{{Dn{ce}}}Aj{BbDb}}{{{Dh{ce}}gi}gAj{BbDb}{}An};6{{{Dh{ce}}eg}fAj{BbDb}{}}``{{{Dh{ce}}}fAj{BbDb}}{{{Dh{ce}}g}iAj{BbDb}An{}};;:9`{{{Dh{ce}}E`c}fAj{BbDb}}{{{Dh{ce}}gi}fAj{BbDb}An{}}`;;`{{{Eb{ce}}g}EdEfBb{}}`{Bfc{}}0`{Bff}{cc{}}{{{Eb{ce}}}{{Eh{c}}}EfBb}{{{Eb{ce}}g}{{Ch{{El{c{Ej{c}}}}}}}EfBb{}}{{{Eb{ce}}}{{En{c}}}EfBb}{{{Eb{ce}}Ed}{{Ej{c}}}EfBb}{{}Bf}{ce{}{}}{{{Eb{ce}}}cEfBb}``{c{{Cj{e}}}{}{}}0{cCl{}}{{{Eb{ce}}}{{El{c{Ej{c}}}}}EfBb}4``````````44{E`E`}{{ce}f{}{}}>>={{E`E`}F`}{{ce}F`{}{}}{{E`Fb}Fd}?{{ce}Ad{FfFh}Fj}{{E`c}fFl}<;{E`F`}0{{E`{G`{FnE`}}}Gb}00{AnE`}><<;>``````````{E`{{Dd{c}}}Gd}0``````````````````````??{GfGf}:{Bfc{}}0{Bff}{{GfGf}F`}{{GfFb}Fd}{cc{}}{{}Bf}{ce{}{}}{GfE`}1{c{{Cj{e}}}{}{}}0{cCl{}}3{gfAjAj{{d{cGf}}{B`{cGf{Gh{e}}}}}}{{geeee}fAjAj{{Bj{cGf}}{B`{cGf{Gh{e}}}}}}{{{Bd{c}}}{{Df{Gj}}}Aj}````````6666{{{Gh{c}}}{{Gh{c}}}h}{{{Gl{c}}}{{Gl{c}}}{}}{{ce}f{}{}}0{{{Gh{c}}{Gh{c}}}GnH`}{Bfc{}}000{Bff}0{{{Gh{c}}Ad}{{Df{e}}}AjAj}{{{Gh{c}}{Gh{c}}}F`Hb}{{ce}F`{}{}}{{{Gh{c}}Fb}FdAh}{{{Gl{c}}Fb}Fd{}}{cc{}}0{D`{{Gh{c}}}Aj}{{ce}Ad{FfFh}Fj}{{{Gh{c}}e}fFfFl}{{}Bf}0{ce{}{}}00{{{Gh{c}}}F`Aj}{{{Gh{c}}e}F`AjAj}{{}{{Gl{c}}}{}}{{{Gh{c}}e}BfAjAj}{{{Gl{c}}}Bf{}}{{{Gh{c}}}BfAj}{{{Gl{c}}}{{Ch{e}}}{}{}}0{{{Gl{c}}Bf}{{Ch{e}}}{}{}}{{{Gh{c}}{Gh{c}}}{{Ch{Gn}}}Hd}{{{Gl{c}}}{{Hf{Bf{Ch{Bf}}}}}{}}::{{{Gh{c}}}D`Aj}{c{{Cj{e}}}{}{}}000{cCl{}}0==````````````=={HhHh}{{ce}f{}{}}{Bfc{}}0{Bff}{{HhHh}F`}{{HhFb}Fd}{cc{}}{{}Bf}{ce{}{}}{HhE`}1;;:1{efAj{{d{cHh}}{B`{cHhHj}}}}{{eBf}fAj{{d{cHh}}{B`{cHhHj}}}}{{egg}fAj{{d{cHh}}{Bj{cHh}}{B`{cHhHj}}}Aj}````4444{HjHj}{HlHl}=={{HjHj}Gn}====<<{{HjAd}{{Df{c}}}Aj}{{HjHj}F`}{{ce}F`{}{}}{{HjFb}Fd}{{HlFb}Fd}>>{D`Hj}{{ce}Ad{FfFh}Fj}{{Hjc}fFl}{{}Bf}0{ce{}{}}00{HjF`}{{Hjc}F`Aj}{{}Hl}{{Hjc}BfAj}{HlBf}{HjBf}{Hl{{Ch{c}}}{}}0{{HlBf}{{Ch{c}}}{}}{c{{Hn{e}}}{}{}}{{HjHj}{{Ch{Gn}}}}{Hl{{Hf{Bf{Ch{Bf}}}}}};;{HjD`}{c{{Cj{e}}}{}{}}000{cCl{}}0>>`````>>>>>>>>{{{I`{ce}}}{{I`{ce}}}h{hBb}}{{{Ib{ce}}}{{Ib{ce}}}h{hBb}}{{{Id{ce}}}{{Id{ce}}}h{hBb}}{{{If{ce}}}{{If{ce}}}hh}{{ce}f{}{}}000{{E`{Df{{I`{{Dd{c}}e}}}}}{{Dd{c}}}AjBb}{{{Dl{c{Df{{I`{{Dd{e}}c}}}}}}}{{Df{{Dd{e}}}}}BbAj}{Bfc{}}0000000{Bff}000`{{{I`{ce}}{I`{ce}}}F`Hb{HbBb}}{{{Id{ce}}{Id{ce}}}F`Hb{HbBb}}{{ce}F`{}{}}0{{{I`{ce}}Fb}FdAh{AhBb}}{{{Ib{ce}}Fb}FdAh{AhBb}}{{{Id{ce}}Fb}FdAh{AhBb}}{{{If{ce}}Fb}FdAhAh}{cc{}}000{D`Bb}{{}Bf}000{ce{}{}}000{{{If{ce}}}g{}Bb{}}{BbF`}{{Bbc}BfAj}{BbBf}{{ce{Ih{e}}}{{I`{ec}}}Bbh}`{{{Dj{c}}}{{Id{cIj}}}Ef}`{Bb{{Dd{c}}}Gd}{BbcGd}8888{BbD`}{c{{Cj{e}}}{}{}}0000000{cCl{}}000;;;;```;;;;{{{Df{{Id{c}}}}Djg}{{Il{ec}}}BbIn{{J`{e}}}}{Bfc{}}000{Bff}0````{cc{}}0{{}Bf}0{ce{}{}}0`````````````77776600`````````00000000{JbJb}{JdJd}{IjIj}{JfJf}{{ce}f{}{}}000{{JbJb}Gn}{{IjIj}Gn};;;;;;;;::::{{JbAd}{{Df{c}}}Aj}{{JbJb}F`}{{IjIj}F`}{{ce}F`{}{}}0{{JbFb}Fd}{{JdFb}Fd}{{IjFb}Fd}{{JfFb}Fd}{cc{}}000{D`Jb}{D`Ij}{{ce}Ad{FfFh}Fj}0{{Jbc}fFl}{{Ijc}fFl}{{}Bf}000{ce{}{}}00000{JbF`}{IjF`}{{}Jd}{{}Jf}{{Jbc}BfAj}{{Ijc}BfAj}{JdBf}{JfBf}{JbBf}{IjBf}{Jd{{Ch{c}}}{}}{Jf{{Ch{c}}}{}}10{{JdBf}{{Ch{c}}}{}}{{JfBf}{{Ch{c}}}{}}{c{{Hn{e}}}{}{}}0{{JbJb}{{Ch{Gn}}}}{{IjIj}{{Ch{Gn}}}}{{{Dj{c}}}{{Jh{c}}}Ef}{Jd{{Hf{Bf{Ch{Bf}}}}}}{Jf{{Hf{Bf{Ch{Bf}}}}}}{ce{}{}}000{JbD`}{IjD`}{c{{Cj{e}}}{}{}}0000000{cCl{}}0004444{{{Dj{Jj}}}{{Jn{Jl}}}}````55555555{{{Dn{ce}}}{{Dn{ce}}}{hAj}{hBb}}{{{K`{ce}}}{{K`{ce}}}h{hBb}}{{{Kb{ce}}}{{Kb{ce}}}{hIn}{hBb}}{{{Kd{ceg}}}{{Kd{ceg}}}{hIn}{h{Kf{c}}}{hBb}}{{ce}f{}{}}000{{}{{Dn{ce}}}AjBb}{Bfc{}}0000000{Bff}000{{{Dn{ce}}{Dn{ce}}}F`{HbAj}{HbBb}}{{ce}F`{}{}}{{{K`{ce}}g}{{Cj{{Kh{c}}{Kj{g}}}}}hBb{}}`{{{Dn{ce}}Fb}Fd{AhAj}{AhBb}}{{{K`{ce}}Fb}FdAh{AhBb}}{{{Kb{ce}}Fb}Fd{AhIn}{AhBb}}{{{Kd{ceg}}Fb}Fd{AhIn}{Ah{Kf{c}}}{AhBb}}{cc{}}000{{}Bf}000{ce{}{}}000`{{{Dj{c}}}{{Dn{cIj}}}Aj}1111{c{{Cj{e}}}{}{}}0000000{cCl{}}0003333````33{KlKl}{{ce}f{}{}}{Bfc{}}0{Bff}{{KlFb}Fd}0:98{{Dj{Df{Dd}}{Dn{c}}e}{{Cj{{Kd{gic}}Kl}}}Bb{KnL`}In{{Kf{g}}}}9{cGb{}}887:``````````````::443<;:{LbE`}998;`````{{GjGj}Ld}{{LfcD`D`e}c{}An}{BdBd}0{gfAjAj{{d{cLb}}{B`{cLb{Lh{e}}}}}}{{g{Bd{Ld}}}fAjAj{{d{cLb}}{B`{cLb{Lh{e}}}}{Al{cLb}}{Lf{cLb{Lh{e}}}}}}{{}Ld}{{BfBfe}c{}{{Bh{BfBf}{{j{c}}}}}}{Ld{{Bd{c}}}Aj}{c{{Bd{e}}}AjAj}{{geeF`}eAjAj{{Bj{cLb}}{B`{cLb{Lh{e}}}}}}````````{ce{}{}}000{{{Lh{c}}}{{Lh{c}}}h}{{{Lj{c}}}{{Lj{c}}}{}}{{ce}f{}{}}0{{{Lh{c}}{Lh{c}}}GnH`}{Bfc{}}000{Bff}0{{{Lh{c}}Ad}{{Df{e}}}AjAj}{{{Lh{c}}{Lh{c}}}F`Hb}{{ce}F`{}{}}{{{Lh{c}}Fb}FdAh}{{{Lj{c}}Fb}Fd{}}{cc{}}0{D`{{Lh{c}}}Aj}{{ce}Ad{FfFh}Fj}{{{Lh{c}}e}fFfFl}{{}Bf}0{ce{}{}}00{{{Lh{c}}}F`Aj}{{{Lh{c}}e}F`AjAj}{{}{{Lj{c}}}{}}{{{Lh{c}}e}BfAjAj}{{{Lj{c}}}Bf{}}{{{Lh{c}}}BfAj}{{{Lj{c}}}{{Ch{e}}}{}{}}0{{{Lj{c}}Bf}{{Ch{e}}}{}{}}{{{Lh{c}}{Lh{c}}}{{Ch{Gn}}}Hd}{{{Lj{c}}}{{Hf{Bf{Ch{Bf}}}}}{}}::{{{Lh{c}}}D`Aj}{c{{Cj{e}}}{}{}}000{cCl{}}0==``{{{Df{{Dd{Jj}}}}{Ll{{Df{Jj}}}}Bfc}f{KnL`}}``````>>{LnLn}{{ce}f{}{}}{Bfc{}}0{Bff}{{LnLn}F`}{{LnFb}Fd}{cc{}}{{}Bf}{ce{}{}}{LnE`}1<<;1{efAj{{d{cLn}}}}0{{egg}fAj{{d{cLn}}{Bj{cLn}}}Aj}0{{Dj{Df{Dd}}{Kd{ceg}}{Ll{Df}}}F`In{{Kf{c}}}Bb}`44{{{Ll{c}}}{{Ll{c}}}h}<`{{}{{Ll{c}}}{M`h}}<<;{{{Ll{c}}{Ll{c}}}F`Hb}{{ce}F`{}{}}{{{Ll{c}}Fb}FdAh};{e{{Ll{c}}}{MbAh}{{Mf{}{{Md{c}}}}}}{{ce}Ad{FfFh}Fj}{{{Ll{c}}e}fFfFl}{{{Ll{c}}Bf}e{}{}}>={{{Ll{c}}}eh{}}{{{Ll{c}}}e{}{}}000{{{Ll{c}}}F`{}}{{{Ll{c}}}Bf{}}{c{}{}}0{ce{}{}}{{{Ll{{Df{c}}}}}{{Ll{{Df{c}}}}}{M`h}}{c{{Cj{e}}}{}{}}0{cCl{}}3{Bf{{Ll{{Df{c}}}}}{M`h}}","c":[],"p":[[17,"Variable"],[10,"ColAccessCap",53],[1,"unit"],[10,"Clone",965],[17,"Output"],[10,"Add",966],[10,"Sub",966],[10,"Mul",966],[10,"Neg",966],[1,"u64"],[10,"From",967],[10,"Debug",968],[10,"PrimeField",969],[10,"HybridCopyCap",53],[10,"ColumnIndexer",209],[10,"LookupCap",53],[10,"LookupTableID",449],[1,"array"],[1,"usize"],[10,"Fn",970],[10,"ColWriteCap",53],[5,"SubEnvColumn",68],[17,"Source"],[17,"Target"],[10,"MPrism",68],[5,"SubEnvLookup",68],[5,"ComposedMPrism",68],[6,"Option",971],[6,"Result",972],[5,"TypeId",973],[5,"ConstraintBuilderEnv",129],[1,"u32"],[10,"IntoEnumIterator",974],[8,"E",244],[5,"Vec",975],[5,"WitnessBuilderEnv",155],[5,"EvaluationDomains",976],[5,"BTreeMap",977],[5,"ProofInputs",696],[6,"Column",209],[5,"ColumnEnvironment",183],[6,"Domain",978],[10,"FftField",969],[5,"Challenges",978],[5,"Radix2EvaluationDomain",979],[5,"Evaluations",980],[5,"Constants",978],[1,"bool"],[5,"Formatter",968],[8,"Result",968],[10,"Hash",981],[10,"Sized",982],[10,"BuildHasher",981],[10,"Hasher",981],[5,"CacheId",978],[5,"HashMap",983],[5,"String",984],[10,"Field",969],[6,"FECColumn",259],[6,"LookupTable",299],[5,"BigInt",985],[5,"LookupTableIter",299],[6,"Ordering",986],[10,"Ord",986],[10,"PartialEq",986],[10,"PartialOrd",986],[1,"tuple"],[6,"FFAColumn",362],[6,"LookupTable",392],[5,"LookupTableIter",392],[5,"IterBridge",987],[5,"Logup",449],[5,"LookupTable",449],[5,"LogupWitness",449],[5,"LookupProof",449],[1,"slice"],[6,"LookupTableIDs",582],[5,"Env",537],[10,"KimchiCurve",988],[10,"FqSponge",989],[6,"DummyLookupTable",582],[5,"DummyLookupTableIter",582],[5,"LookupTableIDsIter",582],[8,"LookupWitness",582],[8,"Fp",0],[8,"BN254",0],[5,"PairingSRS",990],[5,"ProofEvaluations",696],[5,"ProofCommitments",696],[5,"Proof",696],[10,"OpenProof",991],[5,"PointEvaluations",992],[6,"ExprError",978],[6,"ProverError",771],[10,"RngCore",993],[10,"CryptoRng",993],[6,"SerializationColumn",798],[5,"BigUint",994],[10,"HybridSerHelpers",821],[6,"LookupTable",837],[5,"LookupTableIter",837],[5,"Witness",929],[6,"TestColumn",900],[10,"Zero",995],[10,"Send",982],[17,"Item"],[10,"IntoParallelIterator",996],[8,"OpeningProof",0],[8,"BaseSponge",0],[8,"ScalarSponge",0],[5,"QuotientPolynomialEnvironment",537]],"b":[[181,"impl-WitnessBuilderEnv%3CF,+CIX_COL_N,+LT%3E"],[182,"impl-ColWriteCap%3CF,+CIx%3E-for-WitnessBuilderEnv%3CF,+CIX_COL_N,+LT%3E"],[782,"impl-Display-for-ProverError"],[783,"impl-Debug-for-ProverError"],[949,"impl-IntoIterator-for-Witness%3CN,+F%3E"],[950,"impl-IntoIterator-for-%26Witness%3CN,+G%3E"],[951,"impl-IntoParallelIterator-for-Witness%3CN,+G%3E"],[952,"impl-IntoParallelIterator-for-%26mut+Witness%3CN,+G%3E"],[953,"impl-IntoParallelIterator-for-%26Witness%3CN,+G%3E"]]}],\
["kimchi_optimism",{"doc":"","t":"SEECCCCCCCCCCPPPSSFFFPSSSSSFFFFPFFGFFONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNOOOOONNNNNNNNNNNNONNNNNNNNNNNNOOOOOOOOOOOOOOOONNOOOOOOHOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHGFPGFPIFFFIPPPINONNNNNNNNNNNNNNNNONNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNONNNNNNNNNNNNNNNONNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONPPPPEPPPGPGPPPPPPPEPEPPPPNNNNNNNNCCNNNNNNCNNNNNNCNNCNNCNNHHNNCNNNNNNNNCPGFPPPGPPPIPPPPPPPPPPPPPPPPPPPPPGFPPGFPPPPPPPSSSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNONNNNNNNNONNNNNNNFNNNNONNNNNNNNNNNNONNNNNNONNFIIIFONNNNONNNNOONNNNNNNNNNNNNNNNNNNNNNNONNONONNNNNNNNNNOKKKNNNNNNNNNNNNNNNMNNNKKRMNNNMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNIOOONNNNNNOFNNNNNNNNNNNNNNNNOONNNNNNNOPPGPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNEEEECCCCCCCGPISSSPNNNNONNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNONNNNNNNNNNNNONNNNNNNNNNNNNNFIIIFONNNNONNNNOONNNNNNNNNNNNNNNNNNNNNNNONNONONNNNNNNNNNOPPPPPPPPPPPPPPPPSSSSSSSPGFGFKPGFPPPPPPPPPPPPPPPPPPPPPPPPRPGFSSSSSSSPPPPPPPPPPPPPPPPPPPPPPPPPPPPPRPPNNNMMMMMNNNMNNNNNNNNNNNNNNNNMMMNNNNNNNNNNNNNNNNNNNNMMMMCNNNNNNNNNNNNNNNNNNNMMNNNNNNNNNNNNNNNNNMMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMHHHHNNNNNNNNNNNNNMNNNNNNNNNNMMMNNNNNNNNMNNNNMNNNNNNNNMMNNMMNNNMMMMNNMMMNNNNNMMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNMFNNNNNNNNNNNNNNNONNOOOONONNNNNSSSSSSSSSFNNNNONNNNNNNOOONNNNNOOOONNNNNNIOOONNNNNNOFSSSSSFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNONNNOOOOOONNNNNOOOONNNNOONNNNOONNNNNNONNNNNNNNNNNNNNNNNNFFFNNNNNNONHNNNNNNNNNNNNNNOONNNNNNOOONNNNNNNNNNNNNOHGFPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKFKNNONNONNNNNNMOMNMMMMMNNNNNNO","n":["DOMAIN_SIZE","RAMLookup","RAMLookupMode","cannon","cannon_cli","folding","keccak","lookups","mips","preimage_oracle","proof","ramlookup","trace","Always","Every","Exactly","HINT_CLIENT_READ_FD","HINT_CLIENT_WRITE_FD","Hint","HostProgram","Meta","Never","PAGE_ADDRESS_MASK","PAGE_ADDRESS_SIZE","PAGE_SIZE","PREIMAGE_CLIENT_READ_FD","PREIMAGE_CLIENT_WRITE_FD","Page","ParsePreimageKeyError","Preimage","PreimageKey","Range","Start","State","StepFrequency","Symbol","VmConfiguration","arguments","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","create","create","create","data","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","exit","exited","find_address_symbol","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get","heap","hi","host","index","info_at","init","init","init","init","init","init","init","init","init","init","init","init","input_state_file","into","into","into","into","into","into","into","into","into","into","into","into","last_hint","lo","memory","metadata_file","name","name","next_pc","output_state_file","pc","pprof_cpu","preimage","preimage_key","preimage_offset","proof_at","proof_fmt","registers","serialize","serialize","size","snapshot_fmt","snapshot_state_at","start","step","step","step_frequency_parser","stop_at","symbols","time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","main_cli","read_configuration","Alphas","BaseSponge","Beta","Challenge","ChallengeIter","Combinations","Curve","FoldingEnvironment","FoldingInstance","FoldingWitness","Fp","Gamma","JointCombiner","Powers","SpongeParams","alpha","alphas","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","challenge","challenge","challenges","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","col","combine","combine","combine","commitments","curr_witnesses","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","get_hash","get_hash","hash","hash","infinity","init","init","init","init","init","init","init","instances","into","into","into","into","into","into","into","into_iter","iter","lagrange_basis","len","new","new","next","next_back","next_witnesses","nth","par_bridge","powers","selector","size_hint","structure","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","witness","x","y","zero_vec","AbsorbRootZero","AbsorbShifts","AbsorbXor","AbsorbZeroPad","Absorbs","BooleanityPadding","ChiShiftsB","ChiShiftsSum","Constraint","Constraint","Error","IotaStateG","Lookup","PadAtEnd","PaddingSuffix","PiRhoRotatedE","PiRhoShiftsE","PiRhoWordE","Sponges","SqueezeShifts","Steps","ThetaQuotientC","ThetaRotatedC","ThetaShiftsC","ThetaWordC","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","column","constraints","deref","deref","deref_mut","deref_mut","drop","drop","environment","eq","eq","equivalent","equivalent","fmt","fmt","folding","from","from","helpers","init","init","interpreter","into","into","pad_blocks","standardize","to_owned","to_owned","trace","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","witness","Absorb","Absorbs","AbsorbsIter","BlockIndex","ChiShiftsB","ChiShiftsSum","ColumnAlias","First","HashIndex","Input","KeccakWitness","Last","Middle","Only","Output","PadBytesFlags","PadLength","PadSuffix","PiRhoDenseE","PiRhoDenseRotE","PiRhoExpandRotE","PiRhoQuotientE","PiRhoRemainderE","PiRhoShiftsE","Round","RoundConstants","RoundNumber","Sponge","SpongeBytes","SpongeNewState","SpongeShifts","SpongeZeros","Sponges","SpongesIter","Squeeze","StepIndex","Steps","StepsIter","ThetaDenseC","ThetaDenseRotC","ThetaExpandRotC","ThetaQuotientC","ThetaRemainderC","ThetaShiftsC","TwoToPad","ZKVM_KECCAK_COLS","ZKVM_KECCAK_REL","ZKVM_KECCAK_SEL","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cols","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","index","index","index_mut","index_mut","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_witness","iter","iter","iter","ix","ix","len","len","len","next","next","next","next_back","next_back","next_back","nth","nth","nth","par_bridge","par_bridge","par_bridge","partial_cmp","partial_cmp","partial_cmp","size_hint","size_hint","size_hint","to_column","to_column","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Env","add_lookup","borrow","borrow_mut","clone","clone_into","constant","constant_field","constrain","constraints","default","deref","deref_mut","drop","fmt","from","init","into","lookups","to_owned","try_from","try_into","two_pow","type_id","variable","vzip","KeccakEnv","borrow","borrow_mut","clone","clone_into","constraints_env","default","deref","deref_mut","drop","fmt","from","init","into","new","null_state","selector","step","step","to_owned","try_from","try_into","type_id","update_step","vzip","witness_env","write_column","write_column_field","KeccakConfig","KeccakFoldingEnvironment","KeccakFoldingInstance","KeccakFoldingWitness","KeccakStructure","alphas","borrow","borrow","borrow_mut","borrow_mut","challenges","clone","clone","clone_into","clone_into","commitments","curr_witnesses","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","from","from","get_hash","get_hash","hash","hash","index","index","index","init","init","instances","into","into","next_witnesses","rows","structure","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","witness","ArithHelpers","BoolHelpers","LogupHelpers","either_zero","is_boolean","is_nonzero","is_one","lookup_byte","lookup_pad","lookup_rc16","lookup_reset","lookup_round_constants","lookup_sparse","not","one","or","read_syscall","two","two_pow","write_syscall","xor","zero","Interpreter","KeccakInterpreter","Variable","add_lookup","block_in_padding","block_index","bytes_block","constant","constant_field","constrain","constrain_absorb","constrain_booleanity","constrain_chi","constrain_flags","constrain_iota","constrain_padding","constrain_pirho","constrain_round","constrain_sponge","constrain_squeeze","constrain_theta","constraints","dense_c","dense_e","dense_rot_c","dense_rot_e","expand_rot_c","expand_rot_e","flags_block","from_quarters","from_shifts","hash_index","in_padding","input","input_of_step","is_absorb","is_pad","is_root","is_round","is_sponge","is_squeeze","lookup_steps","lookup_syscall_hash","lookup_syscall_preimage","lookups","lookups_round_chi","lookups_round_iota","lookups_round_pirho","lookups_round_theta","lookups_sponge","mode_absorb","mode_pad","mode_root","mode_rootpad","mode_round","mode_squeeze","new_state","old_state","output","output_of_step","pad_bytes_flags","pad_length","pad_suffix","quotient_c","quotient_e","remainder_c","remainder_e","round","round_constants","shifts_b","shifts_c","shifts_e","shifts_sum","sponge_byte","sponge_bytes","sponge_shifts","sponge_zeros","state_a","state_g","step_index","two_to_pad","variable","vec_dense_c","vec_dense_e","vec_dense_rot_c","vec_dense_rot_e","vec_expand_rot_c","vec_expand_rot_e","vec_quotient_c","vec_quotient_e","vec_remainder_c","vec_remainder_e","vec_shifts_b","vec_shifts_c","vec_shifts_e","vec_shifts_sum","vec_sponge_shifts","xor_state","KeccakTrace","constraints","domain_size","lookups","new","pad_dummy","pad_with_row","pad_with_zeros","pad_witnesses","push_row","witness","Env","add_lookup","borrow","borrow_mut","clone","clone_into","constant","constant_field","constrain","default","deref","deref_mut","drop","fmt","from","init","into","multiplicities","tables","to_owned","try_from","try_into","two_pow","type_id","variable","vzip","witness","ByteLookup","KeccakStepLookup","LookupTableIDs","MemoryLookup","PadLookup","RangeCheck16Lookup","RegisterLookup","ResetLookup","RoundConstantsLookup","SparseLookup","SyscallLookup","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","drop","eq","equivalent","fmt","from","from_u32","get_hash","hash","init","into","is_fixed","ix_by_value","length","partial_cmp","to_owned","to_u32","try_from","try_into","type_id","vzip","ITypeInstruction","Instruction","JTypeInstruction","RTypeInstruction","column","constraints","folding","interpreter","registers","trace","witness","ColumnAlias","InstructionCounter","MIPSWitness","MIPS_COLUMNS","MIPS_REL_COLS","MIPS_SEL_COLS","ScratchState","borrow","borrow_mut","clone","clone_into","cols","deref","deref_mut","drop","eq","equivalent","fmt","from","get_hash","hash","index","index","index_mut","index_mut","init","into","is_witness","ix","to_column","to_owned","try_from","try_into","type_id","vzip","Env","add_constraint","add_lookup","add_witness","alloc_scratch","and_witness","bitmask","borrow","borrow_mut","check_boolean","check_equal","check_is_zero","constant","constraints","copy","count_leading_ones","count_leading_zeros","default","deref","deref_mut","divmod","divmod_signed","drop","fetch_memory","fetch_memory_access","fetch_register","fetch_register_access","from","init","instruction_counter","into","inverse_or_zero","lookups","mul_hi_lo","mul_hi_lo_signed","mul_signed_witness","nor_witness","or_witness","push_memory","push_memory_access","push_register_access_if","push_register_if","report_exit","request_hint_write","request_preimage_write","scratch_state_idx","set_halted","shift_left","shift_right","shift_right_arithmetic","sub_witness","test_less_than","test_less_than_signed","test_zero","try_from","try_into","type_id","variable","vzip","xor_witness","MIPSFoldingConfig","MIPSFoldingEnvironment","MIPSFoldingInstance","MIPSFoldingWitness","MIPSStructure","alphas","borrow","borrow","borrow_mut","borrow_mut","challenges","clone","clone","clone_into","clone_into","commitments","curr_witnesses","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","from","from","get_hash","get_hash","hash","hash","index","index","index","init","init","instances","into","into","next_witnesses","rows","structure","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","witness","Add","AddImmediate","AddImmediateUnsigned","AddUnsigned","And","AndImmediate","BranchEq","BranchGeqZero","BranchGtZero","BranchLeqZero","BranchLtZero","BranchNeq","CountLeadingOnes","CountLeadingZeros","Div","DivUnsigned","FD_HINT_READ","FD_HINT_WRITE","FD_PREIMAGE_READ","FD_PREIMAGE_WRITE","FD_STDERR","FD_STDIN","FD_STDOUT","IType","ITypeInstruction","ITypeInstructionIter","Instruction","InstructionIter","InterpreterEnv","JType","JTypeInstruction","JTypeInstructionIter","Jump","JumpAndLink","JumpAndLinkRegister","JumpRegister","Load16","Load16Unsigned","Load32","Load8","Load8Unsigned","LoadUpperImmediate","LoadWordLeft","LoadWordRight","MoveFromHi","MoveFromLo","MoveNonZero","MoveToHi","MoveToLo","MoveZero","Multiply","MultiplyToRegister","MultiplyUnsigned","Nor","Or","OrImmediate","Position","RType","RTypeInstruction","RTypeInstructionIter","SYSCALL_BRK","SYSCALL_CLONE","SYSCALL_EXIT_GROUP","SYSCALL_FCNTL","SYSCALL_MMAP","SYSCALL_READ","SYSCALL_WRITE","SetLessThan","SetLessThanImmediate","SetLessThanImmediateUnsigned","SetLessThanUnsigned","ShiftLeftLogical","ShiftLeftLogicalVariable","ShiftRightArithmetic","ShiftRightArithmeticVariable","ShiftRightLogical","ShiftRightLogicalVariable","Store16","Store32","Store32Conditional","Store8","StoreWordLeft","StoreWordRight","Sub","SubUnsigned","Sync","SyscallExitGroup","SyscallFcntl","SyscallMmap","SyscallOther","SyscallReadHint","SyscallReadOther","SyscallReadPreimage","SyscallWriteHint","SyscallWriteOther","SyscallWritePreimage","Variable","Xor","XorImmediate","access_memory","access_register","access_register_if","add_constraint","add_lookup","add_witness","alloc_scratch","and_witness","assert_boolean","assert_equal","assert_is_zero","bitmask","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_boolean","check_equal","check_is_zero","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","constant","copy","count_leading_ones","count_leading_zeros","debugging","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","divmod","divmod_signed","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","equal","equivalent","equivalent","equivalent","equivalent","fetch_memory","fetch_memory_access","fetch_register","fetch_register_access","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_hash","get_hash","get_hash","get_hash","get_instruction_pointer","get_next_instruction_pointer","hash","hash","hash","hash","increase_heap_pointer","init","init","init","init","init","init","init","init","instruction_counter","interpret_instruction","interpret_itype","interpret_jtype","interpret_rtype","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","inverse_or_zero","is_zero","iter","iter","iter","iter","ix","len","len","len","len","mul_hi_lo","mul_hi_lo_signed","mul_signed_witness","next","next","next","next","next_back","next_back","next_back","next_back","nor_witness","nth","nth","nth","nth","or_witness","par_bridge","par_bridge","par_bridge","par_bridge","partial_cmp","partial_cmp","partial_cmp","partial_cmp","push_memory","push_memory_access","push_register","push_register_access","push_register_access_if","push_register_if","range_check64","read_memory","read_register","report_exit","request_hint_write","request_preimage_write","set_halted","set_instruction_pointer","set_next_instruction_pointer","shift_left","shift_right","shift_right_arithmetic","sign_extend","size_hint","size_hint","size_hint","size_hint","sub_witness","test_less_than","test_less_than_signed","test_zero","to_column","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variable","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_memory","write_register","write_register_if","xor_witness","InstructionParts","borrow","borrow_mut","clone","clone_into","decode","default","deref","deref_mut","deserialize","drop","encode","eq","equivalent","fmt","from","funct","init","into","op_code","rd","rs","rt","serialize","shamt","to_owned","try_from","try_into","type_id","vzip","NUM_REGISTERS","REGISTER_CURRENT_IP","REGISTER_HEAP_POINTER","REGISTER_HI","REGISTER_LO","REGISTER_NEXT_IP","REGISTER_PREIMAGE_KEY_END","REGISTER_PREIMAGE_KEY_START","REGISTER_PREIMAGE_OFFSET","Registers","borrow","borrow_mut","clone","clone_into","current_instruction_pointer","default","deref","deref_mut","deserialize","drop","fmt","from","general_purpose","heap_pointer","hi","index","index_mut","init","into","iter","lo","next_instruction_pointer","preimage_key","preimage_offset","serialize","to_owned","try_from","try_into","type_id","vzip","MIPSTrace","constraints","domain_size","lookups","new","pad_dummy","pad_with_row","pad_with_zeros","pad_witnesses","push_row","witness","Env","NUM_DECODING_LOOKUP_TERMS","NUM_GLOBAL_LOOKUP_TERMS","NUM_INSTRUCTION_LOOKUP_TERMS","NUM_LOOKUP_TERMS","SCRATCH_SIZE","SyscallEnv","add_constraint","add_lookup","add_witness","alloc_scratch","and_witness","bitmask","borrow","borrow","borrow_mut","borrow_mut","check_boolean","check_equal","check_is_zero","clone","clone_into","constant","copy","count_leading_ones","count_leading_zeros","create","create","decode_instruction","default","deref","deref","deref_mut","deref_mut","divmod","divmod_signed","drop","drop","fetch_memory","fetch_memory_access","fetch_register","fetch_register_access","from","from","get_memory_access_page_index","get_memory_direct","get_memory_page_index","halt","hash_counter","init","init","instruction_counter","instruction_counter","into","into","inverse_or_zero","keccak_env","last_hint","last_memory_accesses","last_memory_write_index_accesses","memory","memory_write_index","mul_hi_lo","mul_hi_lo_signed","mul_signed_witness","nor_witness","or_witness","preimage","preimage_bytes_read","preimage_key","preimage_oracle","push_memory","push_memory_access","push_register_access_if","push_register_if","registers","registers_write_index","report_exit","request_hint_write","request_preimage_write","reset_scratch_state","scratch_state","scratch_state_idx","set_halted","shift_left","shift_right","shift_right_arithmetic","step","sub_witness","syscall_env","test_less_than","test_less_than_signed","test_zero","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_last_memory_access","update_last_memory_write_index_access","variable","vzip","vzip","write_column","write_field_column","xor_witness","PreImageOracle","RW","ReadWrite","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cmd","create","create_bidirectional_channel","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","get_preimage","hint","hint_client","hint_server","init","init","init","into","into","into","oracle_client","oracle_server","reader","start","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","writer","fold","LookupMode","RAMLookup","Read","Write","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","from","from","init","init","into","into","into_logup","new","numerator","read_if","read_one","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_if","write_one","Indexer","Trace","Tracer","borrow","borrow_mut","constraints","deref","deref_mut","domain_size","drop","from","in_circuit","init","into","is_full","ix","lookups","new","number_of_rows","pad_dummy","pad_with_row","pad_with_zeros","pad_witnesses","push_row","reset","set_selector_column","try_from","try_into","type_id","vzip","witness"],"q":[[0,"kimchi_optimism"],[13,"kimchi_optimism::cannon"],[265,"kimchi_optimism::cannon_cli"],[267,"kimchi_optimism::folding"],[428,"kimchi_optimism::keccak"],[499,"kimchi_optimism::keccak::column"],[718,"kimchi_optimism::keccak::constraints"],[744,"kimchi_optimism::keccak::environment"],[772,"kimchi_optimism::keccak::folding"],[829,"kimchi_optimism::keccak::helpers"],[851,"kimchi_optimism::keccak::interpreter"],[949,"kimchi_optimism::keccak::trace"],[960,"kimchi_optimism::keccak::witness"],[987,"kimchi_optimism::lookups"],[1025,"kimchi_optimism::mips"],[1036,"kimchi_optimism::mips::column"],[1071,"kimchi_optimism::mips::constraints"],[1131,"kimchi_optimism::mips::folding"],[1188,"kimchi_optimism::mips::interpreter"],[1547,"kimchi_optimism::mips::interpreter::debugging"],[1577,"kimchi_optimism::mips::registers"],[1617,"kimchi_optimism::mips::trace"],[1628,"kimchi_optimism::mips::witness"],[1736,"kimchi_optimism::preimage_oracle"],[1787,"kimchi_optimism::proof"],[1788,"kimchi_optimism::ramlookup"],[1833,"kimchi_optimism::trace"],[1864,"alloc::vec"],[1865,"core::result"],[1866,"serde::de"],[1867,"alloc::string"],[1868,"core::option"],[1869,"core::fmt"],[1870,"core::fmt"],[1871,"core::any"],[1872,"clap_builder::builder::command"],[1873,"clap_builder::parser::matches::arg_matches"],[1874,"folding::error_term"],[1875,"core::clone"],[1876,"poly_commitment::commitment"],[1877,"kimchi::circuits::gate"],[1878,"kimchi::circuits::expr"],[1879,"core::hash"],[1880,"core::marker"],[1881,"core::hash"],[1882,"core::marker"],[1883,"core::cmp"],[1884,"kimchi_msm::columns"],[1885,"core::fmt"],[1886,"core::ops::arith"],[1887,"num_traits::identities"],[1888,"serde::de"],[1889,"serde::ser"],[1890,"kimchi::circuits::domains"],[1891,"kimchi_msm::proof"],[1892,"kimchi_msm::witness"],[1893,"kimchi_msm::logup"],[1894,"core::fmt"]],"d":["Domain size shared by the Keccak evaluations, MIPS …","","","Modules mimicking the defined structures used by Cannon …","A CLI mimicking the Cannon CLI.","Integration with folding. Contains common trait …","Implementation of Keccak used by the zkVM.","Instantiation of the lookups for the VM project. …","MIPS interpreter. This module implements a zero-knowledge …","Preimage oracle interface used by the zkVM.","Proof system of the zkVM.","The RAM lookup argument.","Defines a trace struct used for testing / demo purposes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The alphas are exceptional, their number cannot be known …","","","","An iterator over the variants of Challenge","","","Environment for the folding protocol, for a given number …","Folding instance containing the commitment to a witness of …","Includes the data witness columns and also the dynamic …","","","","","","","Reuses the Alphas defined in the example of folding","","","","","","","","","","","","","","","","","Challenges for the proof. We do use 3 challenges:","","","","","","","","","","","","","","","Commitments to the witness columns, including the dynamic …","Corresponds to the omega evaluations, for both sides","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Commitments to the witness columns, for both sides","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Corresponds to the zeta*omega evaluations, for both sides …","","","","","","Structure of the folded circuit (not used right now)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All the names for constraints involved in the Keccak …","","Errors that can occur during the check of the witness","","","","","","","","","","","","","","","","","","","","","","","This module defines the custom columns used in the Keccak …","This module contains the constraints for one Keccak step.","","","","","","","This module contains the definition and implementation of …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","This module defines the Keccak interpreter in charge of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This function returns a vector of field elements that …","Standardizes a Keccak step to a common opcode","","","","","","","","","","","","This file contains the witness for the Keccak hash …","","Order of absorb steps in the computation depending on the …","An iterator over the variants of Absorbs","Block index inside the hash to enumerate preimage bytes","","","Column aliases used by the Keccak circuit. The number of …","","Hash identifier to distinguish inside the syscalls …","","The witness columns used by the Keccak circuit. The Keccak …","","","","","","","","","","","","","","Current step performs a round of the permutation. The …","","","Current step is a sponge","","","","","Variants of Keccak sponges","An iterator over the variants of Sponges","","Hash step identifier to distinguish inside interstep …","Variants of Keccak steps available for the interpreter. …","An iterator over the variants of Steps","","","","","","","","Total number of columns used in Keccak, including relation …","The maximum total number of witness columns used by the …","The number of columns required for the Keccak selectors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A witness row is represented by an array of N witness …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Map the column alias to the actual column index. Note that …","Map the column alias to the actual column index. Note that …","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate over the instruction variants","","","","","","","","Returns the witness column index for the given alias","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This struct contains all that needs to be kept track of …","","","","","","","","","Constraints that are added to the circuit","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Variables that are looked up in the circuit","","","","","","","","This struct contains all that needs to be kept track of …","","","","","Environment for the constraints (includes lookups). The …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Starts a new Keccak environment for a given hash index and …","Nullifies the Witness and Constraint environments by …","Returns the selector of the current step in standardized …","Entrypoint for the interpreter. It executes one step of …","Current step","","","","","This function updates the next step of the environment …","","Environment for the witness (includes multiplicities)","Writes an integer value to a column of the Keccak witness","Writes a field value to a column of the Keccak witness","","","","","","Reuses the Alphas defined in the example of folding","","","","","Challenges for the proof. We do use 3 challenges:","","","","","Commitments to the witness columns, including the dynamic …","Corresponds to the omega evaluations, for both sides","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Map a column alias to the corresponding witness column.","","Map a selector column to the corresponding witness column.","","","Commitments to the witness columns, for both sides","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Corresponds to the zeta*omega evaluations, for both sides …","","Structure of the folded circuit (not used right now)","","","","","","","","","","","","This trait contains helper functions for arithmetic …","This trait contains helper functions for boolean …","This trait contains helper functions for the lookups used …","Degree-2 variable encoding whether at least one of the two …","Degree-2 variable encoding whether the input is a boolean …","Degree-2 variable encoding whether the first input is …","Degree-1 variable encoding whether the input is the value …","Adds a lookup to the Byte table","Adds a lookup to the Pad table","Adds a lookup to the RangeCheck16 table","Adds a lookup to the Reset table","Adds a lookup to the RoundConstants table","Adds a lookup to the Shift table","Degree-1 variable encoding the negation of the input Note: …","Returns a variable representing the value one","Degree-2 variable encoding the OR of two variables, which …","","Returns a variable representing the value two","Returns a variable representing the value 2^x","","Degree-2 variable encoding the XOR of two variables which …","Returns a variable representing the value zero","This trait includes functionalities needed to obtain the …","","","Adds a given Lookup to the environment if the condition …","This function returns a degree-2 variable that is computed …","Returns the block index as a variable","Returns a variable that encodes the <code>idx</code>-th block of bytes …","Creates a variable from a constant integer","Creates a variable from a constant field element","Adds one KeccakConstraint to the environment if the …","Constrains 332 checks of absorb sponges","Constrains 136 checks of booleanity for some mode flags.","Constrains 200 checks of the chi algorithm in round steps","Constrains 136 checks of correctness of mode flags","Constrains 4 checks of the iota algorithm in round steps","Constrains 6 checks of padding absorb sponges","Constrains 150 checks of the pirho algorithm in round steps","Constrains 389 checks of round steps","Constrains 354 checks of sponge steps","Constrains 16 checks of squeeze sponges","Constrains 35 checks of the theta algorithm in round steps","Creates all 879 constraints/checks to the environment:","Returns the (x,q)-th term of ThetaDenseC, as a variable","Returns the (y,x,q)-th variable of PiRhoDenseE","Returns the (x,q)-th variable of ThetaDenseRotC","Returns the (y,x,q)-th variable of PiRhoDenseRotE","Returns the (x,q)-th variable of ThetaExpandRotC","Returns the (y,x,q)-th variable of PiRhoExpandRotE","Returns a vector of pad bytes flags as variables, with <code>idx</code> …","This function returns the composed variable from dense …","COLUMN OPERATIONS /// This function returns the composed …","Returns the hash index as a variable","Returns a variable that encodes whether the <code>idx</code>-th byte of …","Returns the 100 step input variables, which correspond to …","Returns a slice of the input variables of the current step …","Returns a variable that encodes whether the current step …","Returns a degree-1 variable that encodes whether the …","Returns a variable that encodes whether the current step …","Returns a variable that encodes whether the current step …","SELECTOR OPERATIONS /// Returns a degree-2 variable that …","Returns a variable that encodes whether the current step …","Reads a Lookup containing the input of a step and writes a …","When in Squeeze mode, writes a Lookup containing the …","When in Absorb mode, reads Lookups containing the 136 …","Creates all possible 2361 lookups to the Keccak …","Adds the 800 lookups required for Chi in the round","Adds the 1 lookup required for Iota in the round","Adds the 700 lookups required for PiRho in the round","Adds the 120 lookups required for Theta in the round","Adds the 601 lookups required for the sponge","Returns a variable that encodes whether the current step …","Returns a degree-1 variable that encodes whether the …","Returns a variable that encodes whether the current step …","Returns a degree-1 variable that encodes whether the …","Returns a variable that encodes whether the current step …","Returns a variable that encodes whether the current step …","Returns the <code>idx</code>-th new state expanded quarter, as a …","Returns the <code>idx</code>-th old state expanded quarter, as a …","Returns the 100 step output variables, which correspond to …","Returns a slice of the output variables of the current …","Returns the 136 flags indicating which bytes of the new …","Returns a variable that encodes the bytelength of the …","Returns a variable that encodes the <code>idx</code>-th chunk of the …","Returns the (x)-th term of ThetaQuotientC, as a variable","Returns the (y,x,q)-th variable of PiRhoQuotientE","Returns the (x,q)-th variable of ThetaRemainderC","Returns the (y,x,q)-th variable of PiRhoRemainderE","Returns a variable that encodes the current round number […","Returns the 4 expanded quarters that encode the round …","Returns the (i,y,x,q)-th variable of ChiShiftsB","Returns the (i,x,q)-th variable of ThetaShiftsC","Returns the (i,y,x,q)-th variable of PiRhoShiftsE","Returns the (i,y,x,q)-th variable of ChiShiftsSum","Returns the <code>idx</code>-th byte of the sponge, as a variable","Returns the 200 bytes of the sponge, as variables","Returns the <code>idx</code>-th term of the shifts of the sponge, as a …","Returns the last 32 terms that are added to the new block …","Returns the (y,x,q)-th input of the theta algorithm, as a …","Returns the <code>idx</code>-th output of a round step as a variable","Returns the step index as a variable","Returns a variable that encodes the value 2^pad_length","Returns the variable corresponding to a given column alias.","Returns the 20 variables corresponding to ThetaDenseC","Returns the 100 variables corresponding to PiRhoDenseE","Returns the 20 variables corresponding to ThetaDenseRotC","Returns the 100 variables corresponding to PiRhoDenseRotE","Returns the 20 variables corresponding to ThetaExpandRotC","Returns the 100 variables corresponding to PiRhoExpandRotE","Returns the 5 variables corresponding to ThetaQuotientC","Returns the 100 variables corresponding to PiRhoQuotientE","Returns the 20 variables corresponding to ThetaRemainderC","Returns the 100 variables corresponding to PiRhoRemainderE","Returns the 400 variables corresponding to ChiShiftsB","Returns the 80 variables corresponding to ThetaShiftsC","Returns the 400 variables corresponding to PiRhoShiftsE","Returns the 400 variables corresponding to ChiShiftsSum","Returns the 400 terms that compose the shifts of the …","Returns the output of an absorb sponge, which is the XOR …","The Keccak circuit trace","The vector of constraints for a given selector","The domain size of the circuit","The vector of lookups for a given selector","","","","","","","The witness for a given selector","This struct contains all that needs to be kept track of …","","","","","","","","Checks the constraint <code>tag</code> by checking that the input <code>x</code> is …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","The multiplicities of each lookup entry. Should not be …","The fixed tables used in the Keccak gate","","","","","","","","The full state of the Keccak gate (witness)","All values that can be stored in a byte (amortized table, …","Input/Output of Keccak steps","All of the possible lookup table IDs used in the zkVM","","All [1..136] values of possible padding lengths, the value …","Single-column table of all values in the range [0, 2^16)","","Dual-column table of all values in the range [0, 2^16) and …","24-row table with all possible values for round and their …","Single-column table of 2^16 entries with the sparse …","Syscalls communication channel","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Abstract columns (or variables of our multi-variate …","","Represents one line of the execution trace of the virtual …","All the witness columns used in MIPS","The number of columns used for relation witness in the …","The number of witness columns used to store the …","","","","","","A witness row is represented by an array of N witness …","","","","","","","Returns the argument unchanged.","","","Map the column alias to the actual column index.","Map the column alias to the actual column index.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","The environment keeping the constraints between the …","","","","","","","","","","","","","A list of constraints, which are multi-variate polynomials …","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reuses the Alphas defined in the example of folding","","","","","Challenges for the proof. We do use 3 challenges:","","","","","Commitments to the witness columns, including the dynamic …","Corresponds to the omega evaluations, for both sides","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Map a column alias to the corresponding witness column.","Map a selector column to the corresponding witness column.","","","","Commitments to the witness columns, for both sides","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Corresponds to the zeta*omega evaluations, for both sides …","","Structure of the folded circuit (not used right now)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over the variants of ITypeInstruction","","An iterator over the variants of Instruction","","","","An iterator over the variants of JTypeInstruction","","","","","","","","","","","","","","","","","","","","","","","","","A position can be seen as an indexed variable","","","An iterator over the variants of RTypeInstruction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Access the memory address <code>addr</code>, adding constraints …","Access the general purpose register with index <code>idx</code>, adding …","Access the general purpose register with index <code>idx</code>, adding …","Add a constraint to the proof system, asserting that …","","Returns <code>x + y</code> and the overflow bit, storing the results in …","Allocate a new abstract variable for the current step. The …","Returns <code>x or y</code>, storing the result in <code>position</code>.","Assert that the value <code>x</code> is boolean, and add a constraint …","Assert that the values <code>x</code> and <code>y</code> are equal, and add a …","Assert that the value <code>assert_equals_zero</code> is 0, and add a …","Extract the bits from the variable <code>x</code> between <code>highest_bit</code> …","","","","","","","","","","","","","","","","","Check that the witness value <code>x</code> is a boolean (<code>0</code> or <code>1</code>); …","Check that the witness values in <code>x</code> and <code>y</code> are equal; …","Check that the witness value in <code>assert_equals_zero</code> is 0; …","","","","","","","","","","","","","","","","","","","","","","","Returns the number of leading 1s in <code>x</code>, storing the result …","Returns the number of leading 0s in <code>x</code>, storing the result …","","","","","","","","","","","","","","","","","","","","","Returns <code>(x / y, x % y)</code>, storing the results in …","Returns <code>(x / y, x % y)</code>, storing the results in …","","","","","","","","","","","","","","","","","","Fetch the memory value at address <code>addr</code> and store it in …","Fetch the last ‘access index’ that the memory at …","Fetch the value of the general purpose register with index …","Fetch the last ‘access index’ for the general purpose …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Increases the heap pointer by <code>by_amount</code> if <code>if_is_true</code> is <code>1</code>…","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate over the instruction variants","","","","","Returns <code>x^(-1)</code>, or <code>0</code> if <code>x</code> is <code>0</code>, storing the result in …","","","","","","","","","","","Returns <code>((x * y) &gt;&gt; 32, (x * y) &amp; ((1 &lt;&lt; 32) - 1))</code>, …","Returns <code>((x * y) &gt;&gt; 32, (x * y) &amp; ((1 &lt;&lt; 32) - 1))</code>, …","Returns <code>x * y</code>, where <code>x</code> and <code>y</code> are treated as integers, …","","","","","","","","","Returns <code>x nor y</code>, storing the result in <code>position</code>.","","","","","Returns <code>x or y</code>, storing the result in <code>position</code>.","","","","","","","","","Set the memory value at address <code>addr</code> to <code>value</code>.","Set the last ‘access index’ for the memory at address …","Set the general purpose register with index <code>idx</code> to <code>value</code>.","Set the last ‘access index’ for the general purpose …","Set the last ‘access index’ for the general purpose …","Set the general purpose register with index <code>idx</code> to <code>value</code> …","","","","","","Request the preimage oracle for <code>len</code> bytes and store the …","","","","Return the result of shifting <code>x</code> by <code>by</code>, storing the result …","Return the result of shifting <code>x</code> by <code>by</code>, storing the result …","Return the result of shifting <code>x</code> by <code>by</code>, storing the result …","","","","","","Returns <code>x + y</code> and the underflow bit, storing the results …","Returns 1 if <code>x &lt; y</code> as unsigned integers, or 0 otherwise, …","Returns 1 if <code>x &lt; y</code> as signed integers, or 0 otherwise, …","Returns 1 if <code>x</code> is 0, or 0 otherwise, storing the result in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>x xor y</code>, storing the result in <code>position</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","This represents the internal state of the virtual machine.","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","The MIPS circuit trace","The vector of constraints for a given selector","The domain size of the circuit","The vector of lookups for a given selector","","","","","","","The witness for a given selector","This structure represents the environment the virtual …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Execute a single step of the MIPS program. Returns the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","FIXME: DUMMY FOLD FUNCTION THAT ONLY KEEPS THE LAST …","Enum representing the two different modes of a RAMLookup","Struct containing a RAMLookup","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Transforms the current RAMLookup into an equivalent Logup","Creates a new RAMLookup from a mode, a table ID, a …","Returns the numerator corresponding to this lookup in the …","Reads one value when <code>if_is_true</code> is 1.","Reads one value from a table.","","","","","","","","","","","","Writes one value when <code>if_is_true</code> is 1.","Writes one value to a table.","Returns the index of the witness column in the trace.","Struct representing a circuit execution trace containing …","Tracer builds traces for some program executions. The …","","","The vector of constraints for a given selector","","","The domain size of the circuit","","Returns the argument unchanged.","Returns a boolean indicating whether the witness for the …","","Calls <code>U::from(self)</code>.","Returns whether the witness for the given selector has …","","The vector of lookups for a given selector","Create a new circuit","Returns the number of rows that have been instantiated for …","Pad the rows of one opcode with the first row until …","Pad the rows of one opcode with the given row until …","Pads the rows of one opcode with zero rows until reaching …","Pads the rows of the witnesses until reaching the domain …","Add a witness row to the circuit (only for relation …","Resets the witness after folding","Sets the selector column to all ones, and the rest to all …","","","","","The witness for a given selector"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,10,11,13,16,17,19,1,2,3,4,5,6,10,11,13,16,17,19,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,10,11,4,13,10,11,13,16,17,19,1,2,3,4,5,6,10,11,13,16,17,19,1,2,3,4,5,6,13,16,5,6,10,11,13,16,17,19,1,2,3,4,5,6,17,19,1,5,6,17,16,16,6,13,16,17,19,1,2,3,4,5,6,10,11,13,16,17,19,1,2,3,4,5,6,19,10,11,16,16,3,13,3,10,11,13,16,17,19,1,2,3,4,5,6,3,10,11,13,16,17,19,1,2,3,4,5,6,16,16,16,3,2,5,16,3,16,3,16,16,16,3,3,16,13,16,5,3,3,5,16,4,0,3,6,4,1,2,3,4,5,6,16,10,11,13,16,17,19,1,2,3,4,5,6,10,11,13,16,17,19,1,2,3,4,5,6,10,11,13,16,17,19,1,2,3,4,5,6,10,11,13,16,17,19,1,2,3,4,5,6,0,0,0,0,37,0,0,39,0,0,0,0,0,37,37,39,0,30,40,129,30,37,38,39,40,41,129,30,37,38,39,40,41,129,30,40,37,38,39,40,41,37,38,39,40,41,30,39,40,41,40,30,129,30,37,38,39,40,41,129,30,37,38,39,40,41,129,30,37,38,39,40,41,37,41,37,41,37,38,39,40,41,129,30,37,37,38,39,40,41,39,37,41,37,41,34,129,30,37,38,39,40,41,30,129,30,37,38,39,40,41,38,37,30,38,30,39,38,38,30,38,38,39,30,38,30,37,38,39,40,41,129,30,37,38,39,40,41,129,30,37,38,39,40,41,129,30,37,38,39,40,41,129,30,37,38,39,40,41,41,34,34,30,53,53,53,53,0,53,53,53,0,52,0,53,52,53,53,53,53,53,0,53,0,53,53,53,53,52,53,52,53,52,53,52,53,0,0,52,53,52,53,52,53,0,52,53,52,53,52,53,0,52,53,0,52,53,0,52,53,0,0,52,53,0,52,53,52,53,52,53,52,53,0,58,0,0,56,56,56,0,60,56,56,0,60,60,60,56,56,56,56,56,56,56,56,56,56,55,56,56,55,56,56,56,56,0,0,58,56,0,0,56,56,56,56,56,56,56,0,0,0,56,55,57,58,59,60,61,56,55,57,58,59,60,61,56,55,57,58,59,60,61,56,55,57,58,59,60,61,55,58,60,63,58,60,56,55,57,58,59,60,61,56,55,57,58,59,60,61,56,55,57,58,59,60,61,56,55,58,60,56,55,58,60,56,55,57,58,59,60,61,56,55,57,58,59,60,61,56,55,58,60,56,55,58,60,63,63,63,63,56,55,57,58,59,60,61,56,55,57,58,59,60,61,55,57,59,61,56,55,58,60,56,55,57,59,61,57,59,61,57,59,61,57,59,61,57,59,61,55,58,60,57,59,61,56,55,56,55,57,58,59,60,61,56,55,57,58,59,60,61,56,55,57,58,59,60,61,56,55,57,58,59,60,61,56,55,57,58,59,60,61,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,0,0,0,0,0,130,71,72,71,72,130,71,72,71,72,130,131,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,73,73,73,71,72,131,71,72,131,72,131,71,72,71,72,71,72,71,72,71,72,73,0,0,0,132,132,132,132,74,74,74,74,74,74,132,133,132,74,133,133,74,132,133,0,0,76,76,83,83,83,76,76,76,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,76,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,84,84,84,84,84,84,84,84,84,84,0,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,66,66,0,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,0,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,0,87,87,87,87,87,88,87,87,87,87,87,87,87,87,87,88,88,88,88,87,87,87,87,87,87,87,87,87,87,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,0,0,0,0,0,134,91,92,91,92,134,91,92,91,92,134,135,91,92,91,92,91,92,91,92,91,92,91,92,91,92,91,92,91,92,93,93,93,91,92,135,91,92,135,92,135,91,92,91,92,91,92,91,92,91,92,93,97,101,101,97,97,101,101,101,101,101,101,101,97,97,97,97,0,0,0,0,0,0,0,89,0,0,0,0,0,89,0,0,99,99,97,97,101,101,101,101,101,101,101,101,97,97,97,97,97,97,97,97,97,97,97,101,95,89,0,0,0,0,0,0,0,0,0,97,101,101,97,97,97,97,97,97,97,101,101,101,101,101,101,97,97,97,97,97,97,97,97,97,97,97,97,97,95,97,101,95,95,95,95,95,95,95,95,95,95,95,95,89,96,97,98,99,100,101,102,89,96,97,98,99,100,101,102,95,95,95,89,96,97,98,99,100,101,102,89,96,97,98,99,100,101,102,89,97,99,101,95,95,95,95,0,97,99,101,89,96,97,98,99,100,101,102,89,96,97,98,99,100,101,102,95,95,89,96,97,98,99,100,101,102,89,97,99,101,95,89,97,99,101,95,95,95,95,89,96,97,98,99,100,101,102,89,96,97,98,99,100,101,102,89,97,99,101,95,95,89,97,99,101,95,89,96,97,98,99,100,101,102,95,0,0,0,0,89,96,97,98,99,100,101,102,89,96,98,100,102,95,95,89,97,99,101,89,96,98,100,102,95,95,95,96,98,100,102,96,98,100,102,95,96,98,100,102,95,96,98,100,102,89,97,99,101,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,96,98,100,102,95,95,95,95,89,89,96,97,98,99,100,101,102,89,96,97,98,99,100,101,102,89,96,97,98,99,100,101,102,89,96,97,98,99,100,101,102,95,89,96,97,98,99,100,101,102,95,95,95,95,0,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,0,0,0,0,0,0,0,0,0,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,0,110,110,110,110,110,110,110,110,110,110,0,0,0,0,0,0,0,111,111,111,111,111,111,111,112,111,112,111,111,111,112,112,111,111,111,111,111,112,111,112,111,112,111,112,111,111,111,112,111,111,111,111,111,112,111,111,111,111,111,111,112,111,111,111,112,111,111,112,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,112,111,112,111,112,111,112,111,111,111,111,112,111,111,111,0,0,0,113,136,114,113,136,114,113,113,0,113,136,114,113,136,114,113,136,114,113,136,114,113,113,113,113,113,136,114,113,136,114,113,113,136,113,113,136,114,113,136,114,113,136,114,113,136,114,136,0,0,0,119,119,119,67,119,67,119,67,119,67,119,67,119,67,119,67,119,67,67,119,67,119,67,119,67,67,67,67,67,67,119,67,67,119,67,119,67,119,67,119,67,67,67,0,0,0,123,123,123,123,123,123,123,123,123,123,123,123,125,123,128,123,128,128,128,128,128,123,123,123,123,123,123,123],"f":"``````````````````````````````````````{ce{}{}}00000000000000000000000{bb}{dd}{ff}{hh}{jj}{ll}{{ce}n{}{}}00000{{{Ab{A`}}}Ad}{{{Ab{A`}}}Af}{Ahh}`{Ahc{}}00000000000000000000000{c{{Al{Aj}}}An}{c{{Al{B`}}}An}{c{{Al{j}}}An}{c{{Al{l}}}An}{Ahn}00000000000{{BbBb}Bd}{{BfBf}Bd}{{bb}Bd}{{jj}Bd}{{ll}Bd}{{ce}Bd{}{}}``{{lBh}{{Bl{Bj}}}}{{AjBn}C`}{{B`Bn}C`}{{BbBn}C`}{{BfBn}C`}{{bBn}C`}{{dBn}C`}{{fBn}C`}{{hBn}C`}{{jBn}C`}{{lBn}C`}{cc{}}00000000000{Cb{{Al{Bfc}}}{}}{Ad{{Ab{A`}}}}{Af{{Ab{A`}}}}`````{{}Ah}00000000000`{ce{}{}}00000000000````````````````{{Ajc}AlCd}{{B`c}AlCd}``````{Cb{{Al{bBj}}}}```333333{B`Bj}{c{{Al{e}}}{}{}}00000000000000000000000{cCf{}}00000000000666666666666{{}Ch}{Cjf}```````````````{{{Cl{c}}AhCn}D`Db}`99999999999999{{{Dh{{Df{Dd}}}}}D`}{{{Cl{c}}DjCn}D`Db}`{DjDj}{DlDl}{DnDn}{E`E`}{EbEb}{{ce}n{}{}}0000{{{Cl{c}}eEdCn}{{Ab{D`}}}Db{}}{{DnDnD`}Dn}{{E`E`D`}E`}{{EbEbD`}Eb}``{Ahc{}}0000000000000{Ahn}000000{{DjDj}Bd}{{EbEb}Bd}{{ce}Bd{}{}}0{{DjBn}C`}{{DlBn}C`}{{DnBn}C`}{{E`Bn}C`}{{EbBn}C`}{cc{}}00{EfDj}1111{{DnAh}{{Bl{D`}}}}{{ce}Eh{EjEl}En}0{{Djc}nF`}{{Ebc}nF`}`{{}Ah}000000`{ce{}{}}0000000{{}Dl}{{{Cl{c}}Ah}{{Ab{D`}}}Db}{DlAh}{{c{Dh{E`}}{Dh{Eb}}}{{Cl{e}}}{}Db}{D`Dn}{Dl{{Bl{c}}}{}}0`{{DlAh}{{Bl{c}}}{}}{c{{Fb{e}}}{}{}}{Dn{{Ab{D`}}}}{{{Cl{c}}eCn}{{Ab{D`}}}Db{FdDb}}{Dl{{Ff{Ah{Bl{Ah}}}}}}`;;;;;{c{{Al{e}}}{}{}}0000000000000{cCf{}}000000=======```{{{Cl{c}}}{{Ab{D`}}}Db}`````````````````````````>>>>{FhFh}{FjFj}{{ce}n{}{}}0``{Ahc{}}000{Ahn}0`{{FhFh}Bd}{{FjFj}Bd}{{ce}Bd{}{}}0{{FhBn}C`}{{FjBn}C`}`{cc{}}0`{{}Ah}0`{ce{}{}}0{Ah{{Dh{c}}}Fl}{FnFn}22`{c{{Al{e}}}{}{}}000{cCf{}}044`````````````````````````````````````````````````44444444444444{G`G`}3{GbGb}{GdGd}{GfGf}{GhGh}{GjGj}{{ce}n{}{}}000000{{FnFn}Gl}{{GdGd}Gl}{{GhGh}Gl}`{{}Gd}{{}Gh}{Ahc{}}0000000000000{Ahn}000000{{G`G`}Bd}{{FnFn}Bd}{{GdGd}Bd}{{GhGh}Bd}{{ce}Bd{}{}}000{{G`Bn}C`}{{FnBn}C`}{{GbBn}C`}{{GdBn}C`}{{GfBn}C`}{{GhBn}C`}{{GjBn}C`}{cc{}}000000{{ce}Eh{EjEl}En}000{{G`c}nF`}{{Fnc}nF`}{{Gdc}nF`}{{Ghc}nF`}{{{Gn{c}}Fn}eDb{}}{{{Gn{c}}G`}eDb{}}01{{}Ah}000000{ce{}{}}000000{Fnc{}}111{G`Bd}{{}Gb}{{}Gf}{{}Gj}{G`Ah}{FnAh}{GbAh}{GfAh}{GjAh}{Gb{{Bl{c}}}{}}{Gf{{Bl{c}}}{}}{Gj{{Bl{c}}}{}}210{{GbAh}{{Bl{c}}}{}}{{GfAh}{{Bl{c}}}{}}{{GjAh}{{Bl{c}}}{}}{c{{Fb{e}}}{}{}}00{{FnFn}{{Bl{Gl}}}}{{GdGd}{{Bl{Gl}}}}{{GhGh}{{Bl{Gl}}}}{Gb{{Ff{Ah{Bl{Ah}}}}}}{Gf{{Ff{Ah{Bl{Ah}}}}}}{Gj{{Ff{Ah{Bl{Ah}}}}}}{G`H`}{FnH`}{ce{}{}}000000{c{{Al{e}}}{}{}}0000000000000{cCf{}}0000002222222`{{{Hb{c}}e{Hf{eHd}}}nFl{}}33{{{Hb{c}}}{{Hb{c}}}Db}{{ce}n{}{}}{Ehc{}}{ceFl{}}{{{Hb{c}}Fjee}nFl{}}`{{}{{Hb{c}}}Fl}{Ahc{}}0{Ahn}{{{Hb{c}}Bn}C`Hh}{cc{}}{{}Ah}>`>==8<{{{Hb{c}}G`}eFl{}}?`??{{{Hj{c}}}{{Hj{c}}}Db};`{{}{{Hj{c}}}Fl}776{{{Hj{c}}Bn}C`Hh}54{ce{}{}}{{Eh{Hl{A`}}}{{Hj{c}}}Fl}{{{Hj{c}}}nFl}{{{Hj{c}}}FnFl}1`3{c{{Al{e}}}{}{}}0{cCf{}}35`{{{Hj{c}}G`Eh}nFl}{{{Hj{c}}G`c}nFl}``````7777`{HnHn}{I`I`}{{ce}n{}{}}0``{Ahc{}}000{Ahn}0{{HnHn}Bd}{{I`I`}Bd}{{ce}Bd{}{}}0{{HnBn}C`}{{I`Bn}C`}{cc{}}0{{ce}Eh{EjEl}En}0{{Hnc}nF`}{{I`c}nF`}{{IbH`}c{}}{{IbG`}c{}}{{IbFn}c{}}{{}Ah}0`{ce{}{}}0`1`00{c{{Al{e}}}{}{}}000{cCf{}}022````{{cc}c{}};0;{{Idcc}n{}}{{Idc{Ab{c}}}n{}}1{{Idccc}n{}}12>{{}c{}}420{Ehc{}}351```{{{Ih{}{{If{c}}}}c{Hf{cHd}}}n{{Il{c}{{Ij{c}}}}{In{c}{{Ij{c}}}}{J`{c}{{Ij{c}}}}DbHhJbJd}}{{JfAh}c{}}{Jfc{}}{{JfAh}{{Ab{c}}}{}}4{ce{JbHhJd}{}}{{{Ih{}{{If{c}}}}Fjcc}n{{Il{c}{{Ij{c}}}}{In{c}{{Ij{c}}}}{J`{c}{{Ij{c}}}}DbHhJbJd}}{{JfFn}n}0{{JfFn{Ab{{Ab{{Ab{c}}}}}}}{{Ab{{Ab{{Ab{c}}}}}}}{}}1{{JfFn{Ab{{Ab{{Ab{c}}}}}}}n{}}21222{{JfFn}{{Ab{{Ab{{Ab{c}}}}}}}{}}3{{JfAhAh}c{}}{{JfAhAhAh}c{}}10108{{{Hl{c}}{Bl{Ah}}Ah}c{}}{{{Hl{c}}{Bl{Ah}}{Bl{Ah}}{Bl{Ah}}{Bl{Ah}}}c{}};<{Jf{{Dh{c}}}{}}{Jf{{Ab{c}}}{}}{{JfFn}c{}}00000:::::::::000000??212>??565>2{{JfAhAhAhAh}c{}}600{{JfAh}c{}}40470{Jfc{}}0{{{Ih{}{{If{c}}}}G`}c{{Il{c}{{Ij{c}}}}{In{c}{{Ij{c}}}}{J`{c}{{Ij{c}}}}DbHhJbJd}}6666666666666662````{{Ah{Hj{c}}}{{Jh{c}}}Fl}{{{Jh{c}}Fn}AhFl}{{{Jh{c}}Fn{Dh{c}}}AhFl}1{{{Jh{c}}}nFl}{{{Jh{c}}Fn{Dh{c}}}nFl}``{{{Jj{c}}e{Hf{eHd}}}nFl{}}{ce{}{}}0{{{Jj{c}}}{{Jj{c}}}Db}{{ce}n{}{}}{Ehc{}}{ceFl{}}{{{Jj{c}}Fjee}nFl{}}{{}{{Jj{c}}}Fl}{Ahc{}}0{Ahn}{{{Jj{c}}Bn}C`Hh}{cc{}}{{}Ah};``;{c{{Al{e}}}{}{}}0{Eh}{cCf{}}{{{Jj{c}}G`}eFl{}}?````````````??{HdHd}>{{HdHd}Gl}::9{{HdHd}Bd}{{ce}Bd{}{}}{{HdBn}C`}:{BhHd}{{ce}Eh{EjEl}En}{{Hdc}nF`}<{ce{}{}}{HdBd}{{Hdc}AhJl}{HdAh}{{HdHd}{{Bl{Gl}}}}4{HdBh}{c{{Al{e}}}{}{}}0{cCf{}}7``````````````````77{JnJn}{{ce}n{}{}}`{Ahc{}}0{Ahn}{{JnJn}Bd}{{ce}Bd{}{}}{{JnBn}C`}{cc{}}{{ce}Eh{EjEl}En}{{Jnc}nF`}{{{K`{c}}Kb}eDb{}}{{{K`{c}}Jn}eDb{}}01{{}Ah}{ce{}{}}{JnBd}{JnAh}{JnH`}3{c{{Al{e}}}{}{}}0{cCf{}}5`{{{Kd{c}}e}nFl{}}{{{Kd{c}}{Hf{eHd}}}nFl{}}{{{Kd{c}}eegg}{{Ff{ee}}}Fl{}{}}{{{Kd{c}}}eFl{}}{{{Kd{c}}eeg}eFl{}{}}{{{Kd{c}}eBhBhg}eFl{}{}};;{cn{}}{{cc}n{}}1{Bhc{}}`{{{Kd{c}}eg}eFl{}{}}00{{}{{Kd{c}}}Fl}{Ahc{}}099{Ahn}3333{cc{}}{{}Ah};{ce{}{}}6`==;;;{{{Kd{c}}ee}nFl{}}0{{{Kd{c}}eee}nFl{}}0{{{Kd{c}}e}nFl{}}2>`0>>>{{{Kd{c}}eegg}{{Ff{ee}}}Fl{}{}}??:{c{{Al{e}}}{}{}}0{cCf{}}{{{Kd{c}}e}gFl{}{}}7{{{Kd{c}}eeg}eFl{}{}}``````8888`{KfKf}{KhKh}{{ce}n{}{}}0``????>>{{KfKf}Bd}{{KhKh}Bd}{{ce}Bd{}{}}0{{KfBn}C`}{{KhBn}C`}{cc{}}0{{ce}Eh{EjEl}En}0{{Kfc}nF`}{{Khc}nF`}{{KjH`}c{}}{{KjKb}c{}}{{KjJn}c{}}{{}Ah}0`{ce{}{}}0`1`00{c{{Al{e}}}{}{}}000{cCf{}}022````````````````````````````````````````````````````````````````````````````````````````````````````{{{Kn{}{{Kl{c}}{If{e}}}}eee}n{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}0{{{Kn{}{{Kl{c}}{If{e}}}}eeee}n{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}{{{Kn{}{{Kl{c}}{If{e}}}}e}n{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}{{{Kn{}{{Kl{c}}{If{e}}}}{Hf{eHd}}}n{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}{{{Kn{}{{Kl{c}}{If{e}}}}eecc}{{Ff{ee}}}{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}{{{Kn{}{{Kl{c}}{If{e}}}}}c{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}{{{Kn{}{{Kl{c}}{If{e}}}}eec}e{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}4{{{Kn{}{{Kl{c}}{If{e}}}}ee}n{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}5{{{Kn{}{{Kl{c}}{If{e}}}}eBhBhc}e{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}};;;;;;;;;;;;;;;;{cn{}}{{cc}n{}}1{KbKb}{L`L`}{LbLb}{LdLd}{LfLf}{LhLh}{LjLj}{LlLl}{{ce}n{}{}}0000000{{KbKb}Gl}{{LbLb}Gl}{{LfLf}Gl}{{LjLj}Gl}{Bhc{}}{{{Kn{}{{Kl{c}}{If{e}}}}ec}e{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}00`{{}Lb}{{}Lf}{{}Lj}{Ahc{}}000000000000000{{{Kn{}{{Kl{c}}{If{e}}}}eecc}{{Ff{ee}}}{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}0{Ahn}0000000{{KbKb}Bd}{{LbLb}Bd}{{LfLf}Bd}{{LjLj}Bd}{{{Kn{}{{Kl{c}}{If{e}}}}ee}e{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}{{ce}Bd{}{}}000<<<<{{KbBn}C`}{{L`Bn}C`}{{LbBn}C`}{{LdBn}C`}{{LfBn}C`}{{LhBn}C`}{{LjBn}C`}{{LlBn}C`}{cc{}}0000000{{ce}Eh{EjEl}En}000{{{Kn{}{{Kl{c}}{If{e}}}}}e{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}0{{Kbc}nF`}{{Lbc}nF`}{{Lfc}nF`}{{Ljc}nF`}{{{Kn{}{{Kl{c}}{If{e}}}}ee}e{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}{{}Ah}00000006{{cKb}nKn}{{cLj}nKn}{{cLf}nKn}{{cLb}nKn}{ce{}{}}0000000{Kbc{}}1111{{{Kn{}{{Kl{c}}{If{e}}}}ec}e{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}{{{Kn{}{{Kl{c}}{If{e}}}}e}e{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}{{}L`}{{}Ld}{{}Lh}{{}Ll}{KbAh}{L`Ah}{LdAh}{LhAh}{LlAh}{{{Kn{}{{Kl{c}}{If{e}}}}eecc}{{Ff{ee}}}{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}0{{{Kn{}{{Kl{c}}{If{e}}}}eec}e{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}{L`{{Bl{c}}}{}}{Ld{{Bl{c}}}{}}{Lh{{Bl{c}}}{}}{Ll{{Bl{c}}}{}}32104{{L`Ah}{{Bl{c}}}{}}{{LdAh}{{Bl{c}}}{}}{{LhAh}{{Bl{c}}}{}}{{LlAh}{{Bl{c}}}{}}8{c{{Fb{e}}}{}{}}000{{KbKb}{{Bl{Gl}}}}{{LbLb}{{Bl{Gl}}}}{{LfLf}{{Bl{Gl}}}}{{LjLj}{{Bl{Gl}}}}{{{Kn{}{{Kl{c}}{If{e}}}}ee}n{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}000{{{Kn{}{{Kl{c}}{If{e}}}}eee}n{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}0{{{Kn{}{{Kl{c}}{If{e}}}}e}n{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}{{{Kn{}{{Kl{c}}{If{e}}}}e}e{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}013{{{Kn{}{{Kl{c}}{If{e}}}}eec}e{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}222000{{{Kn{}{{Kl{c}}{If{e}}}}eBh}e{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}{L`{{Ff{Ah{Bl{Ah}}}}}}{Ld{{Ff{Ah{Bl{Ah}}}}}}{Lh{{Ff{Ah{Bl{Ah}}}}}}{Ll{{Ff{Ah{Bl{Ah}}}}}}{{{Kn{}{{Kl{c}}{If{e}}}}eecc}{{Ff{ee}}}{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}66{{{Kn{}{{Kl{c}}{If{e}}}}ec}e{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}{KbH`}{ce{}{}}0000000{c{{Al{e}}}{}{}}000000000000000{cCf{}}0000000{{{Kn{}{{Kl{c}}{If{e}}}}c}e{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}33333333{{{Kn{}{{Kl{c}}{If{e}}}}ee}n{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}0{{{Kn{}{{Kl{c}}{If{e}}}}eee}n{}{Db{In{e}{{Ij{e}}}}{J`{e}{{Ij{e}}}}{Il{e}{{Ij{e}}}}HhJdJb}}>`55{LnLn}{{ce}n{}{}}{BhLn}{{}Ln}{Ahc{}}0{c{{Al{Ln}}}An}{Ahn}{LnBh}{{LnLn}Bd}{{ce}Bd{}{}}{{LnBn}C`}{cc{}}`{{}Ah}{ce{}{}}````{{Lnc}AlCd}`1{c{{Al{e}}}{}{}}0{cCf{}}3``````````33{{{M`{c}}}{{M`{c}}}Db}{{ce}n{}{}}`{{}{{M`{c}}}Mb}??{c{{Al{{M`{e}}}}}AnMd}>{{{M`{c}}Bn}C`Hh}:```{{{M`{c}}Ah}eDb{}}0:9{{{M`{c}}}{{`{{Mh{}{{Mf{c}}}}}}}{}}````{{{M`{c}}e}AlMjCd};998;````{{Ah{Kd{c}}}{{Ml{c}}}Fl}{{{Ml{c}}Kb}AhFl}{{{Ml{c}}Kb{Dh{c}}}AhFl}1{{{Ml{c}}}nFl}{{{Ml{c}}Kb{Dh{c}}}nFl}````````{{{Mn{c}}e}nFl{}}{{{Mn{c}}{Hf{eHd}}}nFl{}}{{{Mn{c}}eegg}{{Ff{ee}}}Fl{}{}}{{{Mn{c}}}eFl{}}{{{Mn{c}}eeg}eFl{}{}}{{{Mn{c}}eBhBhg}eFl{}{}}{ce{}{}}000{cn{}}{{cc}n{}}1{N`N`}{{ce}n{}{}}{Bhc{}}{{{Mn{c}}eg}eFl{}{}}00{{AhB`Nb}{{Mn{c}}}Fl}{B`N`}{{{Mn{c}}}{{Ff{KbBh}}}Fl}{{}N`}{Ahc{}}000??{Ahn}06666{cc{}}0{{{Mn{c}}Bh}AhFl}{{{Mn{c}}Bh}A`Fl}1``{{}Ah}0{{{Mn{c}}}eFl{}}`{ce{}{}}0<``````{{{Mn{c}}eegg}{{Ff{ee}}}Fl{}{}}0{{{Mn{c}}eeg}eFl{}{}}00````{{{Mn{c}}ee}nFl{}}0{{{Mn{c}}eee}nFl{}}0``{{{Mn{c}}e}nFl{}}23{{{Mn{c}}}nFl}``1444{{{Mn{c}}flh}KbFl}6`55{{{Mn{c}}eg}eFl{}{}}8{c{{Al{e}}}{}{}}000{cCf{}}0{{{Mn{c}}Ah}nFl}0{{{Mn{c}}e}gFl{}{}}<<{{{Mn{c}}JnEh}nFl}{{{Mn{c}}Jnc}nFl}<```>>>>>>`{{{Bl{d}}}Nb}{{}{{Bl{{Ff{NdNd}}}}}}{Ahc{}}00000{Ahn}00{cc{}}00{{Nb{Dh{A`}}}Ad}{{NbAf}n}``{{}Ah}00{ce{}{}}00```{NbNf}??????>>>111`{{Nh{Nj{Hd}}{Nl{Ab}}}n}````2222{NnNn}{{{Hf{ce}}}{{Hf{ce}}}Db{DbO`}}{{ce}n{}{}}0;;;;::{{NnBn}C`}{{{Hf{ce}}Bn}C`{ObFl}O`}{{{Hf{ce}}Bn}C`Hh{HhO`}}<<9988{{{Hf{ce}}}{{Od{ce}}}{}O`}{{Nnce{Hl{e}}}{{Hf{ec}}}O`{Db{In{}{{Ij{}}}}{J`{}{{Ij{}}}}{Il{}{{Ij{}}}}HhJbJd}}{{{Hf{ce}}}c{}O`}{{ce{Ab{c}}}{{Hf{ce}}}{Db{In{}{{Ij{}}}}{J`{}{{Ij{}}}}{Il{}{{Ij{}}}}HhJbJd}O`}{{c{Ab{e}}}{{Hf{ec}}}O`{}}=={cBj{}}{c{{Al{e}}}{}{}}000{cCf{}}0{ce{}{}}054```00`{Ahc{}}0`{Ahn}{cc{}}{{{Of{ce}}c}Bd{OhEjOjFdOlOn}{JdJb}}{{}Ah}51{OjAh}`{{Ahc}A`{}}{{{Of{ce}}c}Ah{OhEjOjFdOlOn}{JdJb}}{{A`c}Ah{}}{{A`c{Dh{e}}}Ah{}Jd}1{A`n}{{A`c{Dh{e}}}n{}Jd}{{{Of{ce}}c}n{OhEjOjFdOlOn}{JdJb}}{{{Of{ce}}cAh}n{OhEjOjFdOlOn}{JdJb}}{c{{Al{e}}}{}{}}0{cCf{}}{ce{}{}}`","c":[],"p":[[6,"StepFrequency",13],[5,"HostProgram",13],[5,"VmConfiguration",13],[5,"Start",13],[5,"Symbol",13],[5,"Meta",13],[1,"unit"],[1,"u8"],[5,"Vec",1864],[5,"Preimage",13],[5,"Hint",13],[1,"usize"],[5,"Page",13],[6,"Result",1865],[10,"Deserializer",1866],[5,"State",13],[5,"ParsePreimageKeyError",13],[1,"bool"],[5,"PreimageKey",13],[1,"u32"],[5,"String",1867],[6,"Option",1868],[5,"Formatter",1869],[8,"Result",1869],[1,"str"],[10,"Serializer",1870],[5,"TypeId",1871],[5,"Command",1872],[5,"ArgMatches",1873],[5,"FoldingEnvironment",267],[6,"Side",1874],[8,"Fp",267],[10,"Clone",1875],[8,"Curve",267],[5,"PolyComm",1876],[1,"array"],[6,"Challenge",267],[5,"ChallengeIter",267],[6,"Alphas",267],[5,"FoldingInstance",267],[5,"FoldingWitness",267],[6,"CurrOrNext",1877],[6,"ChallengeTerm",1878],[1,"u64"],[10,"Hash",1879],[10,"Sized",1880],[10,"BuildHasher",1879],[10,"Hasher",1879],[5,"IterBridge",1881],[10,"Copy",1880],[1,"tuple"],[6,"Error",428],[6,"Constraint",428],[10,"Field",1882],[6,"Steps",499],[6,"ColumnAlias",499],[5,"StepsIter",499],[6,"Sponges",499],[5,"SpongesIter",499],[6,"Absorbs",499],[5,"AbsorbsIter",499],[6,"Ordering",1883],[8,"KeccakWitness",499],[6,"Column",1884],[5,"Env",718],[6,"LookupTableIDs",987],[5,"RAMLookup",1788],[10,"Debug",1869],[5,"KeccakEnv",744],[1,"slice"],[5,"KeccakStructure",772],[5,"KeccakConfig",772],[8,"KeccakFoldingWitness",772],[10,"LogupHelpers",829],[17,"Variable"],[10,"Interpreter",851],[17,"Output"],[10,"Mul",1885],[10,"Add",1885],[10,"Sub",1885],[10,"One",1886],[10,"Zero",1886],[10,"KeccakInterpreter",851],[8,"KeccakTrace",949],[5,"Env",960],[10,"PrimeField",1882],[6,"ColumnAlias",1036],[8,"MIPSWitness",1036],[6,"Instruction",1188],[5,"Env",1071],[5,"MIPSStructure",1131],[5,"MIPSFoldingConfig",1131],[8,"MIPSFoldingWitness",1131],[17,"Position"],[10,"InterpreterEnv",1188],[5,"InstructionIter",1188],[6,"RTypeInstruction",1188],[5,"RTypeInstructionIter",1188],[6,"JTypeInstruction",1188],[5,"JTypeInstructionIter",1188],[6,"ITypeInstruction",1188],[5,"ITypeInstructionIter",1188],[5,"InstructionParts",1547],[5,"Registers",1577],[10,"Default",1887],[10,"Deserialize",1866],[17,"Item"],[10,"Iterator",1888],[10,"Serialize",1870],[8,"MIPSTrace",1617],[5,"Env",1628],[5,"SyscallEnv",1628],[5,"PreImageOracle",1736],[5,"RW",1736],[5,"Child",1889],[5,"EvaluationDomains",1890],[5,"ProofInputs",1891],[5,"Witness",1892],[6,"LookupMode",1788],[10,"LookupTableID",1893],[10,"Display",1869],[5,"Logup",1893],[5,"Trace",1833],[10,"Eq",1883],[10,"Indexer",1833],[10,"Ord",1883],[10,"PartialOrd",1883],[10,"Tracer",1833],[5,"BaseSponge",267],[8,"KeccakFoldingInstance",772],[8,"KeccakFoldingEnvironment",772],[10,"BoolHelpers",829],[10,"ArithHelpers",829],[8,"MIPSFoldingInstance",1131],[8,"MIPSFoldingEnvironment",1131],[5,"ReadWrite",1736]],"b":[[632,"impl-Index%3CSteps%3E-for-Witness%3CZKVM_KECCAK_REL,+T%3E"],[633,"impl-Index%3CColumnAlias%3E-for-Witness%3CZKVM_KECCAK_REL,+T%3E"],[634,"impl-IndexMut%3CColumnAlias%3E-for-Witness%3CZKVM_KECCAK_REL,+T%3E"],[635,"impl-IndexMut%3CSteps%3E-for-Witness%3CZKVM_KECCAK_REL,+T%3E"],[807,"impl-Index%3CColumn%3E-for-FoldingWitness%3CZKVM_KECCAK_COLS%3E"],[808,"impl-Index%3CColumnAlias%3E-for-FoldingWitness%3CZKVM_KECCAK_COLS%3E"],[809,"impl-Index%3CSteps%3E-for-FoldingWitness%3CZKVM_KECCAK_COLS%3E"],[1057,"impl-Index%3CInstruction%3E-for-Witness%3CMIPS_COLUMNS,+T%3E"],[1058,"impl-Index%3CColumnAlias%3E-for-Witness%3CMIPS_COLUMNS,+T%3E"],[1059,"impl-IndexMut%3CColumnAlias%3E-for-Witness%3CMIPS_COLUMNS,+T%3E"],[1060,"impl-IndexMut%3CInstruction%3E-for-Witness%3CMIPS_COLUMNS,+T%3E"],[1166,"impl-Index%3CColumn%3E-for-FoldingWitness%3CMIPS_COLUMNS%3E"],[1167,"impl-Index%3CInstruction%3E-for-FoldingWitness%3CMIPS_COLUMNS%3E"],[1168,"impl-Index%3CColumnAlias%3E-for-FoldingWitness%3CMIPS_COLUMNS%3E"],[1807,"impl-Display-for-RAMLookup%3CF,+ID%3E"],[1808,"impl-Debug-for-RAMLookup%3CT,+ID%3E"]]}],\
["kimchi_visu",{"doc":"Implements a tool to visualize a circuit as an HTML page.","t":"EHHCFNNNNNNNNNNNNNNNNN","n":["Witness","latex_constraints","visu","witness","Witness","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","from","init","inner","into","new","serialize","try_from","try_into","type_id","vzip"],"q":[[0,"kimchi_visu"],[4,"kimchi_visu::witness"],[22,"alloc::string"],[23,"alloc::vec"],[24,"std::collections::hash::map"],[25,"poly_commitment::evaluation_proof"],[26,"kimchi::prover_index"],[27,"core::option"],[28,"kimchi::curve"],[29,"core::fmt"],[30,"core::fmt"],[31,"core::fmt"],[32,"serde::ser"],[33,"core::any"]],"d":["","","Produces a <code>circuit.html</code> in the current folder.","","The type that represents the execution trace. It …","","","","","","","Returns the argument unchanged.","","","Returns the inner witness.","Calls <code>U::from(self)</code>.","Creates a new witness with <code>rows</code> rows.","","","","",""],"i":[0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],"f":"`{{}{{h{b{f{{f{d}}}}}}}}{{{l{c{j{c}}}}{A`{n}}}AbAd}``{ce{}{}}0{Afc{}}0{AfAb}{{{n{c}}Ah}Aj{AlAn}}{cc{}}{{{B`{{f{c}}}}}{{n{c}}}Al}{{}Af}{{{n{c}}}{{B`{{f{c}}}}}Al}7{Af{{n{c}}}Al}{{{n{c}}e}BbAlBd}{c{{Bb{e}}}{}{}}0{cBf{}};","c":[],"p":[[1,"str"],[5,"String",22],[5,"Vec",23],[5,"HashMap",24],[5,"OpeningProof",25],[5,"ProverIndex",26],[5,"Witness",4],[6,"Option",27],[1,"unit"],[10,"KimchiCurve",28],[1,"usize"],[5,"Formatter",29],[8,"Result",29],[10,"Field",30],[10,"Debug",29],[1,"array"],[6,"Result",31],[10,"Serializer",32],[5,"TypeId",33]],"b":[]}],\
["mina_book",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["mina_curves",{"doc":"","t":"CEEEEEEEECCCCSSIFIFINNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNOOOOOOOSSIFIIFNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNOOOOOOOCCIFNNNNNNNNNNNNIFNNNNNNNNNNNN","n":["pasta","Fp","Fq","Pallas","PallasParameters","ProjectivePallas","ProjectiveVesta","Vesta","VestaParameters","curves","fields","pallas","vesta","G_GENERATOR_X","G_GENERATOR_Y","LegacyPallas","LegacyPallasParameters","Pallas","PallasParameters","ProjectivePallas","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","from","from","infinity","infinity","init","init","into","into","mul_by_a","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","x","x","x","y","y","y","z","G_GENERATOR_X","G_GENERATOR_Y","LegacyVesta","LegacyVestaParameters","ProjectiveVesta","Vesta","VestaParameters","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","from","from","infinity","infinity","init","init","into","into","mul_by_a","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","x","x","x","y","y","y","z","fp","fq","Fp","FpParameters","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","Fq","FqParameters","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip"],"q":[[0,"mina_curves"],[1,"mina_curves::pasta"],[11,"mina_curves::pasta::curves"],[13,"mina_curves::pasta::curves::pallas"],[65,"mina_curves::pasta::curves::vesta"],[117,"mina_curves::pasta::fields"],[119,"mina_curves::pasta::fields::fp"],[133,"mina_curves::pasta::fields::fq"],[147,"core::fmt"],[148,"core::fmt"],[149,"core::any"]],"d":["","","","","","","","","","","","","","G_GENERATOR_X = 1","G1_GENERATOR_Y = …","","legacy curve, a copy of the normal curve to support legacy …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","G_GENERATOR_X = 1","G1_GENERATOR_Y = …","","legacy curve, a copy of the normal curve to support legacy …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,12,13,1,2,1,2,1,1,2,1,2,1,2,1,2,1,2,12,14,13,12,14,13,14,0,0,0,0,0,0,0,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,10,11,15,16,10,11,10,11,10,10,11,10,11,10,11,10,11,10,11,15,17,16,15,17,16,17,0,0,0,0,18,18,18,18,18,18,18,18,18,18,18,18,0,0,19,19,19,19,19,19,19,19,19,19,19,19],"f":"````````````````````{ce{}{}}000{bb}{dd}{{ce}f{}{}}0{{}b}{{}d}{hc{}}000{hf}0{{bb}j}{{dd}j}{{bl}n}{cc{}}0``{{}h}0<<1<<{c{{A`{e}}}{}{}}000{cAb{}}0>>``````````````>>>>{AdAd}{AfAf}=={{}Ad}{{}Af}<<<<;;{{AdAd}j}{{AfAf}j}{{Adl}n}::``99{ce{}{}}0;0099998800```````````00{hc{}}0{hf}=<2;;:2``22110=<2;;:2","c":[],"p":[[5,"PallasParameters",13],[5,"LegacyPallasParameters",13],[1,"unit"],[1,"usize"],[1,"bool"],[5,"Formatter",147],[8,"Result",147],[6,"Result",148],[5,"TypeId",149],[5,"VestaParameters",65],[5,"LegacyVestaParameters",65],[8,"Pallas",13],[8,"LegacyPallas",13],[8,"ProjectivePallas",13],[8,"Vesta",65],[8,"LegacyVesta",65],[8,"ProjectiveVesta",65],[5,"FpParameters",119],[5,"FqParameters",133]],"b":[]}],\
["mina_hasher",{"doc":"Mina hasher","t":"RKIKKEEEHHMMNMNMCMCMMFIINNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["D","DomainParameter","Fp","Hashable","Hasher","PoseidonHasherKimchi","PoseidonHasherLegacy","ROInput","create_kimchi","create_legacy","digest","domain_string","hash","init","init_and_hash","into_bytes","poseidon","reset","roinput","to_roinput","update","Poseidon","PoseidonHasherKimchi","PoseidonHasherLegacy","borrow","borrow_mut","deref","deref_mut","digest","drop","from","init","init","into","reset","try_from","try_into","type_id","update","vzip","ROInput","append_bool","append_bytes","append_field","append_hashable","append_roinput","append_scalar","append_u32","append_u64","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","equivalent","fmt","from","init","into","new","to_bytes","to_fields","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"mina_hasher"],[21,"mina_hasher::poseidon"],[40,"mina_hasher::roinput"],[71,"alloc::string"],[72,"core::option"],[73,"alloc::vec"],[74,"mina_poseidon::constants"],[75,"core::result"],[76,"core::any"],[77,"mina_curves::pasta::fields::fq"],[78,"core::fmt"],[79,"core::fmt"]],"d":["Generic domain string argument type","The domain parameter trait is used during hashing to …","","Interface for hashable objects","Interface for hashing <code>Hashable</code> inputs","","","","Create an experimental kimchi hasher context","Create a legacy hasher context","Obtain has result output","Generate unique domain string of length <code>&lt;= 20</code>.","Hash input and obtain result output","Set the initial state based on domain separation string …","Initialize state, hash input and obtain result output","Conversion into vector of bytes","Mina Poseidon hasher","Restore the initial state that was set most recently","Random oracle input structures and algorithms","Serialization to random oracle input","Consume hash <code>input</code>","Poseidon hasher context","Poseidon hasher type with experimental kimchi plonk sponge …","Poseidon hasher type with legacy plonk sponge constants","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","Random oracle input structure","Append a single bit","Append bytes","Append a base field element","Append a <code>Hashable</code> input","Append another random oracle input","Append a scalar field element","Append a 32-bit unsigned integer","Append a 64-bit unsigned integer","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new empty random oracle input","Serialize random oracle input to bytes","Serialize random oracle input to vector of base field …","","","","",""],"i":[2,0,0,0,0,0,0,0,0,0,4,2,4,4,4,8,0,4,0,2,4,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"f":"````````{{}{{b{c}}}d}{{}{{f{c}}}d}{hj}{c{{n{l}}}{}}{{hc}jd}{hh}1{A`{{Ad{Ab}}}}`1`{{{d{}{{Af{c}}}}}AhA`}{{hc}hd}```{ce{}{}}0{Ajc{}}0{{{Al{ce}}}jAnd}{AjB`}{cc{}}{{}Aj}{{{Al{ce}}}hAnd}60{c{{Bb{e}}}{}{}}0{cBd{}}{{{Al{ce}}e}hAnd}9`{{AhBf}Ah}{{Ah{Bh{Ab}}}Ah}{{Ahj}Ah}{{Ahc}Ahd}{{AhAh}Ah}{{AhBj}Ah}{{AhBl}Ah}{{AhBn}Ah}{ce{}{}}0{AhAh}{{ce}B`{}{}}{{}Ah}{Ajc{}}0{AjB`}{{AhAh}Bf}{{ce}Bf{}{}}{{AhC`}Cb}{cc{}}{{}Aj}:7{Ah{{Ad{Ab}}}}{Ah{{Ad{j}}}}<{c{{Bb{e}}}{}{}}0{cBd{}}>","c":[],"p":[[8,"PoseidonHasherKimchi",21],[10,"Hashable",0],[8,"PoseidonHasherLegacy",21],[10,"Hasher",0],[8,"Fp",0],[5,"String",71],[6,"Option",72],[10,"DomainParameter",0],[1,"u8"],[5,"Vec",73],[17,"D"],[5,"ROInput",40],[1,"usize"],[5,"Poseidon",21],[10,"SpongeConstants",74],[1,"unit"],[6,"Result",75],[5,"TypeId",76],[1,"bool"],[1,"slice"],[8,"Fq",77],[1,"u32"],[1,"u64"],[5,"Formatter",78],[8,"Result",78]],"b":[]}],\
["mina_poseidon",{"doc":"","t":"ECCCCCCTTTTTTFFTTTKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHCCCCHHHHHHHHHPFFKGPMNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNOMNMNOHNOMNONNNNNNNNNNNNNNNSFFKFMNMNMNNNNNNNCMNMNNNNNNNNNNNMNMNNNNHNNNNNNNNNNNOOMNOONNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNN","n":["FqSponge","constants","dummy_values","pasta","permutation","poseidon","sponge","PERM_FULL_MDS","PERM_HALF_ROUNDS_FULL","PERM_INITIAL_ARK","PERM_ROUNDS_FULL","PERM_ROUNDS_PARTIAL","PERM_SBOX","PlonkSpongeConstantsKimchi","PlonkSpongeConstantsLegacy","SPONGE_CAPACITY","SPONGE_RATE","SPONGE_WIDTH","SpongeConstants","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","kimchi_dummy","fp_kimchi","fp_legacy","fq_kimchi","fq_legacy","params","static_params","static_params","params","static_params","static_params","full_round","half_rounds","poseidon_block_cipher","Absorbed","ArithmeticSponge","ArithmeticSpongeParams","Sponge","SpongeState","Squeezed","absorb","absorb","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","constants","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","fmt","fmt","from","from","from","full_round","init","init","init","into","into","into","mds","new","new","reset","reset","round_constants","sbox","serialize","sponge_state","squeeze","squeeze","state","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","CHALLENGE_LENGTH_IN_LIMBS","DefaultFqSponge","DefaultFrSponge","FqSponge","ScalarChallenge","absorb_fq","absorb_fq","absorb_fr","absorb_fr","absorb_g","absorb_g","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","caml","challenge","challenge","challenge_fq","challenge_fq","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","digest","digest","digest_fq","digest_fq","drop","drop","drop","endo_coefficient","fmt","from","from","from","from","init","init","init","into","into","into","last_squeezed","last_squeezed","new","new","sponge","sponge","squeeze","squeeze","squeeze_field","squeeze_limbs","to_field","to_field_with_length","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","CamlScalarChallenge","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","from","from_value","init","into","into_value","ocaml_binding","ocaml_desc","to_owned","try_from","try_into","type_id","unique_id","vzip"],"q":[[0,"mina_poseidon"],[7,"mina_poseidon::constants"],[49,"mina_poseidon::dummy_values"],[50,"mina_poseidon::pasta"],[54,"mina_poseidon::pasta::fp_kimchi"],[56,"mina_poseidon::pasta::fp_legacy"],[57,"mina_poseidon::pasta::fq_kimchi"],[59,"mina_poseidon::pasta::fq_legacy"],[60,"mina_poseidon::permutation"],[63,"mina_poseidon::poseidon"],[134,"mina_poseidon::sponge"],[211,"mina_poseidon::sponge::caml"],[234,"core::result"],[235,"core::any"],[236,"core::fmt"],[237,"ark_ff::fields"],[238,"core::str::traits"],[239,"mina_curves::pasta::fields::fp"],[240,"mina_curves::pasta::fields::fq"],[241,"alloc::vec"],[242,"core::clone"],[243,"core::default"],[244,"serde::de"],[245,"core::fmt"],[246,"ark_ec::models"],[247,"ark_ec::models::short_weierstrass_jacobian"],[248,"ark_ff::fields"],[249,"core::convert"],[250,"ocaml::value"],[251,"ocaml::value"],[252,"core::option"],[253,"alloc::string"]],"d":["","","","","The permutation module contains the function implementing …","This module implements Poseidon Hash Function primitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Placeholder dummy value for the kimchi configuration, …","","","","","","the fp sponge params","the legacy fp sponge params","","the fq sponge params","the legacy fq sponge params","Apply a full round of the permutation. A full round is …","","","","","","Cryptographic sponge interface - for hashing an arbitrary …","","","Absorb an array of field elements <code>x</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new cryptographic sponge using arithmetic sponge …","","Reset the sponge back to its initial state (as if it were …","","","","","","Squeeze an output from the sponge","","","","","","","","","","","","","","","","","","","","","Abstracts a sponge operating on a base field <code>Fq</code> of the …","A challenge which is used as a scalar on a group element …","Absorbs a base field element. This operation is the most …","","Absorbs an element of the scalar field <code>Fr</code> — it is done …","","Absorbs a base field point, that is a pair of <code>Fq</code> elements.","","","","","","","","","Squeeze out a challenge in the scalar field. Implemented by","","Squeeze out a base field challenge. This operation is the …","","","","","","","","","","","","Returns a scalar field digest using the binary …","","Returns a base field digest by squeezing the underlying …","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a new sponge.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,18,18,18,18,18,18,0,0,18,18,18,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,19,16,17,19,7,17,19,7,17,19,7,17,19,7,17,17,7,19,7,17,19,7,17,7,19,7,17,19,7,19,7,17,17,19,7,17,19,7,17,7,16,17,16,17,7,0,7,17,16,17,17,19,7,17,19,7,17,19,7,17,19,7,17,19,7,17,0,0,0,0,0,26,27,26,27,26,27,34,30,27,34,30,27,0,26,27,26,27,30,27,30,27,34,30,27,34,30,27,26,27,26,27,34,30,27,0,30,34,30,30,27,34,30,27,34,30,27,34,27,26,27,34,27,34,27,27,27,30,30,30,27,34,30,27,34,30,27,34,30,27,34,30,27,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32],"f":"```````````````````{ce{}{}}000{bb}{dd}{{ce}f{}{}}0{hc{}}000{hf}0{cc{}}0{{}h}07777{c{{j{e}}}{}{}}000{cl{}}099{{}{{n{e}}}A`{Ab{Af{}{{Ad{c}}}}}}````{{}{{n{Ah}}}}00{{}{{n{Aj}}}}00{{{n{c}}{Al{c}}h}fAb}{{{n{c}}{An{c}}}fAb}{{{n{c}}{Al{c}}}fAb}``````{{B`{An{c}}}fAb}{{{Bb{ce}}{An{c}}}fAbBd}{ce{}{}}00000{BfBf}{{{n{c}}}{{n{c}}}{BhAb}}{{{Bb{ce}}}{{Bb{ce}}}{BhAb}{BhBd}}{{ce}f{}{}}00`{{}{{n{c}}}{BjAb}}{hc{}}00000{c{{j{{n{e}}}}}BlAb}{hf}00{{BfBn}C`}{{{n{c}}Bn}C`{A`Ab}}{cc{}}00{{{Bb{ce}}h}fAbBd}{{}h}00===`{{{n{c}}}B`Ab}{{{n{c}}}{{Bb{ce}}}AbBd}{B`f}{{{Bb{ce}}}fAbBd}`{ccAb}{{{n{c}}e}jAbCb}`{B`c{}}{{{Bb{ce}}}cAbBd}`{ce{}{}}00{c{{j{e}}}{}{}}00000{cl{}}00222`````{{Cd{An{c}}}fAb}{{{Cf{ce}}An}fChBd}{{Cd{An{c}}}f{}}10{{{Cf{ce}}{An{{Cj{c}}}}}fChBd}666666`{Cdc{}}{{{Cf{ce}}}{}ChBd}{CdcAb}1{{{Cl{c}}}{{Cl{c}}}Bh}{{{Cf{ce}}}{{Cf{ce}}}{BhCh}{BhBd}}{{ce}f{}{}}0{hc{}}000006545{hf}00{{}cCn}{{{Cl{c}}Bn}C`A`}{cc{}}{{{D`{e}}}{{Cl{c}}}{}{{Db{c}}}}11{{}h}00{ce{}{}}00``{{{n{c}}}CdAb}{n{{Cf{ce}}}ChBd}``{{{Dd{ce}}h}cCnBd}{{{Cf{ce}}h}{}ChBd}{{{Cf{ce}}}{}ChBd}{{{Cf{ce}}h}{{Al{Df}}}ChBd}{{{Cl{c}}c}cCn}{{{Cl{c}}hc}cCn}88{c{{j{e}}}{}{}}00000{cl{}}00:::`::{{{D`{c}}}{{D`{c}}}Bh}{{ce}f{}{}}{hc{}}0{hf}{{{D`{c}}Bn}C`A`}{{{Cl{c}}}{{D`{e}}}{}{{Dh{c}}}}{cc{}}{Dj{{D`{c}}}Dl}{{}h}{ce{}{}}{{{D`{c}}Dn}DjE`}{{Eb{Ef{Ed}}Eh}Ej}{{Eb{An{Ed}}}Ej}3>>={{}El}4","c":[],"p":[[5,"PlonkSpongeConstantsLegacy",7],[5,"PlonkSpongeConstantsKimchi",7],[1,"unit"],[1,"usize"],[6,"Result",234],[5,"TypeId",235],[5,"ArithmeticSpongeParams",63],[10,"Debug",236],[10,"Field",237],[17,"Err"],[10,"FromStr",238],[8,"Fp",239],[8,"Fq",240],[5,"Vec",241],[1,"slice"],[10,"Sponge",63],[5,"ArithmeticSponge",63],[10,"SpongeConstants",7],[6,"SpongeState",63],[10,"Clone",242],[10,"Default",243],[10,"Deserializer",244],[5,"Formatter",236],[8,"Result",236],[10,"Serializer",245],[10,"FqSponge",134],[5,"DefaultFqSponge",134],[10,"SWModelParameters",246],[5,"GroupAffine",247],[5,"ScalarChallenge",134],[10,"PrimeField",237],[5,"CamlScalarChallenge",211],[10,"Into",248],[5,"DefaultFrSponge",134],[1,"u64"],[10,"From",248],[6,"Value",249],[10,"FromValue",249],[5,"OCamlRuntime",250],[10,"IntoValue",249],[5,"Env",251],[1,"str"],[6,"Option",252],[1,"bool"],[5,"String",253],[1,"u128"]],"b":[]}],\
["mina_signer",{"doc":"Mina signer","t":"IEIEPGEIEEEKPNNNNHHNNNNNONNNCCCCMCNNNNMNOOPFGPPPIPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNPPPPPFPPSPPFGIPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNOFNNNNNNNNNNNNNNPSPIFGPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNOONNNNNN","n":["BaseField","CompressedPubKey","CurvePoint","Keypair","MAINNET","NetworkId","PubKey","ScalarField","Schnorr","SecKey","Signature","Signer","TESTNET","borrow","borrow_mut","clone","clone_into","create_kimchi","create_legacy","deref","deref_mut","drop","fmt","from","infinity","init","into","into_bytes","keypair","pubkey","schnorr","seckey","sign","signature","to_owned","try_from","try_into","type_id","verify","vzip","x","y","Err","Keypair","KeypairError","NonCurvePoint","Ok","PublicKey","Result","SecretKey","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_bytes","from_hex","from_parts_unsafe","from_secret_key","get_address","init","init","into","into","public","rand","source","to_bytes","to_hex","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AddressBase58","AddressChecksum","AddressLength","AddressRawByteLength","AddressVersion","CompressedPubKey","Err","Hex","MINA_ADDRESS_LEN","NonCurvePoint","Ok","PubKey","PubKeyError","Result","SecKey","XCoordinate","XCoordinateBytes","YCoordinateBytes","YCoordinateParity","YCoordinateParityBytes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","empty","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from_address","from_address","from_bytes","from_bytes","from_hex","from_hex","from_point_unsafe","from_secret_key","from_secret_key","init","init","init","into","into","into","into_address","into_address","into_compressed","into_point","is_odd","point","to_bytes","to_bytes","to_hex","to_hex","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","x","Schnorr","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","sign","try_from","try_into","type_id","verify","vzip","Err","MINA_SEC_KEY_LEN","Ok","Result","SecKey","SecKeyError","SecretKeyBase58","SecretKeyBytes","SecretKeyChecksum","SecretKeyHex","SecretKeyLength","SecretKeyVersion","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from_base58","from_bytes","from_hex","init","init","into","into","into_scalar","new","rand","scalar","to_base58","to_bytes","to_hex","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Signature","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","fmt","fmt","from","init","into","new","rx","s","to_owned","to_string","try_from","try_into","type_id","vzip"],"q":[[0,"mina_signer"],[42,"mina_signer::keypair"],[102,"mina_signer::pubkey"],[201,"mina_signer::schnorr"],[216,"mina_signer::seckey"],[276,"mina_signer::signature"],[300,"mina_hasher"],[301,"core::fmt"],[302,"core::fmt"],[303,"core::result"],[304,"core::any"],[305,"alloc::string"],[306,"rand_core"],[307,"rand_core"],[308,"core::option"]],"d":["Base field element type","","Affine curve point type","","Id for mainnet","Mina network (or blockchain) identifier","","Scalar field element type","","","","Interface for signed objects","Id for all testnets","","","","","Create an experimental kimchi signer context with domain …","Create a legacy signer context with domain parameters …","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Keypair structures and algorithms","Public key structures and algorithms","Mina Schnorr signature scheme","Secret key structures and helpers","Sign <code>input</code> (see <code>Hashable</code>) using keypair <code>kp</code> and return the …","Mina signature structure and associated helpers","","","","","Verify that the signature <code>sig</code> on <code>input</code> (see <code>Hashable</code>) is …","","","","Contains the error value","Keypair structure","Keypair error","point not on curve","Contains the success value","Public key error","Keypair result","Invalid secret key","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Deserialize keypair from secret key bytes","Deserialize keypair from secret key hex","Create keypair from scalar field <code>secret</code> element and curve …","Create keypair from secret key","Obtain the Mina address corresponding to the keypair’s …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Public key","Generate random keypair","","Deserialize keypair into bytes","Deserialize keypair into hex","","","","","","","","","","","","","Invalid address base58","Invalid address checksum","Invalid address length","Invalid raw address bytes length","Invalid address version","Compressed public keys consist of x-coordinate and …","Contains the error value","Invalid hex","Length of Mina addresses","Invalid y-coordinate parity","Contains the success value","Public key","Public key errors","Public key Result","Invalid secret key","Invalid x-coordinate","Invalid x-coordinate bytes","Point not on curve","Invalid y-coordinate parity","Invalid y-coordinate","","","","","","","","","","","","","","","","","","","","","","The empty <code>CompressedPubKey</code> value that is used as <code>public_key</code>…","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize Mina address into public key","Deserialize Mina address into compressed public key (via …","Deserialize public key from bytes","Deserialize compressed public key from bytes","Deserialize public key from hex","Deserialize compressed public key from hex","Create public key from curve point Note: Does not check …","Create public key from a secret key","Create compressed public key from a secret key","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Serialize public key into corresponding Mina address","Serialize compressed public key into corresponding Mina …","Convert public key into compressed public key","Convert public key into curve point","Parity of y-coordinate","Borrow public key as curve point","Deserialize public key into bytes","Deserialize compressed public key into bytes","Deserialize public key into hex","Deserialize compressed public key into hex","","","","","","","","","","","","","","","","","","X-coordinate","Schnorr signer context for the Mina signature algorithm","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Contains the error value","Secret key length","Contains the success value","Keypair result","Secret key","Keypair error","Invalid base58 secret key","Invalid secret key bytes","Invalid secret key checksum","Invalid secret key hex","Invalid secrey key length","Invalid secret key version","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize base58 encoded secret key","Deserialize secret key from bytes","Deserialize secret key from hex","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert secret key into scalar field element","Create secret key from scalar field element","Generate a random secret key","Borrows secret key as scalar field element","Deserialize secret key into base58","Deserialize secret key into bytes","Deserialize secret key into hex","","","","","","","","","","","","Signature structure","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new signature","Base field component","Scalar field component","","","","","",""],"i":[0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,23,1,1,1,0,0,0,0,3,0,1,1,1,1,3,1,23,23,20,0,0,16,20,16,0,16,16,10,16,10,16,10,16,10,16,10,16,10,16,10,16,10,16,10,16,16,10,10,16,16,16,10,10,10,10,10,10,16,10,16,10,10,10,16,10,10,16,10,16,10,16,10,16,10,16,10,16,10,17,17,17,17,17,0,31,17,0,17,31,0,0,0,17,17,17,17,17,17,17,14,30,17,14,30,17,14,30,17,14,30,17,14,30,17,14,30,17,14,30,30,17,14,30,17,14,30,17,17,14,14,30,17,14,30,14,30,14,30,14,30,14,14,30,17,14,30,17,14,30,14,30,14,14,30,14,14,30,14,30,17,14,30,17,14,17,14,30,17,14,30,17,14,30,17,14,30,30,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,0,33,0,0,0,18,18,18,18,18,18,18,24,18,24,18,24,18,24,18,24,18,24,18,24,18,24,18,24,18,18,24,18,24,24,24,24,18,24,18,24,24,24,24,24,24,24,24,18,24,18,18,24,18,24,18,24,18,24,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"f":"`````````````{ce{}{}}0{bb}{{ce}d{}{}}{{}{{`{{f{c}}}}}h}0{jc{}}0{jd}{{bl}n}{cc{}}`{{}j}8{b{{Ab{A`}}}}````{{fAdc}Afh}`:{c{{Ah{e}}}{}{}}0{cAj{}}{{fAfAlc}Anh}=``````````===={B`B`}{AdAd}==;;;;::{{B`B`}An}{{AdAd}An}{{ce}An{}{}}0{{B`l}n}0{{Adl}n}0{BbB`}>{BdB`}?{{{Bf{A`}}}{{Bh{Ad}}}}{Bj{{Bh{Ad}}}}{{BlBn}Ad}{C`{{Bh{Ad}}}}{AdCb}{{}j}0{ce{}{}}0`{c{{Bh{Ad}}}{CdCf}}{B`{{Cj{Ch}}}}{Ad{{Ab{A`}}}}533{cCb{}}0{c{{Ah{e}}}{}{}}000{cAj{}}066````````````````````666666{BbBb}{AlAl}{ClCl}{{ce}d{}{}}00{jc{}}00000{jd}00{{}Cl}{{BbBb}An}{{AlAl}An}{{ClCl}An}{{ce}An{}{}}00{{Bbl}n}0{{All}n}0{{Cll}n}{cc{}}00{Bj{{Cn{Al}}}}{Bj{{Cn{Cl}}}}{{{Bf{A`}}}{{Cn{Al}}}}{{{Bf{A`}}}{{Cn{Cl}}}}32{BnAl}{C`{{Cn{Al}}}}{C`Cl}{{}j}00{ce{}{}}00{AlCb}{ClCb}{AlCl}{AlBn}`0{Al{{Ab{A`}}}}{Cl{{Ab{A`}}}}54666{cCb{}}0{c{{Ah{e}}}{}{}}00000{cAj{}}00999``99{jc{}}0{jd}{cc{}}=<{{{D`{c}}Adc}Afh}554{{{D`{c}}AfAlc}Anh}>````````````>>>>{BdBd}{C`C`}{{ce}d{}{}}0777766{{BdBd}An}{{C`C`}An}{{ce}An{}{}}0{{Bdl}n}0{{C`l}n}::{Bj{{Db{C`}}}}{{{Bf{A`}}}{{Db{C`}}}}1{{}j}0{ce{}{}}0{C`Bl}{BlC`}{cC`{CdCf}}2{C`Cb}{C`{{Ab{A`}}}}155{cCb{}}{c{{Ah{e}}}{}{}}000{cAj{}}088`88{AfAf}{{ce}d{}{}}{jc{}}0{jd}{{AfAf}An}{{ce}An{}{}}{{Afl}n}0{cc{}}{{}j}{ce{}{}}{{DdBl}Af}``1=<<;1","c":[],"p":[[6,"NetworkId",0],[1,"unit"],[10,"Signer",0],[10,"Hashable",300],[1,"usize"],[5,"Formatter",301],[8,"Result",301],[1,"u8"],[5,"Vec",302],[5,"Keypair",42],[5,"Signature",276],[6,"Result",303],[5,"TypeId",304],[5,"PubKey",102],[1,"bool"],[6,"KeypairError",42],[6,"PubKeyError",102],[6,"SecKeyError",216],[1,"slice"],[8,"Result",42],[1,"str"],[8,"ScalarField",0],[8,"CurvePoint",0],[5,"SecKey",216],[5,"String",305],[10,"RngCore",306],[10,"CryptoRng",306],[10,"Error",307],[6,"Option",308],[5,"CompressedPubKey",102],[8,"Result",102],[5,"Schnorr",201],[8,"Result",216],[8,"BaseField",0]],"b":[[68,"impl-Display-for-KeypairError"],[69,"impl-Debug-for-KeypairError"],[70,"impl-Debug-for-Keypair"],[71,"impl-Display-for-Keypair"],[72,"impl-From%3CPubKeyError%3E-for-KeypairError"],[74,"impl-From%3CSecKeyError%3E-for-KeypairError"],[150,"impl-Display-for-PubKeyError"],[151,"impl-Debug-for-PubKeyError"],[152,"impl-Debug-for-PubKey"],[153,"impl-Display-for-PubKey"],[246,"impl-Debug-for-SecKeyError"],[247,"impl-Display-for-SecKeyError"],[286,"impl-Debug-for-Signature"],[287,"impl-Display-for-Signature"]]}],\
["o1_utils",{"doc":"A collection of utility functions and constants that can …","t":"EEEEEEEEEECCCCCCCCCCCCCFNNNNNNNNNNNNNNNKMMKMMMFNNONNNNNNNNNNONNNNNFNNNNNNNNNNOONNNNKMMMMKMMMMKPPPPKGPPKIKMNNNNNNNNNNNNNMMMMMHNNNNNNMMMMNNNNMMNNFKNNNNNNNNNNNNNNNNNNONNNNNNMNMNMNNNNKTNHHFNNNNNNNNNCNNNNNHHH","n":["BigUintFieldHelpers","BigUintHelpers","BitwiseOps","ChunkedEvaluations","ExtendedDensePolynomial","ExtendedEvaluations","FieldHelpers","ForeignElement","RandomField","Two","adjacent_pairs","biguint_helpers","bitwise_operations","chunked_evaluations","chunked_polynomial","dense_polynomial","evaluations","field_helpers","foreign_field","hasher","math","serialization","tests","AdjacentPairs","borrow","borrow_mut","deref","deref_mut","drop","from","from","init","into","into_iter","next","try_from","try_into","type_id","vzip","BigUintHelpers","bitlen","from_hex","BitwiseOps","bitwise_and","bitwise_not","bitwise_xor","ChunkedEvaluations","borrow","borrow_mut","chunks","clone","clone_into","deref","deref_mut","deserialize","drop","from","init","into","serialize","size","to_owned","try_from","try_into","type_id","vzip","ChunkedPolynomial","borrow","borrow_mut","deref","deref_mut","drop","evaluate_chunks","from","init","into","linearize","polys","size","try_from","try_into","type_id","vzip","ExtendedDensePolynomial","eval_polynomial","scale","shiftr","to_chunked_polynomial","ExtendedEvaluations","pow","scale","shift","square","BigUintFieldHelpers","DecodeHex","DeserializeBits","DeserializeBytes","Err","FieldHelpers","FieldHelpersError","FromBigToField","Ok","RandomField","Result","Two","bits_to_field","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","fmt","fmt","from","from_biguint","from_bits","from_bytes","from_hex","gen","gen_field_with_bits","i32_to_field","init","into","modulus_biguint","size_in_bytes","to_bigint_positive","to_biguint","to_bits","to_bytes","to_field","to_hex","to_owned","to_string","try_from","try_into","two","two_pow","type_id","vzip","ForeignElement","ForeignFieldHelpers","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","fmt","from","from_be","from_biguint","from_field","index","index_mut","init","into","limbs","neg","new","to_biguint","to_owned","try_from","try_into","two_to_2limb","two_to_2limb","two_to_3limb","two_to_3limb","two_to_limb","two_to_limb","type_id","vzip","zero","CryptoDigest","PREFIX","digest","ceil_log2","div_ceil","SerdeAs","borrow","borrow_mut","deref","deref_mut","deserialize_as","drop","from","init","into","ser","serialize_as","try_from","try_into","type_id","vzip","deserialize","serialize","make_test_rng"],"q":[[0,"o1_utils"],[23,"o1_utils::adjacent_pairs"],[39,"o1_utils::biguint_helpers"],[42,"o1_utils::bitwise_operations"],[46,"o1_utils::chunked_evaluations"],[66,"o1_utils::chunked_polynomial"],[83,"o1_utils::dense_polynomial"],[88,"o1_utils::evaluations"],[93,"o1_utils::field_helpers"],[143,"o1_utils::foreign_field"],[179,"o1_utils::hasher"],[182,"o1_utils::math"],[184,"o1_utils::serialization"],[200,"o1_utils::serialization::ser"],[202,"o1_utils::tests"],[203,"core::iter::traits::iterator"],[204,"core::iter::traits::collect"],[205,"core::option"],[206,"core::marker"],[207,"core::result"],[208,"core::any"],[209,"ark_ff::fields"],[210,"core::clone"],[211,"serde::de"],[212,"serde::ser"],[213,"alloc::vec"],[214,"ark_ff::fields"],[215,"ark_ff::fields"],[216,"core::fmt"],[217,"num_bigint::bigint"],[218,"alloc::string"],[219,"core::cmp"],[220,"ark_serialize"],[221,"ark_serialize"]],"d":["","","","","","","","","","","This module hosts the AdjacentPairs type, which can be …","This module provides a set of functions to perform bit …","This module provides a set of functions to perform bit …","This module contains a type ChunkedEvaluations,","This module contains a type ChunkedPolynomial, and a …","This adds a few utility functions for the DensePolynomial …","This adds a few utility functions for the Evaluations …","Useful helper methods to extend ark_ff::Field.","Describes helpers for foreign field arithmetics Generic …","This module provides the CryptoDigest trait, which …","This modules implements some math helper functions.","This adds a few utility functions for serializing and …","Utils only for testing","You can create a new AdjacentPairs from an iterator using:","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","Helpers for BigUint","Returns the minimum number of bits required to represent a …","Creates a BigUint from an hexadecimal string in big endian","Bitwise operations","Conjunction of the bits of two BigUint inputs for a given …","Negate the bits of a Self input If it provides a larger …","Bitwise XOR of two BigUint inputs","This struct contains multiple chunk evaluations.","","","The chunk evaluations.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Each chunk polynomial has degree <code>size-1</code>.","","","","","","This struct contains multiple chunk polynomials with …","","","","","","This function evaluates polynomial in chunks.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Multiplies the chunks of a polynomial with powers of …","The chunk polynomials.","Each chunk polynomial has degree <code>size-1</code>.","","","","","An extension for the DensePolynomial type.","<code>eval_polynomial(coeffs, x)</code> evaluates a polynomial given …","This function “scales” (multiplies all the …","Shifts all the coefficients to the right.","Convert a polynomial into chunks. Implementors must ensure …","An extension for the Evaluations type.","Raise each evaluation to some power <code>pow</code>","This function “scales” (multiplies) a polynomial with …","Utility function for shifting poly along domain coordinate","Square each evaluation","Field element wrapper for BigUint","","","","Contains the error value","Field element helpers Unless otherwise stated everything …","Field helpers error","","Contains the success value","Helper to generate random field elements","Result alias using FieldHelpersError","Helper to obtain two","Create a new field element from this field elements bits","","","","","","","","","","","","Returns the argument unchanged.","Deserialize from BigUint","Deserialize from bits","Deserialize from bytes","Deserialize from little-endian hex","Initialize a random input with a random value of given …","Generates a random field element of up to a given number …","Converts an i32 into a Field","","Calls <code>U::from(self)</code>.","Get the modulus as <code>BigUint</code>","Field size in bytes","Serialize field element f to a (positive) BigInt directly.","Serialize field element to a BigUint","Serialize to bits","Serialize to bytes","Convert BigUint into PrimeField element","Serialize to hex","","","","","Value two","Power of two","","","Represents a foreign field element Represents a foreign …","Foreign field helpers for <code>B</code> the limb size.","","","","","","","","","","","Returns the argument unchanged.","Initializes a new foreign element from a set of bytes in …","Initializes a new foreign element from a big unsigned …","Initializes a new foreign element from an element in the …","","","","Calls <code>U::from(self)</code>.","limbs in little endian order","Initializes a new foreign element from an absolute <code>BigUint</code> …","Creates a new foreign element from an array containing N …","Obtains the big integer representation of the foreign …","","","","2^{2 * B}","","2^{3 * B}","","2^{B}","","","","Creates a new foreign element representing the value zero","This trait can be implemented on any type that implements …","The domain separation string to use in the hash. This is …","Returns the digest of <code>self</code>. Note: this is implemented as …","Returns ceil(log2(d)) but panics if d = 0.","This function is bound to be stable soon. See …","You can use SerdeAs with serde_with in order to serialize …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","You can use this module for serialization and …","","","","","","You can use this to deserialize an arkworks type with …","You can use this to serialize an arkworks type with serde …","Create a new test rng with a random seed"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,13,13,0,49,49,49,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,25,25,25,25,0,26,26,26,26,0,30,30,30,29,0,0,30,29,0,0,0,28,30,30,30,30,30,30,30,30,30,30,30,30,28,28,28,28,36,36,0,30,30,28,28,28,28,28,28,39,28,30,30,30,30,50,50,30,30,0,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,51,42,51,42,51,42,42,42,42,0,45,45,0,0,0,52,52,52,52,52,52,52,52,52,0,52,52,52,52,52,0,0,0],"f":"````````````````````````{ce{}{}}0{bc{}}0{bd}{cc{}}{g{{f{ce}}}{}{{j{}{{h{c}}}}}{{n{}{{h{c}}{l{e}}}}}}{{}b}55{{{f{ce}}}{{Ab{{A`{cc}}}}}Ad{{j{}{{h{c}}}}}}{c{{Af{e}}}{}{}}0{cAh{}}8`{Ajb}{AlAj}`{{ccb}c{}}{{c{Ab{b}}}c{}}{{cc}c{}}`==`{{{An{c}}}{{An{c}}}{B`Bb}}{{ce}d{}{}}>>{c{{Af{{An{e}}}}}BdB`}>=;{ce{}{}}{{{An{c}}e}AfB`Bf}`1;;:1`11{bc{}}0{bd}{{{Bh{c}}c}{{Bj{c}}}Bl}{cc{}}{{}b}6{{{Bh{c}}c}{{Bn{c}}}Bl}``{c{{Af{e}}}{}{}}0{cAh{}}9`{{{C`{c}}c}cBl}{{Cbc}CbBl}{{Cbb}Cb}{{Cbbb}{{Bh{c}}}Bl}`{{Cdb}Cd}{{Cdc}CdCf}1{CdCd}````````````{{Chbb}{{Cj{c}}}{}}{ce{}{}}0{ClCl}{{ce}d{}{}}{bc{}}0{bd}{{ClCl}Cn}{{ce}Cn{}{}}{{ClD`}Db}0{cc{}}{Dd{{Cj{c}}}B`}{{{C`{Cn}}}{{Cj{c}}}{}}{{{C`{Df}}}{{Cj{c}}}{}}{Al{{Cj{c}}}{}}{{Dh{Ab{c}}{Ab{b}}}c{}}{{Dhb}c{}}{Djc{}}{{}b}{ce{}{}}{{}Dd}2{ChDl}{ChDd}{Ch{{Bj{Cn}}}}{Ch{{Bj{Df}}}}{Dn{{Cj{c}}}B`}{ChE`}7{cE`{}}{c{{Af{e}}}{}{}}0{{}c{}}{Ebc{}}{cAh{}}<``<<{{{Ed{c}}}{{Ed{c}}}{BbBl}}{{ce}d{}{}}{bc{}}0{bd}{{{Ed{c}}{Ed{c}}}Cn{EfBl}}{{ce}Cn{}{}}{{{Ed{c}}D`}DbBl}{cc{}}{{{C`{Df}}}{{Ed{c}}}Bl}{Dd{{Ed{c}}}Bl}{c{{Ed{c}}}B`}{{{Ed{c}}b}eBl{}}0{{}b}{ce{}{}}`{{{Ed{c}}Dd}{{Ed{c}}}Bl}{{{Eh{c}}}{{Ed{c}}}Bl}{{{Ed{c}}}DdBl}3{c{{Af{e}}}{}{}}0{{}c{}}{{}cBl}1010{cAh{}}7{{}{{Ed{c}}}Bl}``{Ej{{Eh{Df}}}}{bb}{{bb}b}`;;{bc{}}0{c{{Af{e}}}BdEl}{bd}{cc{}}{{}b}{ce{}{}}`{{ce}AfEnBf}>>;150{{}F`}","c":[],"p":[[1,"usize"],[1,"unit"],[5,"AdjacentPairs",23],[17,"Item"],[10,"Iterator",203],[17,"IntoIter"],[10,"IntoIterator",204],[1,"tuple"],[6,"Option",205],[10,"Copy",206],[6,"Result",207],[5,"TypeId",208],[10,"BigUintHelpers",39],[1,"str"],[5,"ChunkedEvaluations",46],[10,"PrimeField",209],[10,"Clone",210],[10,"Deserializer",211],[10,"Serializer",212],[5,"ChunkedPolynomial",66],[5,"Vec",213],[10,"Field",209],[5,"DensePolynomial",214],[1,"slice"],[10,"ExtendedDensePolynomial",83],[10,"ExtendedEvaluations",88],[10,"FftField",209],[10,"FieldHelpers",93],[8,"Result",93],[6,"FieldHelpersError",93],[1,"bool"],[5,"Formatter",215],[8,"Result",215],[5,"BigUint",216],[1,"u8"],[10,"RandomField",93],[1,"i32"],[5,"BigInt",217],[10,"BigUintFieldHelpers",93],[5,"String",218],[1,"u64"],[5,"ForeignElement",143],[10,"PartialEq",219],[1,"array"],[10,"CryptoDigest",179],[10,"CanonicalDeserialize",220],[10,"CanonicalSerialize",220],[5,"StdRng",221],[10,"BitwiseOps",42],[10,"Two",93],[10,"ForeignFieldHelpers",143],[5,"SerdeAs",184]],"b":[[115,"impl-Display-for-FieldHelpersError"],[116,"impl-Debug-for-FieldHelpersError"]]}],\
["poly_commitment",{"doc":"","t":"KEKRMMCMMMMCMCCMNMMMCMCMFFKKFRRFHNHHONNNNNNNNCNNNNNNNHHNNHOOONNNNNNNNNNNNNNONNOOOONNNNNNNNNNNNHNNNNNNNNNMOOHHNNNHOHHNMHNNNNNNNNNNNNNNNNNNNFFNNNNNNONNNNNNNNNNNNNNNNNNNNONNNNOONNNNNNNNNONNOOPGNNNNNNNNNNNNNNNNNNFPGPFNNNNNNOONNNHNONNNNNNNNNNNNNNNNNNNNNONNNONNNNNNNNNNNNNNOOFFNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNONNNNNNNNNNNONNNNFNNNNNNNNNNNNNNNNNNNNHNNNNONONNONNNNNNNNNNNNNN","n":["OpenProof","PolyComm","SRS","SRS","add_lagrange_basis","blinding_commitment","chunked","commit","commit_evaluations","commit_evaluations_non_hiding","commit_non_hiding","commitment","create","error","evaluation_proof","get_lagrange_basis","mask","mask_custom","max_poly_size","open","pairing_proof","size","srs","verify","BatchEvaluationProof","BlindedCommitment","CommitmentCurve","EndoCurve","Evaluation","Map","Params","PolyComm","absorb_commitment","add","b_poly","b_poly_coefficients","blinders","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","caml","chunk_blinding","chunk_commitment","clone","clone","clone_into","clone_into","combine","combine_commitments","combine_evaluations","combine_one","combine_one_endo","combined_inner_product","combined_inner_product","commitment","commitment","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","elems","eq","equivalent","evalscale","evaluation_points","evaluations","evaluations","fmt","fmt","from","from","from","from","from","from","init","init","init","init","inner_prod","into","into","into","into","is_empty","len","map","multi_scalar_mul","new","of_coordinates","opening","polyscale","pows","product","scale","serialize","serialize","shift_scalar","sponge","squeeze_challenge","squeeze_prechallenge","sub","to_coordinates","to_group","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","zip","CamlOpeningProof","CamlPolyComm","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","delta","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","from","from","from","from_value","from_value","init","init","into","into","into_value","into_value","lr","ocaml_binding","ocaml_binding","ocaml_desc","ocaml_desc","sg","shifted","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unique_id","unique_id","unshifted","vzip","vzip","z1","z2","BlindersDontMatch","CommitmentError","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","fmt","from","init","into","to_owned","to_string","try_from","try_into","type_id","vzip","Challenges","DensePolynomial","DensePolynomialOrEvaluations","Evaluations","OpeningProof","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chal","chal_inv","challenges","clone","clone_into","combine_polys","default","delta","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","fmt","from","from","from","from","init","init","init","into","into","into","lr","open","prechallenges","serialize","sg","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","z1","z2","PairingProof","PairingSRS","add_lagrange_basis","blinding","blinding_commitment","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","commit","commit_evaluations","commit_evaluations_non_hiding","commit_non_hiding","create","create","create","default","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","full_srs","get_lagrange_basis","init","init","into","into","mask","mask_custom","max_poly_size","open","quotient","serialize","serialize","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verifier_srs","verify","verify","vzip","vzip","SRS","add_lagrange_basis","add_lagrange_basis","blinding_commitment","borrow","borrow_mut","clone","clone_into","commit","commit_evaluations","commit_evaluations_non_hiding","commit_non_hiding","create","create","create_parallel","create_trusted_setup","default","deref","deref_mut","deserialize","drop","endos","eq","equivalent","fmt","from","g","get_lagrange_basis","h","init","into","lagrange_bases","mask","mask_custom","max_degree","max_poly_size","open","prover_polynomials_to_verifier_evaluations","serialize","size","to_owned","try_from","try_into","type_id","verify","vzip"],"q":[[0,"poly_commitment"],[24,"poly_commitment::commitment"],[138,"poly_commitment::commitment::caml"],[188,"poly_commitment::error"],[208,"poly_commitment::evaluation_proof"],[269,"poly_commitment::pairing_proof"],[330,"poly_commitment::srs"],[376,"ark_poly::domain::radix2"],[377,"ark_poly::polynomial::univariate::dense"],[378,"rand_core"],[379,"rand_core"],[380,"alloc::vec"],[381,"core::option"],[382,"core::result"],[383,"ark_poly::domain"],[384,"core::clone"],[385,"mina_poseidon::sponge"],[386,"ark_ff::fields"],[387,"ark_ff::fields"],[388,"mina_poseidon::sponge"],[389,"ark_serialize"],[390,"ark_serialize"],[391,"core::fmt"],[392,"core::fmt"],[393,"core::ops::function"],[394,"ark_ec::models"],[395,"groupmap"],[396,"core::iter::traits::iterator"],[397,"serde::ser"],[398,"serde::ser"],[399,"core::marker"],[400,"ocaml::value"],[401,"ocaml::value"],[402,"ocaml::value"],[403,"alloc::string"],[404,"core::default"],[405,"core::convert"]],"d":["","","","","","Get the group element used for blinding commitments","","Commits a polynomial, potentially splitting the result in …","","","This function commits a polynomial using the SRS’ basis …","This module implements Dlog-based polynomial commitment …","for now needed by snarky-rs","","","Retrieve the precomputed Lagrange basis for the given …","Turns a non-hiding polynomial commitment into a hidding …","Same as SRS::mask except that you can pass the blinders …","The maximum polynomial degree that can be committed to","","","","This module implements the Marlin structured reference …","","Contains the batch evaluation","","A useful trait extending AffineCurve for commitments. …","A trait extending CommitmentCurve for endomorphisms. …","Contains the evaluation of a polynomial commitment at a …","","","A polynomial commitment.","","","Returns (1 + chal[-1] x)(1 + chal[-2] x^2)(1 + chal[-3] …","","","","","","","","","","","","Multiplies each blinding chunk of f with powers of zeta^n","Multiplies each commitment chunk of f with powers of zeta^n","","","","","","","","Combine where x1 = one","Combine where x1 = one","Computes the linearization of the evaluations of a …","","The commitment of the polynomial being evaluated","","","","","","","","","","","","","","","","","","","scaling factor for polynomials","vector of evaluation points","Contains an evaluation table","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the commitment is empty.","Returns the length of the commitment.","","Performs a multi-scalar multiplication between scalars <code>elm</code> …","","","batched opening proof","scaling factor for evaluation point powers","<code>pows(d, x)</code> returns a vector containing the first <code>d</code> powers …","Returns the product of all the field elements belonging to …","","","","Inside the circuit, we have a specialized scalar …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","vector of rounds of L &amp; R commitments","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Commitment round challenges (endo mapped) and their …","","","","","","","","","","","","","Same as <code>prechallenges</code>, but maps scalar challenges using the","","","Combine the polynomials using <code>polyscale</code>, creating a single …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Vector of rounds of L &amp; R commitments","","Computes a log-sized vector of scalar challenges for …","","A final folded commitment base","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Compute commitments to the lagrange basis corresponding to …","","","","","","","Commits a polynomial, potentially splitting the result in …","","","This function commits a polynomial using the SRS’ basis …","This function creates SRS instance for circuits with …","","This function creates SRS instance for circuits with …","This function creates a trusted-setup SRS instance for …","","","","","","","","","","Returns the argument unchanged.","The vector of group elements for committing to polynomials …","","A group element used for blinding commitments","","Calls <code>U::from(self)</code>.","Commitments to Lagrange bases, per domain size","Turns a non-hiding polynomial commitment into a hidding …","Same as SRS::mask except that you can pass the blinders …","","The maximum polynomial degree that can be committed to","This function opens polynomial commitments in batch plnms: …","This function is a debugging helper.","","","","","","","This function verifies batch of batched polynomial …",""],"i":[0,0,0,20,1,1,0,1,1,1,1,0,1,0,0,1,1,1,1,20,0,1,0,20,0,0,0,0,0,4,4,0,0,11,0,0,7,31,24,11,7,31,24,11,7,0,11,11,11,7,11,7,30,0,0,30,30,0,24,31,7,31,24,11,7,31,24,11,7,11,7,31,24,11,7,11,11,11,24,24,31,24,11,7,31,24,11,11,11,7,31,24,11,7,0,31,24,11,7,11,11,11,11,11,4,24,24,0,0,11,11,7,0,24,0,0,11,4,0,11,7,31,24,11,7,31,24,11,7,31,24,11,7,31,24,11,7,11,0,0,41,56,41,56,41,41,56,41,56,41,56,41,56,41,41,41,41,56,56,41,56,41,56,41,56,41,56,56,41,56,41,56,56,41,41,41,56,41,56,41,56,41,56,41,41,56,56,56,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,16,0,16,0,16,65,55,16,65,55,65,65,55,55,55,0,55,55,16,65,55,16,65,55,55,16,65,55,55,16,65,55,55,16,65,55,16,65,55,55,55,55,55,55,55,16,65,55,16,65,55,16,65,55,55,16,65,55,55,55,0,0,69,74,69,74,69,74,69,74,69,74,69,69,69,69,69,74,69,69,74,69,74,69,74,69,74,69,74,69,74,69,74,69,69,69,74,69,74,69,69,69,69,74,74,74,69,69,74,69,74,69,74,69,74,69,69,74,74,74,69,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75],"f":"````{{bd}f}{bch}`{{bjlc}{{n{e}}}{A`Ab}h}{{bd{Ad{d}}c}{{n{e}}}{A`Ab}h}{{bd{Ad{d}}}{{Af{c}}}h}{{bjl}{{Af{c}}}h}`{lb}``{{bl}{{Aj{{Ah{{Af{c}}}}}}}h}{{b{Af{c}}e}{{n{c}}}h{A`Ab}}{{b{Af{c}}Af}{{An{{n{c}}Al}}}h}{bl}{{c{Bd{{Bb{{B`{e}}Af}}}}Bdik}{{Bh{}{{Bf{c}}}}}{{b{g}}}Bjh{Bl{Bn{g}}}{A`Ab}}`1`{{c{Bd{{C`{eg{Bh{}{{Bf{c}}}}}}}}i}Cb{{b{e}}}h{{Bn{e}}}{A`Ab}}````````{{i{Af{e}}}fCdBl{CfCh}{{Bn{ceg}}}}{{{Af{c}}{Af{c}}}{{Af{c}}}Cj}{{{Bd{c}}c}cCd}{{{Bd{c}}}{{Ah{c}}}Cd}`{ce{}{}}0000000`{{{Af{c}}c}cCd}{{{Af{c}}}{{Af{c}}}h}{{{Af{c}}}{{Af{c}}}Bl}{{{n{c}}}{{n{c}}}{hBl}}{{ce}f{}{}}0{{{Bd{Cl}}{Bd{Cl}}cc}{{Ah{Cl}}}{}}{{{Bd{{Cn{c}}}}Ah{Ah{c}}}fh}{{{Ah{{Cn{c}}}}}Ahh}{{{Bd{Cl}}{Bd{Cl}}c}{{Ah{Cl}}}{}}{{ce{Bd{Cl}}{Bd{Cl}}{D`{c}}}{{Ah{Cl}}}{}{}}{{cc{Bd{{Ah{{Ah{c}}}}}}}cCf}```{lc{}}0000000{c{{An{{Af{e}}}}}Db{DdDf}}{c{{An{{n{e}}}}}Db{hDh}}{lf}000`{{{Af{c}}{Af{c}}}CbDj}{{ce}Cb{}{}}````{{{Af{c}}Dl}DnE`}{{{n{c}}Dl}Dn{hE`}}{cc{}}0{{{Eb{c}}}{{Af{e}}}{}{Cj{Ed{c}}}}1{{{Eb{c}}}{{Af{e}}}{}{Cj{Ed{c}}{Ed{c}}}}2{{}l}000{{{Bd{c}}{Bd{c}}}cCd}{ce{}{}}000{{{Af{c}}}Cb{DdDfBl}}{{{Af{c}}}l{DdDfBl}}{{{Af{c}}g}{{Af{e}}}{DdDfBl}{DdDf}{{Eh{c}{{Ef{e}}}}}}{{{Bd{{Af{c}}}}Bd}{{Af{c}}}Cj}{{{Ah{c}}}{{Af{c}}}{}}{{cc}{{h{}{{Ej{e}}{El{g}}}}}{}En{{F`{c}}}}``{{lc}{{Ah{c}}}Cd}{ecCd{{Fd{}{{Fb{c}}}}}}{{{Af{c}}}{{Af{c}}}Cj}{{{Af{c}}e}An{DdDf}Ff}{{{n{c}}e}An{hFh}Ff}{{}}`{{ci}c{CfCh}Cd{}{{Bn{egc}}}}{i{{D`{g}}}Cd{}Ch{{Bn{ceg}}}}{{{Af{c}}{Af{c}}}{{Af{c}}}Cj}{{{h{}{{Ej{c}}{El{e}}}}}{{Aj{{Bb{gg}}}}}En{{F`{g}}}{}}{{}ch}{ce{}{}}0{c{{An{e}}}{}{}}0000000{cFj{}}0002222{{{Af{c}}{Af{e}}}{{Aj{{Af{{Bb{ce}}}}}}}{FlDdDf}{FlDdDf}}``3333{{{Eb{c}}}{{Eb{c}}}Bl}{{ce}f{}{}}`{lc{}}000{lf}0{{{Eb{c}}Dl}DnE`}{{{Af{c}}}{{Eb{e}}}Cj{{Ed{c}}{Ed{c}}}}{{{Af{c}}}{{Eb{e}}}Cj{{Ed{c}}}}{cc{}}{{{Fn{c}}}{{G`{eg}}}Cj{{Ed{c}}}Ed}1{Gb{{Eb{c}}}Gd}{Gb{{G`{ce}}}GdGd}{{}l}0??{{{Eb{c}}Gf}GbGh}{{{G`{ce}}Gf}GbGhGh}`{{Gj{Aj{Gl}}Cb}Gn}0{{Gj{Bd{Gl}}}Gn}0``{ce{}{}}{c{{An{e}}}{}{}}000{cFj{}}0{{}H`}0`33````33{AlAl}{{ce}f{}{}}{lc{}}0{lf}{{AlDl}Dn}0{cc{}}>99{cGn{}}998:`````::::::``{{{Fn{c}}e}HbCj{{Bn{c}}}}{{{Fn{c}}}{{Fn{c}}}{BlCj}}7{{{Bd{{Bb{{B`{c}}Af}}}}l}{{Bb{j}}}Bj}{{}{{Fn{c}}}{HdCj}}`888888{c{{An{{Fn{e}}}}}Db{DdDfCj}}888{{{Fn{c}}Dl}Dn{E`Cj}}777{{{G`{eg}}}{{Fn{c}}}Cj{{Hf{c}}}Hf}{{}l}00{ce{}{}}00`{{c{Bd{{Bb{{B`{e}}Af}}}}Bdkm}{{Fn{i}}}{}BjCf{{Cj{}{{Hh{g}}}}hCl}{Bl{Bn{i}}}{A`Ab}}{{{Fn{c}}e}{{Ah{D`}}}Cj{{Bn{c}}}}{{{Fn{c}}e}An{DdDfCj}Ff}`3{c{{An{e}}}{}{}}00000{cFj{}}00{{c{Bd{{C`{gi{Fn{g}}}}}}k}Cb{}Cf{{Cj{}{{Hh{e}}}}hCl}{{Bn{g}}}{A`Ab}}666````{{{Hj{i}}d}fCf{{h{}{{Hl{c}}}}}{{h{}{{Hl{c}}}}}{{Ib{}{{Hn{e}}{I`{g}}}}}}`{{{Hj{i}}}eCf{{h{}{{Hl{c}}}}}{{h{}{{Hl{c}}}}}{{Ib{}{{Hn{e}}{I`{g}}}}}}8888{{{Id{c}}}{{Id{c}}}Ib}{{{Hj{c}}}{{Hj{c}}}Ib}{{ce}f{}{}}0{{{Hj{i}}{j{c}}lk}{{n{e}}}Cf{{h{}{{Hl{c}}}}}{{h{}{{Hl{c}}}}}{{Ib{}{{Hn{e}}{I`{g}}}}}{A`Ab}}{{{Hj{i}}d{Ad{d}}k}{{n{e}}}Cf{{h{}{{Hl{c}}}}}{{h{}{{Hl{c}}}}}{{Ib{}{{Hn{e}}{I`{g}}}}}{A`Ab}}{{{Hj{i}}d{Ad{d}}}{{Af{e}}}Cf{{h{}{{Hl{c}}}}}{{h{}{{Hl{c}}}}}{{Ib{}{{Hn{e}}{I`{g}}}}}}{{{Hj{i}}jl}{{Af{e}}}Cf{{h{}{{Hl{c}}}}}{{h{}{{Hl{c}}}}}{{Ib{}{{Hn{e}}{I`{g}}}}}}{{{Hj{i}}{Bd{{Bb{{B`{k}}Af}}}}{Bd{c}}c}{{Aj{{Id{i}}}}}Cf{{h{}{{Hl{c}}}}}{{h{}{{Hl{c}}}}}{{Ib{}{{Hn{e}}{I`{g}}}}}{{Bj{c}}}}{l{{Hj{i}}}Cf{{h{}{{Hl{c}}}}}{{h{}{{Hl{c}}}}}{{Ib{}{{Hn{e}}{I`{g}}}}}}{{cl}{{Hj{i}}}Cf{{h{}{{Hl{c}}}}}{{h{}{{Hl{c}}}}}{{Ib{}{{Hn{e}}{I`{g}}}}}}{{}{{Id{c}}}Ib}{{}{{Hj{c}}}Ib}{lc{}}000{c{{An{{Id{e}}}}}DbIb}{c{{An{{Hj{e}}}}}DbIb}{lf}0{{{Id{c}}Dl}Dn{E`Ib}}{{{Hj{c}}Dl}Dn{E`Ib}}{cc{}}0`{{{Hj{i}}l}{{Aj{{Ah{{Af{e}}}}}}}Cf{{h{}{{Hl{c}}}}}{{h{}{{Hl{c}}}}}{{Ib{}{{Hn{e}}{I`{g}}}}}}{{}l}0{ce{}{}}0{{{Hj{i}}{Af{e}}k}{{n{e}}}Cf{{h{}{{Hl{c}}}}}{{h{}{{Hl{c}}}}}{{Ib{}{{Hn{e}}{I`{g}}}}}{A`Ab}}{{{Hj{i}}{Af{e}}Af}{{An{{n{e}}Al}}}Cf{{h{}{{Hl{c}}}}}{{h{}{{Hl{c}}}}}{{Ib{}{{Hn{e}}{I`{g}}}}}}{{{Hj{i}}}lCf{{h{}{{Hl{c}}}}}{{h{}{{Hl{c}}}}}{{Ib{}{{Hn{e}}{I`{g}}}}}}{{c{Bd{{Bb{{B`{g}}Af}}}}Bdkm}{{Id{Aa}}}{}Cf{{Bj{e}}}{{h{}{{Hl{e}}}}}{Bl{Bn{ie}}}{A`Ab}{{h{}{{Hl{e}}}}}{{Ib{}{{Hn{i}}{I`{o}}}}}}`{{{Id{c}}e}AnIbFf}{{{Hj{c}}e}AnIbFf}366{c{{An{e}}}{}{}}000{cFj{}}0`{{c{Bd{{C`{gi{Id{m}}}}}}o}Cb{}Cf{{h{}{{Hl{e}}}}}{{Bn{ge}}}{{h{}{{Hl{e}}}}}{{Ib{}{{Hn{g}}{I`{k}}}}}{A`Ab}}{{{Id{i}}{Hj{i}}{Ah{{Cn{e}}}}c{Bd{c}}}CbCf{{h{}{{Hl{c}}}}}{{h{}{{Hl{c}}}}}{{Ib{}{{Hn{e}}{I`{g}}}}}}::`{{{If{c}}d}fh}0{{{If{c}}}ch}<<{{{If{c}}}{{If{c}}}Bl}{{ce}f{}{}}{{{If{c}}jle}{{n{c}}}h{A`Ab}}{{{If{c}}d{Ad{d}}e}{{n{c}}}h{A`Ab}}{{{If{c}}d{Ad{d}}}{{Af{c}}}h}{{{If{c}}jl}{{Af{c}}}h}{l{{If{c}}}h}000{{}{{If{c}}}Hd}{lc{}}0{c{{An{{If{e}}}}}Db{DdDf}}{lf}{{}Bb}{{{If{c}}{If{c}}}CbDj}{{ce}Cb{}{}}{{{If{c}}Dl}DnE`}{cc{}}`{{{If{c}}l}{{Aj{{Ah{{Af{c}}}}}}}h}`{{}l}{ce{}{}}`{{{If{c}}{Af{c}}e}{{n{c}}}h{A`Ab}}{{{If{c}}{Af{c}}Af}{{An{{n{c}}Al}}}h}{{{If{c}}}lh}0{{{If{c}}{Bd{{Bb{{B`{e}}Af}}}}Bdgi}{{Fn{c}}}{Clh}Bj{Bl{Bn{c}}}{A`Ab}}{{{If{c}}{Bd{{Bb{{B`{e}}Af}}}}Bd}{{Ah{{Cn{c}}}}}hBj}{{{If{c}}e}An{DdDf}Ff}36{c{{An{e}}}{}{}}0{cFj{}}{{{If{c}}{Bd{{C`{ce{Fn{c}}}}}}g}Cbh{{Bn{c}}}{A`Ab}}9","c":[],"p":[[10,"SRS",0],[5,"Radix2EvaluationDomain",376],[1,"unit"],[10,"CommitmentCurve",24],[5,"DensePolynomial",377],[1,"usize"],[5,"BlindedCommitment",24],[10,"RngCore",378],[10,"CryptoRng",378],[5,"Evaluations",379],[5,"PolyComm",24],[5,"Vec",380],[6,"Option",381],[6,"CommitmentError",188],[6,"Result",382],[6,"DensePolynomialOrEvaluations",208],[1,"tuple"],[1,"slice"],[17,"SRS"],[10,"OpenProof",0],[10,"EvaluationDomain",383],[10,"Clone",384],[10,"FqSponge",385],[5,"BatchEvaluationProof",24],[1,"bool"],[10,"Field",386],[10,"PrimeField",386],[10,"SquareRootField",386],[10,"AffineCurve",387],[10,"EndoCurve",24],[5,"Evaluation",24],[5,"ScalarChallenge",385],[10,"Deserializer",388],[10,"CanonicalDeserialize",389],[10,"CanonicalSerialize",389],[10,"Deserialize",388],[10,"PartialEq",390],[5,"Formatter",391],[8,"Result",391],[10,"Debug",391],[5,"CamlPolyComm",138],[10,"From",392],[17,"Output"],[10,"FnMut",393],[17,"Params"],[17,"Map"],[10,"SWModelParameters",394],[10,"GroupMap",395],[17,"Item"],[10,"Iterator",396],[10,"Serializer",397],[10,"Serialize",397],[5,"TypeId",398],[10,"Copy",399],[5,"OpeningProof",208],[5,"CamlOpeningProof",138],[6,"Value",400],[10,"FromValue",400],[5,"OCamlRuntime",401],[10,"IntoValue",400],[5,"Env",402],[1,"str"],[5,"String",403],[1,"u128"],[5,"Challenges",208],[10,"Default",404],[10,"Into",392],[17,"BaseField"],[5,"PairingSRS",269],[17,"ScalarField"],[17,"G1Affine"],[17,"G2Affine"],[10,"PairingEngine",387],[5,"PairingProof",269],[5,"SRS",330]],"b":[[86,"impl-From%3CCamlPolyComm%3CCamlG%3E%3E-for-PolyComm%3CG%3E"],[88,"impl-From%3C%26CamlPolyComm%3CCamlG%3E%3E-for-PolyComm%3CG%3E"],[154,"impl-From%3C%26PolyComm%3CG%3E%3E-for-CamlPolyComm%3CCamlG%3E"],[155,"impl-From%3CPolyComm%3CG%3E%3E-for-CamlPolyComm%3CCamlG%3E"],[197,"impl-Debug-for-CommitmentError"],[198,"impl-Display-for-CommitmentError"],[287,"impl-SRS%3CG%3E-for-PairingSRS%3CPair%3E"],[288,"impl-PairingSRS%3CPair%3E"],[326,"impl-OpenProof%3CG%3E-for-PairingProof%3CPair%3E"],[327,"impl-PairingProof%3CPair%3E"],[331,"impl-SRS%3CG%3E"],[332,"impl-SRS%3CG%3E-for-SRS%3CG%3E"],[342,"impl-SRS%3CG%3E"],[343,"impl-SRS%3CG%3E-for-SRS%3CG%3E"]]}],\
["snarky_deriver",{"doc":"<strong>This crate is not meant to be imported directly by users</strong>. …","t":"Y","n":["SnarkyType"],"q":[[0,"snarky_deriver"]],"d":["The SnarkyType derive macro. It generates implementations …"],"i":[0],"f":"`","c":[],"p":[],"b":[]}],\
["test_optimism_preimage_read",{"doc":"","t":"H","n":["main"],"q":[[0,"test_optimism_preimage_read"],[1,"std::process"]],"d":[""],"i":[0],"f":"{{}b}","c":[],"p":[[5,"ExitCode",1]],"b":[]}],\
["turshi",{"doc":"This module contains the code that executes a compiled …","t":"EEEEEECCCCCSSSSSSSSSSSSSSSSSSSSSSSSSKMMMMFNNNNNNNNNNNNNNNNNNNNNNFFFFFKNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFKKKMNNNNNNNNMNMNMNMNMNMNMNMNMNMNMNMNMNMNMNMNMNNNNNMNMNMNMNMNMNMNMNNNNNNN","n":["CairoInstruction","CairoMemory","CairoProgram","FlagBits","Offsets","Pointers","flags","helper","memory","runner","word","AP_ADD","AP_ONE","AP_Z2","DST_AP","NUM_FLAGS","OP0_AP","OP1_AP","OP1_DBL","OP1_FP","OP1_VAL","OPC_AEQ","OPC_CALL","OPC_JMP_INC","OPC_RET","PC_ABS","PC_JNZ","PC_REL","PC_SIZ","POS_DST","POS_FLAGS","POS_OP0","POS_OP1","RES_ADD","RES_MUL","RES_ONE","CairoFieldHelpers","lsb","to_hex_be","to_u64","u16_chunk","CairoMemory","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","get_codelen","index","index_mut","init","into","is_empty","len","new","read","to_string","try_from","try_into","type_id","vzip","write","CairoContext","CairoInstruction","CairoProgram","CairoState","CairoStep","Pointers","adr_dst","adr_op0","adr_op1","ap","ap","ap","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","dst","execute","f15","f_ap_add","f_ap_one","f_dst_fp","f_op0_fp","f_op1_ap","f_op1_fp","f_op1_val","f_opc_aeq","f_opc_call","f_opc_ret","f_pc_abs","f_pc_jnz","f_pc_rel","f_res_add","f_res_mul","fin","fp","fp","fp","from","from","from","from","from","ini","init","init","init","init","init","instr","instr","into","into","into","into","into","new","new","new","new","next_pc","off_dst","off_op0","off_op1","op0","op1","pc","pc","pc","res","set_dst","set_op0","set_op1","set_res","size","steps","to_owned","to_owned","to_owned","trace","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","CairoWord","FlagBits","FlagSets","Offsets","ap_up","ap_up","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","dst_reg","dst_reg","f15","f15","f_ap_add","f_ap_add","f_ap_one","f_ap_one","f_dst_fp","f_dst_fp","f_op0_fp","f_op0_fp","f_op1_ap","f_op1_ap","f_op1_fp","f_op1_fp","f_op1_val","f_op1_val","f_opc_aeq","f_opc_aeq","f_opc_call","f_opc_call","f_opc_ret","f_opc_ret","f_pc_abs","f_pc_abs","f_pc_jnz","f_pc_jnz","f_pc_rel","f_pc_rel","f_res_add","f_res_add","f_res_mul","f_res_mul","from","init","into","new","off_dst","off_dst","off_op0","off_op0","off_op1","off_op1","op0_reg","op0_reg","op1_src","op1_src","opcode","opcode","pc_up","pc_up","res_log","res_log","to_owned","try_from","try_into","type_id","vzip","word"],"q":[[0,"turshi"],[11,"turshi::flags"],[36,"turshi::helper"],[41,"turshi::memory"],[64,"turshi::runner"],[192,"turshi::word"],[265,"alloc::string"],[266,"core::fmt"],[267,"core::fmt"],[268,"alloc::vec"],[269,"core::option"],[270,"core::result"],[271,"core::any"],[272,"core::clone"]],"d":["","","","","","","Definition of some constants for easier readability of the …","This module includes some field helpers that are useful …","This module represents the Cairo memory, containing the …","This module represents a run of a Cairo program as a …","The Cairo language works natively for field elements in …","Update ap by adding a number of positions","Update ap by self increment","Update by 2 in call instructions or zero behaviour for …","Destination refers to ap register","Number of Cairo flags","First operand refers to ap register","Second operand refers to ap register","Second operand is double indexing","Second operand refers to fp register","Second operand is immediate value","Operation code is an assert-equal","Operation code is a call","Operation code is a jump or an increment","Operation code is a return","Update pc by an absolute jump","Update pc by a conditional relative jump","Update pc by a relative jump","Default increase of pc by adding instruction size","Position of destination offset of 16 bits within …","Bit position of the beginning of the flags in a Cairo …","Position of first operand offset of 16 bits within …","Position of second operand offset of 16 bits within …","Result is an addition","Result is a multiplication","Result is a single operand","Field element helpers for Cairo","Return field element as byte, if it fits. Otherwise …","Return a field element in hexadecimal in big endian","Return first 64 bits of the field element","Return <code>pos</code>-th 16-bit chunk as another field element","This data structure stores the memory of the program","","","","","","","Returns the argument unchanged.","Get size of the public memory","","","","Calls <code>U::from(self)</code>.","Returns whether the memory is empty (either length 0, or …","Get size of the full memory including dummy 0th entry","Create a new memory structure from a vector of field …","Read element in memory address","","","","","","Write u64 element in memory address","A structure to store auxiliary variables throughout …","This structure stores all the needed information relative …","This struct stores the needed information to run a program","A structure to store program counter, allocation pointer …","A data structure to store a current step of Cairo …","This trait contains functions to obtain the Cairo pointers …","Returns the destination address of the instruction","Returns the first operand address of the instruction","Returns the second operand address of the instruction","Returns the allocation pointer","","","","","","","","","","","","","","","","","","","This function creates an instance of a default CairoContext…","","","","","","","","","","","","","","","","Returns the destination of the instruction","Executes a Cairo step from the current registers","","","","","","","","","","","","","","","","","Outputs the final value of the pointers after the …","Returns the frame pointer","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Outputs the initial value of the pointers after the …","","","","","","This function returns the current word instruction being …","Returns the field element corresponding to the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new Cairo execution step from a step index, a …","Creates a Cairo execution from the public information …","Creates a new triple of pointers","Creates a CairoInstruction","This function computes the next program counter Panics if …","","","","Returns the first operand of the instruction","Returns the second operand of the instruction","Returns the program counter","","","Returns the result of the instruction","This function computes the destination address","This function computes the first operand address","This function computes the second operand address and …","This function computes the value of the result of the …","Returns the size of the instruction","Outputs the total number of steps of the execution carried …","","","","Returns a reference to the set of instructions","","","","","","","","","","","","","","","","","","","","","A Cairo word for the runner. Some words are instructions …","This trait contains methods that decompose a field element …","This trait contains methods that decompose a field element …","This trait contains methods to obtain the offset …","Returns flagset for allocation pointer update","","","","","","","","","Returns flagset for destination register","","Returns bit-flag for 16th position","","Returns bit-flag for allocation counter update being a …","","Returns bit-flag for allocation counter update being a …","","Returns bit-flag for destination register as <code>F</code>","","Returns bit-flag for first operand register as <code>F</code>","","Returns bit-flag for allocation pointer for second …","","Returns bit-flag for frame pointer for second register as <code>F</code>","","Returns bit-flag for immediate value for second register …","","Returns bit-flag for operation being an assert-equal as <code>F</code>","","Returns bit-flag for operation being a call as <code>F</code>","","Returns bit-flag for operation being a return as <code>F</code>","","Returns bit-flag for program counter update being absolute …","","Returns bit-flag for program counter update being …","","Returns bit-flag for program counter update being relative …","","Returns bit-flag for addition operation in right side as <code>F</code>","","Returns bit-flag for multiplication operation in right …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creates a CairoWord from a field element","Returns the destination offset in biased representation","","Returns the first operand offset in biased representation","","Returns the second operand offset in biased representation","","Returns flagset for first operand register","","Returns flagset for second operand register","","Returns flagset for operation code","","Returns flagset for program counter update","","Returns flagset for result logics","","","","","","","Returns the content of the word as a field element"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,16,16,16,17,18,16,21,22,18,20,16,21,22,18,20,16,18,20,16,18,20,16,20,21,22,18,20,16,21,22,18,20,16,21,22,18,20,16,16,21,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,22,17,18,16,21,22,18,20,16,22,21,22,18,20,16,21,16,21,22,18,20,16,21,22,18,16,21,16,16,16,16,16,17,18,16,16,21,21,21,21,16,22,18,20,16,22,21,22,18,20,16,21,22,18,20,16,21,22,18,20,16,21,22,18,20,16,0,0,0,0,24,23,23,23,23,23,23,23,23,24,23,25,23,25,23,25,23,25,23,25,23,25,23,25,23,25,23,25,23,25,23,25,23,25,23,25,23,25,23,25,23,25,23,23,23,23,23,26,23,26,23,26,23,24,23,24,23,24,23,24,23,24,23,23,23,23,23,23,23],"f":"`````````````````````````````````````{bd}{bf}{bh}{{bj}c{}}`{ce{}{}}0{jc{}}0{jl}{{{n{c}}A`}AbAd}{cc{}}{{{n{c}}}jAd}{{{n{c}}c}eAd{}}0{{}j}7{{{n{c}}}AfAd}{{{n{c}}}hAd}{{{Ah{c}}}{{n{c}}}Ad}{{{n{c}}c}{{Aj{c}}}Ad}{cf{}}{c{{Al{e}}}{}{}}0{cAn{}}>{{{n{c}}cc}lAd}``````{{{B`{c}}}cAd}00{Bbc{}}{{{Bd{c}}}cAd}2{ce{}{}}000000000{{{Bd{c}}}{{Bd{c}}}Bf}{{{Bh{c}}}{{Bh{c}}}Bf}{{{B`{c}}}{{B`{c}}}Bf}{{ce}l{}{}}00{{}{{Bh{c}}}Ad}{jc{}}000000000{jl}0000:{{{Bj{c}}}{{B`{c}}}Ad};;;;;;;;;;;;;;;;{{{Bl{c}}}{{Bd{c}}}Ad};:<{cc{}}00001{{}j}0000{{{Bj{c}}}{{Bn{c}}}Ad}?<<<<<{{{n{c}}{Bd{c}}}{{Bj{c}}}Ad}{{{n{c}}h}{{Bl{c}}}Ad}{{ccc}{{Bd{c}}}Ad}{{{Bn{c}}{Bd{c}}{Bh{c}}}{{B`{c}}}Ad}{{{Bj{c}}}{{Aj{c}}}Ad}{{{B`{c}}}cAd}0000{Bbc{}}{{{Bd{c}}}cAd}22{{{Bj{c}}}lAd}0003{{{Bl{c}}}cAd}{ce{}{}}00{{{Bl{c}}}{{Ah{{B`{c}}}}}Ad}{c{{Al{e}}}{}{}}000000000{cAn{}}000033333````{C`d}{{{Bn{c}}}dAd}55{{{Bn{c}}}{{Bn{c}}}Bf}{{ce}l{}{}}{jc{}}0{jl}54{Cbc{}}{{{Bn{c}}}cAd}101010101010101010101010101010{cc{}}{{}j}={c{{Bn{c}}}Ad}{Cdc{}}40404;:;:;:;:;:?==<?4","c":[],"p":[[10,"CairoFieldHelpers",36],[1,"u8"],[5,"String",265],[1,"u64"],[1,"usize"],[1,"unit"],[5,"CairoMemory",41],[5,"Formatter",266],[8,"Result",266],[10,"Field",267],[1,"bool"],[5,"Vec",268],[6,"Option",269],[6,"Result",270],[5,"TypeId",271],[5,"CairoInstruction",64],[10,"Pointers",64],[5,"CairoState",64],[10,"Clone",272],[5,"CairoContext",64],[5,"CairoStep",64],[5,"CairoProgram",64],[5,"CairoWord",192],[10,"FlagSets",192],[10,"FlagBits",192],[10,"Offsets",192]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
