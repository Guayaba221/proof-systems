(function() {var type_impls = {
"kimchi":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Expr%3CC,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#452-593\">source</a><a href=\"#impl-Expr%3CC,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C: <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> + <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a>&lt;Output = C&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, Column: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&gt; <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;C, Column&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.apply_feature_flags\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#589-592\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.apply_feature_flags\" class=\"fn\">apply_feature_flags</a>(&amp;self, features: &amp;<a class=\"struct\" href=\"kimchi/circuits/constraints/struct.FeatureFlags.html\" title=\"struct kimchi::circuits::constraints::FeatureFlags\">FeatureFlags</a>) -&gt; <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;C, Column&gt;</h4></section></div></details>",0,"kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Expr%3CC,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#734-773\">source</a><a href=\"#impl-Expr%3CC,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, Column&gt; <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;C, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cell\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#736-738\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.cell\" class=\"fn\">cell</a>(col: Column, row: <a class=\"enum\" href=\"kimchi/circuits/gate/enum.CurrOrNext.html\" title=\"enum kimchi::circuits::gate::CurrOrNext\">CurrOrNext</a>) -&gt; <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;C, Column&gt;</h4></section></summary><div class=\"docblock\"><p>Convenience function for constructing cell variables.</p>\n</div></details><section id=\"method.double\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#740-742\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.double\" class=\"fn\">double</a>(self) -&gt; Self</h4></section><section id=\"method.square\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#744-746\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.square\" class=\"fn\">square</a>(self) -&gt; Self</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.constant\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#749-751\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.constant\" class=\"fn\">constant</a>(c: C) -&gt; <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;C, Column&gt;</h4></section></summary><div class=\"docblock\"><p>Convenience function for constructing constant expressions.</p>\n</div></details></div></details>",0,"kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Expr%3CConstantExpr%3CF%3E,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#1322-1338\">source</a><a href=\"#impl-Expr%3CConstantExpr%3CF%3E,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: Field, Column: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&gt; <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;<a class=\"enum\" href=\"kimchi/circuits/expr/enum.ConstantExpr.html\" title=\"enum kimchi::circuits::expr::ConstantExpr\">ConstantExpr</a>&lt;F&gt;, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.literal\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#1325-1327\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.literal\" class=\"fn\">literal</a>(x: F) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Convenience function for constructing expressions from literal\nfield elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.combine_constraints\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#1331-1337\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.combine_constraints\" class=\"fn\">combine_constraints</a>(\n    alphas: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;,\n    cs: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Self&gt;\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Combines multiple constraints <code>[c0, ..., cn]</code> into a single constraint\n<code>alpha^alpha0 * c0 + alpha^{alpha0 + 1} * c1 + ... + alpha^{alpha0 + n} * cn</code>.</p>\n</div></details></div></details>",0,"kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Expr%3CConstantExpr%3CF%3E,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#1340-1433\">source</a><a href=\"#impl-Expr%3CConstantExpr%3CF%3E,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: FftField, Column: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>&gt; <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;<a class=\"enum\" href=\"kimchi/circuits/expr/enum.ConstantExpr.html\" title=\"enum kimchi::circuits::expr::ConstantExpr\">ConstantExpr</a>&lt;F&gt;, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_polish\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#1342-1347\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.to_polish\" class=\"fn\">to_polish</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"kimchi/circuits/expr/enum.PolishToken.html\" title=\"enum kimchi::circuits::expr::PolishToken\">PolishToken</a>&lt;F, Column&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Compile an expression to an RPN expression.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.beta\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#1430-1432\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.beta\" class=\"fn\">beta</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>The expression <code>beta</code>.</p>\n</div></details></div></details>",0,"kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Expr%3CConstantExpr%3CF%3E,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#1435-1541\">source</a><a href=\"#impl-Expr%3CConstantExpr%3CF%3E,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: FftField, Column: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"kimchi/circuits/expr/trait.GenericColumn.html\" title=\"trait kimchi::circuits::expr::GenericColumn\">GenericColumn</a>&gt; <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;<a class=\"enum\" href=\"kimchi/circuits/expr/enum.ConstantExpr.html\" title=\"enum kimchi::circuits::expr::ConstantExpr\">ConstantExpr</a>&lt;F&gt;, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.evaluate\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#1460-1472\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.evaluate\" class=\"fn\">evaluate</a>&lt;'a, Evaluations: <a class=\"trait\" href=\"kimchi/circuits/expr/trait.ColumnEvaluations.html\" title=\"trait kimchi::circuits::expr::ColumnEvaluations\">ColumnEvaluations</a>&lt;F, Column = Column&gt;, Environment: <a class=\"trait\" href=\"kimchi/circuits/expr/trait.ColumnEnvironment.html\" title=\"trait kimchi::circuits::expr::ColumnEnvironment\">ColumnEnvironment</a>&lt;'a, F, Column = Column&gt;&gt;(\n    &amp;self,\n    d: D&lt;F&gt;,\n    pt: F,\n    evals: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Evaluations</a>,\n    env: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Environment</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;F, <a class=\"enum\" href=\"kimchi/circuits/expr/enum.ExprError.html\" title=\"enum kimchi::circuits::expr::ExprError\">ExprError</a>&lt;Column&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Evaluate an expression as a field element against an environment.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.evaluate_\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#1475-1524\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.evaluate_\" class=\"fn\">evaluate_</a>&lt;Evaluations: <a class=\"trait\" href=\"kimchi/circuits/expr/trait.ColumnEvaluations.html\" title=\"trait kimchi::circuits::expr::ColumnEvaluations\">ColumnEvaluations</a>&lt;F, Column = Column&gt;&gt;(\n    &amp;self,\n    d: D&lt;F&gt;,\n    pt: F,\n    evals: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Evaluations</a>,\n    c: &amp;<a class=\"struct\" href=\"kimchi/circuits/expr/struct.Constants.html\" title=\"struct kimchi::circuits::expr::Constants\">Constants</a>&lt;F&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;F, <a class=\"enum\" href=\"kimchi/circuits/expr/enum.ExprError.html\" title=\"enum kimchi::circuits::expr::ExprError\">ExprError</a>&lt;Column&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Evaluate an expression as a field element against the constants.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.evaluate_constants\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#1527-1532\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.evaluate_constants\" class=\"fn\">evaluate_constants</a>&lt;'a, Environment: <a class=\"trait\" href=\"kimchi/circuits/expr/trait.ColumnEnvironment.html\" title=\"trait kimchi::circuits::expr::ColumnEnvironment\">ColumnEnvironment</a>&lt;'a, F, Column = Column&gt;&gt;(\n    &amp;self,\n    env: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Environment</a>\n) -&gt; <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;</h4></section></summary><div class=\"docblock\"><p>Evaluate the constant expressions in this expression down into field elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.evaluations\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#1535-1540\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.evaluations\" class=\"fn\">evaluations</a>&lt;'a, Environment: <a class=\"trait\" href=\"kimchi/circuits/expr/trait.ColumnEnvironment.html\" title=\"trait kimchi::circuits::expr::ColumnEnvironment\">ColumnEnvironment</a>&lt;'a, F, Column = Column&gt;&gt;(\n    &amp;self,\n    env: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Environment</a>\n) -&gt; Evaluations&lt;F, D&lt;F&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Compute the polynomial corresponding to this expression, in evaluation form.</p>\n</div></details></div></details>",0,"kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Expr%3CF,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#1548-1785\">source</a><a href=\"#impl-Expr%3CF,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: FftField, Column: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"kimchi/circuits/expr/trait.GenericColumn.html\" title=\"trait kimchi::circuits::expr::GenericColumn\">GenericColumn</a>&gt; <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.evaluate\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#1550-1599\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.evaluate\" class=\"fn\">evaluate</a>&lt;Evaluations: <a class=\"trait\" href=\"kimchi/circuits/expr/trait.ColumnEvaluations.html\" title=\"trait kimchi::circuits::expr::ColumnEvaluations\">ColumnEvaluations</a>&lt;F, Column = Column&gt;&gt;(\n    &amp;self,\n    d: D&lt;F&gt;,\n    pt: F,\n    zk_rows: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>,\n    evals: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Evaluations</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;F, <a class=\"enum\" href=\"kimchi/circuits/expr/enum.ExprError.html\" title=\"enum kimchi::circuits::expr::ExprError\">ExprError</a>&lt;Column&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Evaluate an expression into a field element.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.evaluations\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#1602-1644\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.evaluations\" class=\"fn\">evaluations</a>&lt;'a, Environment: <a class=\"trait\" href=\"kimchi/circuits/expr/trait.ColumnEnvironment.html\" title=\"trait kimchi::circuits::expr::ColumnEnvironment\">ColumnEnvironment</a>&lt;'a, F, Column = Column&gt;&gt;(\n    &amp;self,\n    env: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Environment</a>\n) -&gt; Evaluations&lt;F, D&lt;F&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Compute the polynomial corresponding to this expression, in evaluation form.</p>\n</div></details></div></details>",0,"kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Expr%3CF,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#1896-1906\">source</a><a href=\"#impl-Expr%3CF,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a>, Column&gt; <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#1899-1905\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.pow\" class=\"fn\">pow</a>(self, p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Exponentiate an expression</p>\n</div></details></div></details>",0,"kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Expr%3CF,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#1931-2124\">source</a><a href=\"#impl-Expr%3CF,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a>&lt;Output = F&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a> + <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>, Column: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>&gt; <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.linearize\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2076-2123\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.linearize\" class=\"fn\">linearize</a>(\n    &amp;self,\n    evaluated: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/set/struct.HashSet.html\" title=\"struct std::collections::hash::set::HashSet\">HashSet</a>&lt;Column&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"kimchi/circuits/expr/struct.Linearization.html\" title=\"struct kimchi::circuits::expr::Linearization\">Linearization</a>&lt;<a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;, Column&gt;, <a class=\"enum\" href=\"kimchi/circuits/expr/enum.ExprError.html\" title=\"enum kimchi::circuits::expr::ExprError\">ExprError</a>&lt;Column&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>There is an optimization in PLONK called “linearization” in which a certain\npolynomial is expressed as a linear combination of other polynomials in order\nto reduce the number of evaluations needed in the IOP (by relying on the homomorphic\nproperty of the polynomial commitments used.)</p>\n<p>The function performs this “linearization”, which we now describe in some detail.</p>\n<p>In mathematical language, an expression <code>e: Expr&lt;F&gt;</code>\nis an element of the polynomial ring <code>F[V]</code>, where <code>V</code> is a set of variables.</p>\n<p>Given a subset <code>V_0</code> of <code>V</code> (and letting <code>V_1 = V \\setminus V_0</code>), there is a map\n<code>factor_{V_0}: F[V] -&gt; (F[V_1])[V_0]</code>. That is, polynomials with <code>F</code> coefficients in the variables <code>V = V_0 \\cup V_1</code>\nare the same thing as polynomials with <code>F[V_1]</code> coefficients in variables <code>V_0</code>.</p>\n<p>There is also a function\n<code>lin_or_err : (F[V_1])[V_0] -&gt; Result&lt;Vec&lt;(V_0, F[V_2])&gt;, &amp;str&gt;</code></p>\n<p>which checks if the given input is in fact a degree 1 polynomial in the variables <code>V_0</code>\n(i.e., a linear combination of <code>V_0</code> elements with <code>F[V_1]</code> coefficients)\nreturning this linear combination if so.</p>\n<p>Given an expression <code>e</code> and set of columns <code>C_0</code>, letting\n<code>V_0 = { Variable { col: c, row: r } | c in C_0, r in { Curr, Next } }</code>,\nthis function computes <code>lin_or_err(factor_{V_0}(e))</code>, although it does not\ncompute it in that way. Instead, it computes it by reducing the expression into\na sum of monomials with <code>F</code> coefficients, and then factors the monomials.</p>\n</div></details></div></details>",0,"kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Expr%3CConstantExpr%3CF%3E,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2415-2595\">source</a><a href=\"#impl-Expr%3CConstantExpr%3CF%3E,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;<a class=\"enum\" href=\"kimchi/circuits/expr/enum.ConstantExpr.html\" title=\"enum kimchi::circuits::expr::ConstantExpr\">ConstantExpr</a>&lt;F&gt;, <a class=\"enum\" href=\"kimchi/circuits/berkeley_columns/enum.Column.html\" title=\"enum kimchi::circuits::berkeley_columns::Column\">Column</a>&gt;<span class=\"where fmt-newline\">where\n    F: PrimeField,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ocaml_str\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2420-2438\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.ocaml_str\" class=\"fn\">ocaml_str</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts the expression in OCaml code</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.latex_str\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2478-2496\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.latex_str\" class=\"fn\">latex_str</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the expression in LaTeX</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.text_str\" class=\"method\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2577-2594\">source</a><h4 class=\"code-header\">pub fn <a href=\"kimchi/circuits/expr/enum.Expr.html#tymethod.text_str\" class=\"fn\">text_str</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts the expression to a text string</p>\n</div></details></div></details>",0,"kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign-for-Expr%3CF,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2294-2308\">source</a><a href=\"#impl-MulAssign-for-Expr%3CF,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, Column&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a> for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> + <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    Column: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2299-2307\">source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: Self)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add-for-Expr%3CF,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2254-2265\">source</a><a href=\"#impl-Add-for-Expr%3CF,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a>, Column&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a> for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2256-2264\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: Self) -&gt; Self</h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add","kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-Expr%3CF,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2239-2252\">source</a><a href=\"#impl-Neg-for-Expr%3CF,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a>&lt;Output = F&gt;, Column&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a> for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2242-2251\">source</a><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;</h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details>","Neg","kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub-for-Expr%3CF,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2310-2318\">source</a><a href=\"#impl-Sub-for-Expr%3CF,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a>, Column&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a> for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2312-2317\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: Self) -&gt; Self</h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub","kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zero-for-Expr%3CF,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2213-2224\">source</a><a href=\"#impl-Zero-for-Expr%3CF,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a>, Column&gt; <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2214-2216\">source</a><a href=\"#method.zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#tymethod.zero\" class=\"fn\">zero</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the additive identity element of <code>Self</code>, <code>0</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#tymethod.zero\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2218-2223\">source</a><a href=\"#method.is_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#tymethod.is_zero\" class=\"fn\">is_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is equal to the additive identity.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#23\">source</a><a href=\"#method.set_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#method.set_zero\" class=\"fn\">set_zero</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.</div></details></div></details>","Zero","kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign-for-Expr%3CF,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2267-2275\">source</a><a href=\"#impl-AddAssign-for-Expr%3CF,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, Column: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a> for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2268-2274\">source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: Self)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Expr%3CC,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#435\">source</a><a href=\"#impl-Clone-for-Expr%3CC,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, Column: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;C, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#435\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;C, Column&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Expr%3CC,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#435\">source</a><a href=\"#impl-PartialEq-for-Expr%3CC,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>, Column: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;C, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#435\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;C, Column&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Expr%3CConstantExpr%3CF%3E,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#775-782\">source</a><a href=\"#impl-Display-for-Expr%3CConstantExpr%3CF%3E,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;<a class=\"enum\" href=\"kimchi/circuits/expr/enum.ConstantExpr.html\" title=\"enum kimchi::circuits::expr::ConstantExpr\">ConstantExpr</a>&lt;F&gt;, <a class=\"enum\" href=\"kimchi/circuits/berkeley_columns/enum.Column.html\" title=\"enum kimchi::circuits::berkeley_columns::Column\">Column</a>&gt;<span class=\"where fmt-newline\">where\n    F: PrimeField,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#779-781\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu64%3E-for-Expr%3CF,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2320-2324\">source</a><a href=\"#impl-From%3Cu64%3E-for-Expr%3CF,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: Field, Column&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2321-2323\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u64>","kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CF%3E-for-Expr%3CConstantExpr%3CF%3E,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2338-2344\">source</a><a href=\"#impl-Mul%3CF%3E-for-Expr%3CConstantExpr%3CF%3E,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: Field, Column: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;F&gt; for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;<a class=\"enum\" href=\"kimchi/circuits/expr/enum.ConstantExpr.html\" title=\"enum kimchi::circuits::expr::ConstantExpr\">ConstantExpr</a>&lt;F&gt;, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;<a class=\"enum\" href=\"kimchi/circuits/expr/enum.ConstantExpr.html\" title=\"enum kimchi::circuits::expr::ConstantExpr\">ConstantExpr</a>&lt;F&gt;, Column&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2341-2343\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, y: F) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<F>","kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ExprOps%3CF%3E-for-Expr%3CConstantExpr%3CF%3E,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2673-2742\">source</a><a href=\"#impl-ExprOps%3CF%3E-for-Expr%3CConstantExpr%3CF%3E,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"kimchi/circuits/expr/constraints/trait.ExprOps.html\" title=\"trait kimchi::circuits::expr::constraints::ExprOps\">ExprOps</a>&lt;F&gt; for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;<a class=\"enum\" href=\"kimchi/circuits/expr/enum.ConstantExpr.html\" title=\"enum kimchi::circuits::expr::ConstantExpr\">ConstantExpr</a>&lt;F&gt;, <a class=\"enum\" href=\"kimchi/circuits/berkeley_columns/enum.Column.html\" title=\"enum kimchi::circuits::berkeley_columns::Column\">Column</a>&gt;<span class=\"where fmt-newline\">where\n    F: PrimeField,\n    <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;<a class=\"enum\" href=\"kimchi/circuits/expr/enum.ConstantExpr.html\" title=\"enum kimchi::circuits::expr::ConstantExpr\">ConstantExpr</a>&lt;F&gt;, <a class=\"enum\" href=\"kimchi/circuits/berkeley_columns/enum.Column.html\" title=\"enum kimchi::circuits::berkeley_columns::Column\">Column</a>&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.two_pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2678-2680\">source</a><a href=\"#method.two_pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/circuits/expr/constraints/trait.ExprOps.html#tymethod.two_pow\" class=\"fn\">two_pow</a>(pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; Self</h4></section></summary><div class='docblock'>2^pow</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.two_to_limb\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2682-2687\">source</a><a href=\"#method.two_to_limb\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/circuits/expr/constraints/trait.ExprOps.html#tymethod.two_to_limb\" class=\"fn\">two_to_limb</a>() -&gt; Self</h4></section></summary><div class='docblock'>2^{LIMB_BITS}</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.two_to_2limb\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2689-2694\">source</a><a href=\"#method.two_to_2limb\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/circuits/expr/constraints/trait.ExprOps.html#tymethod.two_to_2limb\" class=\"fn\">two_to_2limb</a>() -&gt; Self</h4></section></summary><div class='docblock'>2^{2 * LIMB_BITS}</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.two_to_3limb\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2696-2701\">source</a><a href=\"#method.two_to_3limb\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/circuits/expr/constraints/trait.ExprOps.html#tymethod.two_to_3limb\" class=\"fn\">two_to_3limb</a>() -&gt; Self</h4></section></summary><div class='docblock'>2^{3 * LIMB_BITS}</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.double\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2703-2705\">source</a><a href=\"#method.double\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/circuits/expr/constraints/trait.ExprOps.html#tymethod.double\" class=\"fn\">double</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Double the value</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.square\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2707-2709\">source</a><a href=\"#method.square\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/circuits/expr/constraints/trait.ExprOps.html#tymethod.square\" class=\"fn\">square</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Compute the square of this value</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2711-2713\">source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/circuits/expr/constraints/trait.ExprOps.html#tymethod.pow\" class=\"fn\">pow</a>(&amp;self, p: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; Self</h4></section></summary><div class='docblock'>Raise the value to the given power</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.boolean\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2715-2717\">source</a><a href=\"#method.boolean\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/circuits/expr/constraints/trait.ExprOps.html#tymethod.boolean\" class=\"fn\">boolean</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Constrain to boolean</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.crumb\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2719-2721\">source</a><a href=\"#method.crumb\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/circuits/expr/constraints/trait.ExprOps.html#tymethod.crumb\" class=\"fn\">crumb</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Constrain to crumb (i.e. two bits)</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.literal\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2723-2725\">source</a><a href=\"#method.literal\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/circuits/expr/constraints/trait.ExprOps.html#tymethod.literal\" class=\"fn\">literal</a>(x: F) -&gt; Self</h4></section></summary><div class='docblock'>Create a literal</div></details><section id=\"method.witness\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2727-2729\">source</a><a href=\"#method.witness\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/circuits/expr/constraints/trait.ExprOps.html#tymethod.witness\" class=\"fn\">witness</a>(row: <a class=\"enum\" href=\"kimchi/circuits/gate/enum.CurrOrNext.html\" title=\"enum kimchi::circuits::gate::CurrOrNext\">CurrOrNext</a>, col: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, _: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"kimchi/circuits/argument/struct.ArgumentData.html\" title=\"struct kimchi::circuits::argument::ArgumentData\">ArgumentData</a>&lt;F&gt;&gt;) -&gt; Self</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.coeff\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2731-2733\">source</a><a href=\"#method.coeff\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/circuits/expr/constraints/trait.ExprOps.html#tymethod.coeff\" class=\"fn\">coeff</a>(col: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, _: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"kimchi/circuits/argument/struct.ArgumentData.html\" title=\"struct kimchi::circuits::argument::ArgumentData\">ArgumentData</a>&lt;F&gt;&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Coefficient</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.constant\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2735-2737\">source</a><a href=\"#method.constant\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/circuits/expr/constraints/trait.ExprOps.html#tymethod.constant\" class=\"fn\">constant</a>(expr: <a class=\"enum\" href=\"kimchi/circuits/expr/enum.ConstantExpr.html\" title=\"enum kimchi::circuits::expr::ConstantExpr\">ConstantExpr</a>&lt;F&gt;, _: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"kimchi/circuits/argument/struct.ArgumentData.html\" title=\"struct kimchi::circuits::argument::ArgumentData\">ArgumentData</a>&lt;F&gt;&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Create a constant</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cache\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2739-2741\">source</a><a href=\"#method.cache\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/circuits/expr/constraints/trait.ExprOps.html#tymethod.cache\" class=\"fn\">cache</a>(&amp;self, cache: &amp;mut <a class=\"struct\" href=\"kimchi/circuits/expr/struct.Cache.html\" title=\"struct kimchi::circuits::expr::Cache\">Cache</a>) -&gt; Self</h4></section></summary><div class='docblock'>Cache item</div></details></div></details>","ExprOps<F>","kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul-for-Expr%3CF,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2277-2292\">source</a><a href=\"#impl-Mul-for-Expr%3CF,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> + <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>, Column: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a> for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2279-2291\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: Self) -&gt; Self</h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul","kimchi::circuits::expr::E"],["<section id=\"impl-StructuralPartialEq-for-Expr%3CC,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#435\">source</a><a href=\"#impl-StructuralPartialEq-for-Expr%3CC,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, Column&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;C, Column&gt;</h3></section>","StructuralPartialEq","kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-One-for-Expr%3CF,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2226-2237\">source</a><a href=\"#impl-One-for-Expr%3CF,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> + <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>, Column: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&gt; <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a> for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;F, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2227-2229\">source</a><a href=\"#method.one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#tymethod.one\" class=\"fn\">one</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the multiplicative identity element of <code>Self</code>, <code>1</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#tymethod.one\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2231-2236\">source</a><a href=\"#method.is_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#method.is_one\" class=\"fn\">is_one</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is equal to the multiplicative identity. <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#method.is_one\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#102\">source</a><a href=\"#method.set_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#method.set_one\" class=\"fn\">set_one</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>.</div></details></div></details>","One","kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu64%3E-for-Expr%3CConstantExpr%3CF%3E,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2326-2330\">source</a><a href=\"#impl-From%3Cu64%3E-for-Expr%3CConstantExpr%3CF%3E,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: Field, Column&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;<a class=\"enum\" href=\"kimchi/circuits/expr/enum.ConstantExpr.html\" title=\"enum kimchi::circuits::expr::ConstantExpr\">ConstantExpr</a>&lt;F&gt;, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#2327-2329\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u64>","kimchi::circuits::expr::E"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Expr%3CC,+Column%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#435\">source</a><a href=\"#impl-Debug-for-Expr%3CC,+Column%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>, Column: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"kimchi/circuits/expr/enum.Expr.html\" title=\"enum kimchi::circuits::expr::Expr\">Expr</a>&lt;C, Column&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/circuits/expr.rs.html#435\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","kimchi::circuits::expr::E"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()