(function() {var type_impls = {
"kimchi_optimism":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FoldingEnv%3C%3CG+as+AffineCurve%3E::ScalarField,+FoldingInstance%3CN,+G%3E,+FoldingWitness%3CN,+%3CG+as+AffineCurve%3E::ScalarField%3E,+Col,+Challenge,+Selector%3E-for-FoldingEnvironment%3CN,+G%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi_optimism/folding.rs.html#115-188\">source</a><a href=\"#impl-FoldingEnv%3C%3CG+as+AffineCurve%3E::ScalarField,+FoldingInstance%3CN,+G%3E,+FoldingWitness%3CN,+%3CG+as+AffineCurve%3E::ScalarField%3E,+Col,+Challenge,+Selector%3E-for-FoldingEnvironment%3CN,+G%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, G: CommitmentCurve, Col, Selector: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; FoldingEnv&lt;&lt;G as AffineCurve&gt;::ScalarField, <a class=\"struct\" href=\"kimchi_optimism/folding/struct.FoldingInstance.html\" title=\"struct kimchi_optimism::folding::FoldingInstance\">FoldingInstance</a>&lt;N, G&gt;, <a class=\"struct\" href=\"kimchi_optimism/folding/struct.FoldingWitness.html\" title=\"struct kimchi_optimism::folding::FoldingWitness\">FoldingWitness</a>&lt;N, &lt;G as AffineCurve&gt;::ScalarField&gt;, Col, <a class=\"enum\" href=\"kimchi_optimism/folding/enum.Challenge.html\" title=\"enum kimchi_optimism::folding::Challenge\">Challenge</a>, Selector&gt; for <a class=\"struct\" href=\"kimchi_optimism/folding/struct.FoldingEnvironment.html\" title=\"struct kimchi_optimism::folding::FoldingEnvironment\">FoldingEnvironment</a>&lt;N, G&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"kimchi_optimism/folding/struct.FoldingWitness.html\" title=\"struct kimchi_optimism::folding::FoldingWitness\">FoldingWitness</a>&lt;N, G::ScalarField&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Col, Output = Evaluations&lt;G::ScalarField, Radix2EvaluationDomain&lt;G::ScalarField&gt;&gt;&gt;,\n    <a class=\"struct\" href=\"kimchi_optimism/folding/struct.FoldingWitness.html\" title=\"struct kimchi_optimism::folding::FoldingWitness\">FoldingWitness</a>&lt;N, G::ScalarField&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Selector, Output = Evaluations&lt;G::ScalarField, Radix2EvaluationDomain&lt;G::ScalarField&gt;&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Structure\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Structure\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Structure</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>Structure which could be storing useful information like selectors, etc.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi_optimism/folding.rs.html#134-152\">source</a><a href=\"#method.new\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">new</a>(\n    _structure: &amp;Self::Structure,\n    instances: [&amp;<a class=\"struct\" href=\"kimchi_optimism/folding/struct.FoldingInstance.html\" title=\"struct kimchi_optimism::folding::FoldingInstance\">FoldingInstance</a>&lt;N, G&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">2</a>],\n    witnesses: [&amp;<a class=\"struct\" href=\"kimchi_optimism/folding/struct.FoldingWitness.html\" title=\"struct kimchi_optimism::folding::FoldingWitness\">FoldingWitness</a>&lt;N, G::ScalarField&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">2</a>]\n) -&gt; Self</h4></section></summary><div class='docblock'>Creates a new environment storing the structure, instances and witnesses.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi_optimism/folding.rs.html#154-156\">source</a><a href=\"#method.zero_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zero_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;G::ScalarField&gt;</h4></section></summary><div class='docblock'>Returns a vector of zeros with the same length as the number of rows in\nthe circuit.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.col\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi_optimism/folding.rs.html#158-165\">source</a><a href=\"#method.col\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">col</a>(\n    &amp;self,\n    col: Col,\n    curr_or_next: CurrOrNext,\n    side: Side\n) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;G::ScalarField&gt;</h4></section></summary><div class='docblock'>Returns the evaluations of a given column witness at omega or zeta*omega.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.challenge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi_optimism/folding.rs.html#167-173\">source</a><a href=\"#method.challenge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">challenge</a>(&amp;self, challenge: <a class=\"enum\" href=\"kimchi_optimism/folding/enum.Challenge.html\" title=\"enum kimchi_optimism::folding::Challenge\">Challenge</a>, side: Side) -&gt; G::ScalarField</h4></section></summary><div class='docblock'>Obtains a given challenge from the expanded instance for one side.\nThe challenges are stored inside the instances structs.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lagrange_basis\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi_optimism/folding.rs.html#175-177\">source</a><a href=\"#method.lagrange_basis\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lagrange_basis</a>(&amp;self, _i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;G::ScalarField&gt;</h4></section></summary><div class='docblock'>Returns the evaluations of the i-th Lagrangian term.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alpha\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi_optimism/folding.rs.html#179-182\">source</a><a href=\"#method.alpha\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">alpha</a>(&amp;self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, side: Side) -&gt; G::ScalarField</h4></section></summary><div class='docblock'>Computes the i-th power of alpha for a given side.\nFolding itself will provide us with the alpha value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.selector\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi_optimism/folding.rs.html#184-187\">source</a><a href=\"#method.selector\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">selector</a>(&amp;self, s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Selector</a>, side: Side) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;G::ScalarField&gt;</h4></section></summary><div class='docblock'>similar to [Self::col], but folding may ask for a dynamic selector directly\ninstead of just column that happens to be a selector</div></details></div></details>","FoldingEnv<<G as AffineCurve>::ScalarField, FoldingInstance<N, G>, FoldingWitness<N, <G as AffineCurve>::ScalarField>, Col, Challenge, Selector>","kimchi_optimism::keccak::folding::KeccakFoldingEnvironment","kimchi_optimism::mips::folding::MIPSFoldingEnvironment"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()